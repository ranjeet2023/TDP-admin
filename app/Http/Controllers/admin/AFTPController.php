<?php

namespace App\Http\Controllers\admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Helpers\AppHelper;

use App\Imports\UsersImport;
use Maatwebsite\Excel\Facades\Excel;
use DB;

use App\Models\Supplier;
use App\Models\DiamondConflict;
use App\Models\DiamondInvalid;
use App\Models\DiamondNatural;
use App\Models\DiamondUnapprove;
use App\Models\StockUploadReport;

set_time_limit(0);
ini_set('memory_limit', -1);

class AFTPController extends Controller
{
    public function index(Request $request)
    {

        // Artisan::call('cache:clear');
        $data_response = array();

        $company_detail = Supplier::select('sup_id', 'companyname', 'supplier_name', 'markup', 'upload_mode', 'diamond_type', 'folder_name', 'stock_status', 'is_active',
        DB::raw('(SELECT `created_at` FROM `stock_upload_report` WHERE `supplier_id` = suppliers.sup_id ORDER BY `created_at` DESC LIMIT 1) as stock_created_date'))
        ->join('users', 'users.id', '=', 'suppliers.sup_id')
        ->where('ftp_host', '!=', '')
        ->where('ftp_username', '!=', '')
        ->where('ftp_password', '!=', '')
        ->where('ftp_password', '!=', '')
        ->where('upload_mode', 'FTP')
        ->where('stock_status', 'ACTIVE')
        // ->where('supplier_name', '=', 'Ramee Gems')
        // ->whereNotIn('supplier_name', array('Ramee Gems','Dharmanandan Diamonds Pvt. Ltd.'))//
        ->where('is_active', 1)->get();

        $ext_array = array('xls','xlsx','csv');

        if (count($company_detail) > 0) {
            echo "<pre>";

            foreach ($company_detail as $supplier) {
                echo "<hr>";

                $todate = date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                // echo "<pre>";
                $data_response = array();
                $file_path = '';
                if(!empty($supplier->folder_name))
                {
                    $Folder_Path = '../supplier_files/' . $supplier->folder_name . '/';

                    $filesInFolder = \File::allFiles($Folder_Path);
                    $fileNameArray = [];
                    foreach ($filesInFolder as $file){
                            $fileNameArray[] = $file->getFilename();
                    }

                    $File_Name = !empty($fileNameArray)? $fileNameArray[0]:'';
                    $ext = \File::extension($File_Name);

                    $file_path = !in_array(strtolower($ext), $ext_array) ? NULL : $Folder_Path.$File_Name;
                }

                if (file_exists($file_path)) {

                    try {
                        $file_update_date = filemtime($file_path);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['time'] = time() - $file_update_date;
                        $data_response['file_path'] = $file_path;
                        $data_response['file_data'] = date('Y-m-d H:i:s', $file_update_date);
                        // File uploaded date before 72 hours
                        if (time() - $file_update_date < (72 * 3600)) {
                            $data_response['last_refresh'] = !empty($supplier->stock_created_date) ? $supplier->stock_created_date : date('Y-m-d', strtotime('-7 days'));
                            $data_response['diff'] = time() - strtotime($data_response['last_refresh']) . ' > ' . (3 * 3600);
                            if (time() - strtotime($data_response['last_refresh']) > (3 * 3600)) {
                                $data_response['filest'] = 'Execute';

                                // $inputFileType = \PhpOffice\PhpSpreadsheet\IOFactory::identify($file_path);
                                // $reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader($inputFileType);
                                // if($inputFileType == "Csv")
                                // {
                                //     $reader->setDelimiter(',')->setEnclosure('"');
                                // }
                                // $sheet_data = $reader->load($file_path)->getActiveSheet()->toArray();
                                if($ext == "xlsx")
                                {
                                    $sheet = Excel::toArray(new UsersImport(), $file_path, null,\Maatwebsite\Excel\Excel::XLSX);
                                }
                                else
                                {
                                    $sheet = Excel::toArray(new UsersImport(), $file_path);
                                }
                                $sheet_data = $sheet[0];

                                // $SheetError = array_search('stock #', $sheet_data[0])===false?'stock id missing, <br/> ':null;
                                // $SheetError .= array_search('shape', $sheet_data[0])===false?'shape missing, <br/>':null;
                                // $SheetError .= array_search('weight', $sheet_data[0])===false?'carat missing, <br/>':null;
                                // $SheetError .= array_search('color', $sheet_data[0])===false?'color missing, <br/>':null;
                                // $SheetError .= array_search('clarity', $sheet_data[0])===false?'clarity missing, <br/>':null;
                                // $SheetError .= array_search('certificate #', $sheet_data[0])===false?'certificate No missing, <br/>':null;
                                // $SheetError .= array_search('$/ct', $sheet_data[0])===false?'$/ct missing, <br/>':null;

                                // // if(empty($SheetError))
                                // // {
                                //     $stock_array = array_column($sheet_data, array_search('stock #', $sheet_data[0]));
                                //     array_shift($stock_array);
                                //     $st = array_diff_assoc($stock_array, array_unique($stock_array));
                                // // }

                                if ($supplier->diamond_type == 'Natural') {
                                    $sheet_data[0] = AppHelper::ChangeExcelTitleNatural($sheet_data[0]);
                                }
                                else
                                {
                                    $sheet_data[0] = AppHelper::ChangeExcelTitleLabGrown($sheet_data[0]);
                                }

                                if(in_array('stock #',$sheet_data[0]) && in_array('certificate #',$sheet_data[0]))
                                {
                                    $stock_array = array_column($sheet_data, array_search('stock #', $sheet_data[0]));
                                    array_shift($stock_array);
                                    $st = array_diff_assoc($stock_array, array_unique($stock_array));

                                    $shiping_price_array = array();
                                    $shiping_price_array = AppHelper::shipingPriceArray();
                                    $s_price_array = AppHelper::sPriceArray($supplier);

                                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                                    if ($supplier->diamond_type == 'Natural') {
                                        if(empty($SheetError))
                                        {
                                            $certificate_array = array_column($sheet_data, array_search('certificate #', $sheet_data[0]));
                                            array_shift($certificate_array);
                                            $d = array_diff_assoc($certificate_array, array_unique($certificate_array));
                                        }
                                        // else
                                        // {
                                        //     print_r($SheetError);
                                        // }

                                        $updatedelete = 1;
                                        DiamondInvalid::where('supplier_id', $supplier->sup_id)->delete();
                                        DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                                        DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                                        if ($supplier->stock_status == 'ACTIVE') {
                                        } else {
                                            DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                                        }

                                        $flag = false;
                                        $i = 1;
                                        $index = 0;
                                        $invalid = 0;
                                        $j = 0;
                                        $file_update_date = date("Y-m-d H:i:s", filemtime($file_path));

                                        if ($updatedelete) {
                                            $updatestring = '';
                                            foreach ($sheet_data as $value) {
                                                $keyvaluepair = array_combine($sheet_data[0], $value);
                                                if ($i == 1 && str_replace(' ', '', @$keyvaluepair['stock #']) == 'stock#' && @$keyvaluepair['shape'] == 'shape' && @$keyvaluepair['weight'] == 'weight' && @$keyvaluepair['color'] == 'color' && @$keyvaluepair['clarity'] == 'clarity' && str_replace(' ', '', @$keyvaluepair['certificate #']) == 'certificate#' && @$keyvaluepair['$/ct'] == '$/ct') {
                                                    $flag = true;
                                                }

                                                if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {

                                                    if (@$keyvaluepair['measurements'] != "") {
                                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                                        $main = explode("x", $mesurment);
                                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                                    }

                                                    if (empty(trim(@$keyvaluepair['certificate #']))) {
                                                        $respo['success'] = false;
                                                        $respo['reason'] = 'Certificate Blank';
                                                    } elseif (in_array(@$keyvaluepair['certificate #'], $d)) {
                                                        $respo['success'] = false;
                                                        $respo['reason'] = 'Certificate Duplicate';
                                                    } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                                        $respo['success'] = false;
                                                        $respo['reason'] = 'Stock ID Blank';
                                                    } elseif (in_array(@$keyvaluepair['stock #'], $st)) {
                                                        $respo['success'] = false;
                                                        $respo['reason'] = 'Stock ID Duplicate';
                                                    } else {
                                                        $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                                        if ($shape == '') {
                                                            $respo['success'] = false;
                                                            $respo['reason'] = 'Shape';
                                                        } else {
                                                            $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                                        }
                                                    }

                                                    $file_update_date = date("Y-m-d H:i:s", filemtime($file_path));
                                                    if ($respo['success']) {
                                                        $cut = '';
                                                        $Crn_Ht =  $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                                        if ($shape == "ROUND") {
                                                            $C_shape = "round";
                                                            $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                                            $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                                            $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                                            $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                                            $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                                        } else {
                                                            $C_shape = "pear";
                                                        }

                                                        if (strtolower(@$keyvaluepair['color']) == 'fancy' || @$keyvaluepair['color'] == '*' || @$keyvaluepair['color'] == '') {
                                                            $color = 'fancy';
                                                            $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                                            $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                                            $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                                            $cut = '';
                                                            $Crn_Ht =  $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                                        } else {
                                                            $f_color = $f_intensity = $f_overtone = '';
                                                            $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                                        }

                                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                                        $polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                                        $symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                                        $fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                                        $certi = trim(@$keyvaluepair['certificate #']);
                                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                                        if(empty($eyeclean))
                                                        {
                                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                                            switch($clarityToeyeclean)
                                                            {
                                                                case 'fl':
                                                                case 'if':
                                                                case 'vvs1':
                                                                case 'vvs2':
                                                                case 'vs1':
                                                                    $eyeclean = "Yes";
                                                                    break;
                                                            }
                                                        }

                                                        $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                                        $arrow = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                                        $asset = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                                        $video = !empty(@$keyvaluepair['video link']) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                                        $milky = '';
                                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                                        if(empty($milky))
                                                        {
                                                            if(isset($keyvaluepair['luster']))
                                                            {
                                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                                switch($lusterToMilky)
                                                                {
                                                                    case 'excellent':
                                                                    case 'ex':
                                                                    case 'verygood':
                                                                    case 'vg+':
                                                                        $milky = 'NO MILKY';
                                                                        break;
                                                                    case 'lightmilky':
                                                                        $milky = 'LIGHT MILKY ';
                                                                        break;
                                                                    case 'milky':
                                                                        $milky = 'MILKY';
                                                                        break;
                                                                }
                                                            }
                                                        }

                                                        $carat = bcdiv(@$keyvaluepair['weight'], 1, 2);
                                                        $add_dic = 0;
                                                        if (!empty($s_price_array)) {
                                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                                        }

                                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                                        $net_price = round($carat * $newdollerpercarat, 2);

                                                        $C_Length = $C_Width = $C_Depth = '0';
                                                        if (@$keyvaluepair['measurements'] != '') {
                                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), 'x', strtolower(@$keyvaluepair['measurements']));
                                                            $main = explode('x', $mesurment);
                                                            $C_Length = (!empty($main[0])) ? $main[0] : '';
                                                            $C_Width = (!empty($main[1])) ? $main[1] : '';
                                                            $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                                        }
                                                        else
                                                        {
                                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                                        }

                                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                                        $result = array(
                                                            'supplier_name' => $supplier->companyname,
                                                            'supplier_id' => $supplier->sup_id,
                                                            'ref_no' => @$keyvaluepair['stock #'],
                                                            'shape' => $shape,
                                                            'carat' => $carat,
                                                            'color' => $color,
                                                            'clarity' => strtoupper($clarity),
                                                            'cut' => $cut,
                                                            'polish' => $polish,
                                                            'symmetry' => $symmetry,
                                                            'fluorescence' => $fluorescence,
                                                            'orignal_rate' => $dollerpercarat,
                                                            'rate' => $newdollerpercarat,
                                                            'net_dollar' => $net_price,
                                                            'table_per' => @$keyvaluepair['table percent'],
                                                            'depth_per' => @$keyvaluepair['depth percent'],
                                                            'lab' => $lab,
                                                            'fancy_color' => $f_color,
                                                            'fancy_intensity' => $f_intensity,
                                                            'fancy_overtone' => $f_overtone,
                                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                                            'crown_angle' => $Crn_Ag,
                                                            'crown_height' => $Crn_Ht,
                                                            'pavilion_angle' => $Pav_Ag,
                                                            'pavilion_depth' => $Pav_Dp,
                                                            'certificate_no' => $certi,
                                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                                            'country' => $country,
                                                            'city' => @$keyvaluepair['city'],
                                                            'length' => $C_Length,
                                                            'width' => $C_Width,
                                                            'depth' => $C_Depth,
                                                            'milky' => $milky,
                                                            'eyeclean' => $eyeclean,
                                                            'image' => $image,
                                                            'video' => $video,
                                                            'heart' => $heart,
                                                            'arrow' => $arrow,
                                                            'asset' => $asset,
                                                            'diamond_type' => 'W',
                                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                                            'is_delete' => '0',
                                                        );

                                                        $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                                        $index++;
                                                    } else {
                                                        if (@$keyvaluepair['girdle %'] != '') {
                                                            $gridle_per = @$keyvaluepair['girdle %'];
                                                        } else {
                                                            $gridle_per = '0';
                                                        }

                                                        if (@$keyvaluepair['measurements'] != "") {
                                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                                            $main = explode("x", $mesurment);
                                                            $C_Length = (!empty($main[0])) ? $main[0] : '';
                                                            $C_Width = (!empty($main[1])) ? $main[1] : '';
                                                            $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                                        }

                                                        $result = array(
                                                            'supplier_name' => $supplier->companyname,
                                                            'supplier_id' => $supplier->sup_id,
                                                            'ref_no' => @$keyvaluepair['stock #'],
                                                            'shape' => @$keyvaluepair['shape'],
                                                            'carat' => @$keyvaluepair['weight'],
                                                            'color' => @$keyvaluepair['color'],
                                                            'clarity' => @$keyvaluepair['clarity'],
                                                            'cut' => @$keyvaluepair['cut grade'],
                                                            'polish' => @$keyvaluepair['polish'],
                                                            'symmetry' => @$keyvaluepair['symmetry'],
                                                            'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                                            'length' => $C_Length,
                                                            'width' => $C_Width,
                                                            'depth' => $C_Depth,
                                                            'lab' => @$keyvaluepair['lab'],
                                                            'certificate_no' => @$keyvaluepair['certificate #'],
                                                            'cert_comment' => @$keyvaluepair['report comments'],
                                                            'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                                            'fancy_color' => @$keyvaluepair['fancy color'],
                                                            'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                                            'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                                            'depth_per' => @$keyvaluepair['depth percent'],
                                                            'table_per' => @$keyvaluepair['table percent'],
                                                            'girdle_thin' => @$keyvaluepair['girdle thin'],
                                                            'girdle_thick' => @$keyvaluepair['girdle thick'],
                                                            'gridle' => @$keyvaluepair['girdle condition'],
                                                            'cutlet' => @$keyvaluepair['culet'],
                                                            'gridle_per' => @$keyvaluepair['girdle percent'],
                                                            'crown_height' => @$keyvaluepair['crown height'],
                                                            'crown_angle' => @$keyvaluepair['crown angle'],
                                                            'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                                            'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                                            'country' => @$keyvaluepair['country'],
                                                            'city' => @$keyvaluepair['city'],
                                                            'image' => @$keyvaluepair['image link'],
                                                            'video' => trim(@$keyvaluepair['video link']),
                                                            'heart' => @$keyvaluepair['heart image'],
                                                            'arrow' => @$keyvaluepair['arrow image'],
                                                            'asset' => @$keyvaluepair['aset image'],
                                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                                            'milky' => @$keyvaluepair['milky'],
                                                            'eyeclean' => @$keyvaluepair['eye clean'],
                                                            'availability' => @$keyvaluepair['availability'],
                                                            'shade' => @$keyvaluepair['shade'],
                                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                                            'luster' => @$keyvaluepair['luster'],
                                                            'culet_condition' => @$keyvaluepair['culet condition'],
                                                        );
                                                        $result['reason'] = $respo['reason'];
                                                        DiamondInvalid::insert($result);
                                                        $invalid++;
                                                    }
                                                    $j++;
                                                }
                                                $i++;
                                            }
                                        }

                                        if ($flag) {
                                            $stock_upload_report = array(
                                                'supplier_id' => $supplier->sup_id,
                                                'no_of_stone' => $j,
                                                'valid_diamond' => $index,
                                                'invalid_diamond' => $invalid,
                                                'upload_mode' => 'FTP',
                                                'info' => $File_Name,
                                                'created_at' => date('Y-m-d H:i:s'),
                                                'file_updated_at' => $file_update_date,
                                            );
                                            $load_id = StockUploadReport::insertGetId($stock_upload_report);

                                            // $this->db->where('load_id', 0);
                                            // $this->db->where('supp_id', $supplier->id);
                                            // $this->db->update('diamond_master_stg', array('load_id' => $load_id));

                                            $data_response['message'] = $index . ' diamond uploaded';
                                            $data_response['files'][0]['name'] = $index . ' diamond uploaded  ' . $invalid . ' Invalid Diamond';
                                            $data_response['isSuccess'] = true;
                                            $data_response['flag'] = $flag;
                                        } else {
                                            $data_response['flag'] = $flag;
                                            $data_response['warnings'][] = 'Format not supported';
                                            $data_response['hasWarnings'] = true;
                                        }
                                    } else {
                                        // Lab Grown Diamond  //---------------------------------------------------------------------------------------------------------------------------------/
                                        // Lab Grown Diamond  //---------------------------------------------------------------------------------------------------------------------------------/
                                        // Lab Grown Diamond  //---------------------------------------------------------------------------------------------------------------------------------/

                                        if(empty($SheetError))
                                        {
                                            $certificate_array = array_column($sheet_data, array_search("certificate #", $sheet_data[0]));
                                            array_shift($certificate_array);
                                            $d = array_diff_assoc($certificate_array, array_unique($certificate_array));
                                        }

                                        $updatedelete = 1;
                                        DiamondInvalid::where('supplier_id', $supplier->sup_id)->delete();
                                        DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                                        DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                                        if ($supplier->stock_status == 'ACTIVE') {
                                        } else {
                                            DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                                        }

                                        $flag = false;
                                        $i = 1;
                                        $index = 0;
                                        $invalid = 0;
                                        $j = 0;
                                        $file_update_date = date("Y-m-d H:i:s", filemtime($file_path));

                                        if ($updatedelete) {
                                            $updatestring = '';
                                            foreach ($sheet_data as $value) {
                                                $keyvaluepair = array_combine($sheet_data[0], $value);
                                                if ($i == 1 && str_replace(" ", "", @$keyvaluepair['stock #']) == "stock#" && trim(@$keyvaluepair['shape']) == 'shape' && trim(@$keyvaluepair['weight']) == 'weight' && trim(@$keyvaluepair['clarity']) == 'clarity' && trim(@$keyvaluepair['color']) == 'color' && str_replace(" ", "", @$keyvaluepair['certificate #']) == "certificate#" && strtoupper(trim(@$keyvaluepair['$/ct'])) == '$/CT') {
                                                    $flag = true;
                                                }

                                                if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {

                                                    if (@$keyvaluepair['measurements'] != "") {
                                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                                        $main = explode("x", $mesurment);
                                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                                    }

                                                    if (empty(trim(@$keyvaluepair['certificate #']))) {
                                                        $respo['success'] = false;
                                                        $respo['reason'] = "Certificate Blank";
                                                    } elseif (in_array(@$keyvaluepair['certificate #'], $d)) {
                                                        $respo['success'] = false;
                                                        $respo['reason'] = "Certificate Duplicate";
                                                    } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                                        $respo['success'] = false;
                                                        $respo['reason'] = "Stock ID Blank";
                                                    } elseif (in_array(@$keyvaluepair['stock #'], $st)) {
                                                        $respo['success'] = false;
                                                        $respo['reason'] = "Stock ID Duplicate";
                                                    } else {
                                                        $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                                        if ($shape == "") {
                                                            $respo['success'] = false;
                                                            $respo['reason'] = "Shape";
                                                        } else {
                                                            $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                                        }
                                                    }

                                                    if ($respo['success']) {
                                                        $cut = '';
                                                        $Crn_Ht =  $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                                        if ($shape == 'ROUND') {
                                                            $C_shape = 'round';
                                                            $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                                            $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                                            $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                                            $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                                            $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                                        } else {
                                                            $C_shape = 'pear';
                                                        }

                                                        if (strtolower(@$keyvaluepair['color']) == 'fancy' || @$keyvaluepair['color'] == '*' || @$keyvaluepair['color'] == '') {
                                                            $color = 'fancy';
                                                            $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                                            $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                                            $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                                            $cut = '';
                                                            $Crn_Ht =  $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                                        } else {
                                                            $f_color = $f_intensity = $f_overtone = '';
                                                            $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                                        }
                                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                                        $polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                                        $symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                                        $fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                                        $certi = trim(@$keyvaluepair['certificate #']);
                                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                                        if(empty($eyeclean))
                                                        {
                                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                                            switch($clarityToeyeclean)
                                                            {
                                                                case 'fl':
                                                                case 'if':
                                                                case 'vvs1':
                                                                case 'vvs2':
                                                                case 'vs1':
                                                                    $eyeclean = "Yes";
                                                                    break;
                                                            }
                                                        }

                                                        $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                                        $arrow = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                                        $asset = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                                        $video = !empty(@$keyvaluepair['video link']) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                                        $milky = '';
                                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';
                                                        if(empty($milky))
                                                        {
                                                            if(isset($keyvaluepair['luster']))
                                                            {
                                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                                switch($lusterToMilky)
                                                                {
                                                                    case 'excellent':
                                                                    case 'ex':
                                                                    case 'verygood':
                                                                    case 'vg+':
                                                                        $milky = 'NO MILKY';
                                                                        break;
                                                                    case 'lightmilky':
                                                                        $milky = 'LIGHT MILKY ';
                                                                        break;
                                                                    case 'milky':
                                                                        $milky = 'MILKY';
                                                                        break;
                                                                }
                                                            }
                                                        }

                                                        $carat = sprintf('%.2f', @$keyvaluepair['weight']); //empty(bcdiv(@$keyvaluepair['Weight'], 1, 2)) ? @$keyvaluepair['Weight'] :
                                                        $add_dic = 0;
                                                        if (!empty($s_price_array)) {
                                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                                        }

                                                        $dollerpercarat = str_replace(array('$', ','), '', @$keyvaluepair['$/ct']);
                                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                                        $net_price = round($carat * $newdollerpercarat, 2);

                                                        $C_Length = $C_Width = $C_Depth = '0';
                                                        if (@$keyvaluepair['measurements'] != '') {
                                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), 'x', strtolower(@$keyvaluepair['measurements']));
                                                            $main = explode('x', $mesurment);
                                                            $C_Length = (!empty($main[0])) ? $main[0] : '';
                                                            $C_Width = (!empty($main[1])) ? $main[1] : '';
                                                            $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                                        }
                                                        else
                                                        {
                                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                                        }

                                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                                        $result = array(
                                                            'supplier_name' => $supplier->companyname,
                                                            'supplier_id' => $supplier->sup_id,
                                                            'ref_no' => @$keyvaluepair['stock #'],
                                                            'shape' => $shape,
                                                            'carat' => $carat,
                                                            'color' => $color,
                                                            'clarity' => strtoupper($clarity),
                                                            'cut' => $cut,
                                                            'polish' => $polish,
                                                            'symmetry' => $symmetry,
                                                            'fluorescence' => $fluorescence,
                                                            'orignal_rate' => $dollerpercarat,
                                                            'rate' => $newdollerpercarat,
                                                            'net_dollar' => $net_price,
                                                            'table_per' => @$keyvaluepair['table percent'],
                                                            'depth_per' => @$keyvaluepair['depth percent'],
                                                            'lab' => $lab,
                                                            'fancy_color' => $f_color,
                                                            'fancy_intensity' => $f_intensity,
                                                            'fancy_overtone' => $f_overtone,
                                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                                            'crown_angle' => $Crn_Ag,
                                                            'crown_height' => $Crn_Ht,
                                                            'pavilion_angle' => $Pav_Ag,
                                                            'pavilion_depth' => $Pav_Dp,
                                                            'certificate_no' => $certi,
                                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                                            'country' => $country,
                                                            'city' => @$keyvaluepair['city'],
                                                            'length' => $C_Length,
                                                            'width' => $C_Width,
                                                            'depth' => $C_Depth,
                                                            'milky' => $milky,
                                                            'eyeclean' => $eyeclean,
                                                            'image' => $image,
                                                            'video' => $video,
                                                            'heart' => $heart,
                                                            'arrow' => $arrow,
                                                            'asset' => $asset,
                                                            'diamond_type' => 'L',
                                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                                            'is_delete' => '0',
                                                        );

                                                        $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                                        $index++;
                                                    } else {
                                                        $C_Length = $C_Width = $C_Depth = '0';
                                                        if (@$keyvaluepair['measurements'] != "") {
                                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                                            $main = explode("x", $mesurment);
                                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                                        }
                                                        else
                                                        {
                                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                                        }
                                                        $result = array(
                                                            'supplier_name' => $supplier->companyname,
                                                            'supplier_id' => $supplier->sup_id,
                                                            'ref_no' => @$keyvaluepair['stock #'],
                                                            'shape' => @$keyvaluepair['shape'],
                                                            'carat' => @$keyvaluepair['weight'],
                                                            'color' => @$keyvaluepair['color'],
                                                            'clarity' => @$keyvaluepair['clarity'],
                                                            'cut' => @$keyvaluepair['cut grade'],
                                                            'polish' => @$keyvaluepair['polish'],
                                                            'symmetry' => @$keyvaluepair['symmetry'],
                                                            'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                                            'length' => $C_Length,
                                                            'width' => $C_Width,
                                                            'depth' => $C_Depth,
                                                            'lab' => @$keyvaluepair['lab'],
                                                            'certificate_no' => @$keyvaluepair['certificate #'],
                                                            'cert_comment' => @$keyvaluepair['report comments'],
                                                            'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                                            'fancy_color' => @$keyvaluepair['fancy color'],
                                                            'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                                            'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                                            'depth_per' => @$keyvaluepair['depth percent'],
                                                            'table_per' => @$keyvaluepair['table percent'],
                                                            'girdle_thin' => @$keyvaluepair['girdle thin'],
                                                            'girdle_thick' => @$keyvaluepair['girdle thick'],
                                                            'gridle' => @$keyvaluepair['girdle condition'],
                                                            'cutlet' => @$keyvaluepair['culet'],
                                                            'gridle_per' => @$keyvaluepair['girdle percent'],
                                                            'crown_height' => @$keyvaluepair['crown height'],
                                                            'crown_angle' => @$keyvaluepair['crown angle'],
                                                            'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                                            'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                                            'country' => @$keyvaluepair['country'],
                                                            'city' => @$keyvaluepair['city'],
                                                            'image' => @$keyvaluepair['image link'],
                                                            'video' => trim(@$keyvaluepair['video link']),
                                                            'heart' => @$keyvaluepair['heart image'],
                                                            'arrow' => @$keyvaluepair['arrow image'],
                                                            'asset' => @$keyvaluepair['aset image'],
                                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                                            'milky' => @$keyvaluepair['milky'],
                                                            'eyeclean' => @$keyvaluepair['eye clean'],
                                                            'availability' => @$keyvaluepair['availability'],
                                                            'shade' => @$keyvaluepair['shade'],
                                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                                            'luster' => @$keyvaluepair['luster'],
                                                            'culet_condition' => @$keyvaluepair['culet condition'],
                                                        );
                                                        $result['reason'] = $respo['reason'];
                                                        DiamondInvalid::insert($result);
                                                        $invalid++;
                                                    }
                                                    $j++;
                                                }
                                                $i++;
                                            }
                                        }
                                        if ($flag) {
                                            $stock_upload_report = array(
                                                'supplier_id' => $supplier->sup_id,
                                                'no_of_stone' => $j,
                                                'valid_diamond' => $index,
                                                'invalid_diamond' => $invalid,
                                                'upload_mode' => 'FTP',
                                                'info' => $File_Name,
                                                'created_at' => date('Y-m-d H:i:s'),
                                                'file_updated_at' => $file_update_date,
                                            );
                                            $load_id = StockUploadReport::insertGetId($stock_upload_report);

                                            $data_response['message'] = $index . " Lab diamond uploaded";
                                            $data_response['files'][0]['name'] = $index . "  Lab diamond uploaded  " . $invalid . " Invalid Diamond";
                                            $data_response['isSuccess'] = true;
                                            $data_response['flag'] = $flag;
                                        } else {
                                            $data_response['flag'] = $flag;
                                            $data_response['warnings'][] = "Format not supported";
                                            $data_response['hasWarnings'] = true;
                                        }
                                    }
                                }
                                else
                                {

                                    $data_response['Missing'] = 'stock # or certificate # missing.';
                                }
                            }
                        }
                        else
                        {
                            $data_response['expire'] = "true";
                        }
                    }
                    catch(\Throwable $th){
                        $data_response['error'] = 'File Has Some error For Uploading';
                    }
                }
                else
                {
                    $data_response['File_Exception'] = 'File not found or file extension not allowed for '.$supplier->companyname.'.';
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        }

    }

    public function supplierStockRefresh(Request $request)
    {
        $data_response = array();
        $sup_id = $request->id;

        $company_detail = Supplier::select('sup_id', 'companyname', 'supplier_name', 'markup', 'upload_mode', 'diamond_type', 'folder_name', 'stock_status', 'is_active',
        DB::raw('(SELECT `created_at` FROM `stock_upload_report` WHERE `supplier_id` = suppliers.sup_id ORDER BY `created_at` DESC LIMIT 1) as stock_created_date'))
        ->join('users', 'users.id', '=', 'suppliers.sup_id')
        ->where('ftp_host', '!=', '')
        ->where('ftp_username', '!=', '')
        ->where('ftp_password', '!=', '')
        ->where('ftp_password', '!=', '')
        ->where('upload_mode', 'FTP')
        ->where('stock_status', 'ACTIVE')
        ->where('sup_id', $sup_id)
        ->where('is_active', 1)->get();

        $ext_array = array('xls','xlsx','csv');

        if (count($company_detail) > 0) {
            echo "<pre>";

            foreach ($company_detail as $supplier) {
                echo "<hr>";

                $todate = date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                // echo "<pre>";
                $data_response = array();
                $file_path = '';
                if(!empty($supplier->folder_name))
                {
                    $Folder_Path = '../supplier_files/' . $supplier->folder_name . '/';

                    $filesInFolder = \File::allFiles($Folder_Path);

                    $fileNameArray = [];
                    foreach ($filesInFolder as $file){
                        $fileNameArray[] = $file->getFilename();
                    }

                    $File_Name = !empty($fileNameArray)? $fileNameArray[0]:'';
                    $ext = \File::extension($File_Name);
                    $file_path = !in_array(strtolower($ext), $ext_array) ? NULL : $Folder_Path.$File_Name;
                }

                if (file_exists($file_path)) {
                    $file_update_date = filemtime($file_path);

                    $data_response['name'] = $supplier->companyname;
                    $data_response['time'] = time() - $file_update_date;
                    $data_response['file_path'] = $file_path;
                    $data_response['file_data'] = date('Y-m-d H:i:s', $file_update_date);
                    // File uploaded date before 72 hours
                    if (time() - $file_update_date < (72 * 3600)) {
                        $data_response['last_refresh'] = !empty($supplier->stock_created_date) ? $supplier->stock_created_date : date('Y-m-d', strtotime('-7 days'));
                        $data_response['diff'] = time() - strtotime($data_response['last_refresh']) . ' > ' . (3 * 3600);
                        $data_response['filest'] = 'Execute';

                        // $inputFileType = \PhpOffice\PhpSpreadsheet\IOFactory::identify($file_path);
                        // $reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader($inputFileType);
                        // if($inputFileType == "Csv")
                        // {
                        //     $reader->setDelimiter(',')->setEnclosure('"');
                        // }
                        // $sheet_data = $reader->load($file_path)->getActiveSheet()->toArray();
                        if($ext == "xlsx")
                        {
                            $sheet = Excel::toArray(new UsersImport(), $file_path, null,\Maatwebsite\Excel\Excel::XLSX);
                        }
                        else
                        {
                            $sheet = Excel::toArray(new UsersImport(), $file_path);
                        }
                        $sheet_data = $sheet[0];


                        // $SheetError = array_search('stock #', $sheet_data[0])===false?'stock id missing, <br/> ':null;
                        // $SheetError .= array_search('shape', $sheet_data[0])===false?'shape missing, <br/>':null;
                        // $SheetError .= array_search('weight', $sheet_data[0])===false?'carat missing, <br/>':null;
                        // $SheetError .= array_search('color', $sheet_data[0])===false?'color missing, <br/>':null;
                        // $SheetError .= array_search('clarity', $sheet_data[0])===false?'clarity missing, <br/>':null;
                        // $SheetError .= array_search('certificate #', $sheet_data[0])===false?'certificate No missing, <br/>':null;
                        // $SheetError .= array_search('$/ct', $sheet_data[0])===false?'$/ct missing, <br/>':null;

                        // // if(empty($SheetError))
                        // // {
                        //     $stock_array = array_column($sheet_data, array_search('stock #', $sheet_data[0]));
                        //     array_shift($stock_array);
                        //     $st = array_diff_assoc($stock_array, array_unique($stock_array));
                        // // }

                        if ($supplier->diamond_type == 'Natural') {
                            $sheet_data[0] = AppHelper::ChangeExcelTitleNatural($sheet_data[0]);
                        }
                        else
                        {
                            $sheet_data[0] = AppHelper::ChangeExcelTitleLabGrown($sheet_data[0]);
                        }


                        if(in_array('stock #',$sheet_data[0]) && in_array('certificate #',$sheet_data[0]))
                        {
                            $stock_array = array_column($sheet_data, array_search('stock #', $sheet_data[0]));
                            array_shift($stock_array);
                            $st = array_diff_assoc($stock_array, array_unique($stock_array));

                            $shiping_price_array = array();
                            $shiping_price = DB::table('shipping_price')->select('*')->get();
                            $shiping_price_array = AppHelper::shipingPriceArray();
                            $s_price_array = AppHelper::sPriceArray($supplier);

                            DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                            if ($supplier->diamond_type == 'Natural') {
                                if(empty($SheetError))
                                {
                                    $certificate_array = array_column($sheet_data, array_search('certificate #', $sheet_data[0]));
                                    array_shift($certificate_array);
                                    $d = array_diff_assoc($certificate_array, array_unique($certificate_array));
                                }
                                // else
                                // {
                                //     print_r($SheetError);
                                // }

                                $updatedelete = 1;
                                DiamondInvalid::where('supplier_id', $supplier->sup_id)->delete();
                                DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                                DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                                if ($supplier->stock_status == 'ACTIVE') {
                                } else {
                                    DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                                }

                                $flag = false;
                                $i = 1;
                                $index = 0;
                                $invalid = 0;
                                $j = 0;
                                $file_update_date = date("Y-m-d H:i:s", filemtime($file_path));

                                if ($updatedelete) {
                                    $updatestring = '';
                                    foreach ($sheet_data as $value) {
                                        $keyvaluepair = array_combine($sheet_data[0], $value);

                                        if ($i == 1 && str_replace(' ', '', @$keyvaluepair['stock #']) == "stock#" && trim(@$keyvaluepair['shape']) == 'shape' && trim(@$keyvaluepair['weight']) == 'weight' && trim(@$keyvaluepair['clarity']) == 'clarity' && trim(@$keyvaluepair['color']) == 'color' && str_replace(" ", "", @$keyvaluepair['certificate #']) == "certificate#" && strtoupper(trim(@$keyvaluepair['$/ct'])) == '$/CT') {
                                            $flag = true;
                                        }

                                        if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {

                                            if (@$keyvaluepair['measurements'] != "") {
                                                $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                                $main = explode("x", $mesurment);
                                                $C_Length = (!empty($main[0])) ? $main[0] : '';
                                                $C_Width = (!empty($main[1])) ? $main[1] : '';
                                                $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                            }

                                            if (empty(trim(@$keyvaluepair['certificate #']))) {
                                                $respo['success'] = false;
                                                $respo['reason'] = 'Certificate Blank';
                                            } elseif (in_array(@$keyvaluepair['certificate #'], $d)) {
                                                $respo['success'] = false;
                                                $respo['reason'] = 'Certificate Duplicate';
                                            } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                                $respo['success'] = false;
                                                $respo['reason'] = 'Stock ID Blank';
                                            } elseif (in_array(@$keyvaluepair['stock #'], $st)) {
                                                $respo['success'] = false;
                                                $respo['reason'] = 'Stock ID Duplicate';
                                            } else {
                                                $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                                if ($shape == '') {
                                                    $respo['success'] = false;
                                                    $respo['reason'] = 'Shape';
                                                } else {
                                                    $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                                }
                                            }

                                            $file_update_date = date("Y-m-d H:i:s", filemtime($file_path));
                                            if ($respo['success']) {
                                                $cut = '';
                                                $Crn_Ht =  $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                                if ($shape == "ROUND") {
                                                    $C_shape = "round";
                                                    $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                                    $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                                    $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                                    $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                                    $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                                } else {
                                                    $C_shape = "pear";
                                                }

                                                if (strtolower(@$keyvaluepair['color']) == 'fancy' || @$keyvaluepair['color'] == '*' || @$keyvaluepair['color'] == '') {
                                                    $color = 'fancy';
                                                    $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                                    $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                                    $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                                    $cut = '';
                                                    $Crn_Ht =  $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                                } else {
                                                    $f_color = $f_intensity = $f_overtone = '';
                                                    $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                                }

                                                $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                                $polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                                $symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                                $fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                                $certi = trim(@$keyvaluepair['certificate #']);
                                                $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                                $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                                $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                                if(empty($eyeclean))
                                                {
                                                    $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                                    switch($clarityToeyeclean)
                                                    {
                                                        case 'fl':
                                                        case 'if':
                                                        case 'vvs1':
                                                        case 'vvs2':
                                                        case 'vs1':
                                                            $eyeclean = "Yes";
                                                            break;
                                                    }
                                                }

                                                $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                                $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                                $arrow = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                                $asset = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                                $video = !empty(@$keyvaluepair['video link']) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                                $milky = '';
                                                $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                                if(empty($milky))
                                                {
                                                    if(isset($keyvaluepair['luster']))
                                                    {
                                                        $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                        switch($lusterToMilky)
                                                        {
                                                            case 'excellent':
                                                            case 'ex':
                                                            case 'verygood':
                                                            case 'vg+':
                                                                $milky = 'NO MILKY';
                                                                break;
                                                            case 'lightmilky':
                                                                $milky = 'LIGHT MILKY ';
                                                                break;
                                                            case 'milky':
                                                                $milky = 'MILKY';
                                                                break;
                                                        }
                                                    }
                                                }

                                                $carat = bcdiv(@$keyvaluepair['weight'], 1, 2);
                                                $add_dic = 0;
                                                if (!empty($s_price_array)) {
                                                    $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                                }

                                                $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                                $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                                $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                                $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                                $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                                $net_price = round($carat * $newdollerpercarat, 2);

                                                $C_Length = $C_Width = $C_Depth = '0';
                                                if (@$keyvaluepair['measurements'] != '') {
                                                    $mesurment = str_replace(array('*', '-', 'X', 'x'), 'x', strtolower(@$keyvaluepair['measurements']));
                                                    $main = explode('x', $mesurment);
                                                    $C_Length = (!empty($main[0])) ? $main[0] : 0;
                                                    $C_Width = (!empty($main[1])) ? $main[1] : 0;
                                                    $C_Depth = (!empty($main[2])) ? $main[2] : 0;
                                                }
                                                else
                                                {
                                                    $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                                    $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                                    $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                                }

                                                @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                                @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                                $result = array(
                                                    'supplier_name' => $supplier->companyname,
                                                    'supplier_id' => $supplier->sup_id,
                                                    'ref_no' => @$keyvaluepair['stock #'],
                                                    'shape' => $shape,
                                                    'carat' => $carat,
                                                    'color' => $color,
                                                    'clarity' => strtoupper($clarity),
                                                    'cut' => $cut,
                                                    'polish' => $polish,
                                                    'symmetry' => $symmetry,
                                                    'fluorescence' => $fluorescence,
                                                    'orignal_rate' => $dollerpercarat,
                                                    'rate' => $newdollerpercarat,
                                                    'net_dollar' => $net_price,
                                                    'table_per' => @$keyvaluepair['table percent'],
                                                    'depth_per' => @$keyvaluepair['depth percent'],
                                                    'lab' => $lab,
                                                    'fancy_color' => $f_color,
                                                    'fancy_intensity' => $f_intensity,
                                                    'fancy_overtone' => $f_overtone,
                                                    'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                                    'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                                    'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                                    'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                                    'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                                    'crown_angle' => $Crn_Ag,
                                                    'crown_height' => $Crn_Ht,
                                                    'pavilion_angle' => $Pav_Ag,
                                                    'pavilion_depth' => $Pav_Dp,
                                                    'certificate_no' => $certi,
                                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                                    'country' => $country,
                                                    'city' => @$keyvaluepair['city'],
                                                    'length' => $C_Length,
                                                    'width' => $C_Width,
                                                    'depth' => $C_Depth,
                                                    'milky' => $milky,
                                                    'eyeclean' => $eyeclean,
                                                    'image' => $image,
                                                    'video' => $video,
                                                    'heart' => $heart,
                                                    'arrow' => $arrow,
                                                    'asset' => $asset,
                                                    'diamond_type' => 'W',
                                                    'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                                    'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                                    'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                                    'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                                    'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                                    'is_delete' => '0',
                                                );

                                                $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                                $index++;
                                            } else {
                                                if (@$keyvaluepair['girdle %'] != '') {
                                                    $gridle_per = @$keyvaluepair['girdle %'];
                                                } else {
                                                    $gridle_per = '0';
                                                }

                                                $C_Length = $C_Width = $C_Depth = '0';
                                                if (@$keyvaluepair['measurements'] != '') {
                                                    $mesurment = str_replace(array('*', '-', 'X', 'x'), 'x', strtolower(@$keyvaluepair['measurements']));
                                                    $main = explode('x', $mesurment);
                                                    $C_Length = (!empty($main[0])) ? $main[0] : 0;
                                                    $C_Width = (!empty($main[1])) ? $main[1] : 0;
                                                    $C_Depth = (!empty($main[2])) ? $main[2] : 0;
                                                }
                                                else
                                                {
                                                    $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                                    $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                                    $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                                }

                                                $result = array(
                                                    'supplier_name' => $supplier->companyname,
                                                    'supplier_id' => $supplier->sup_id,
                                                    'ref_no' => @$keyvaluepair['stock #'],
                                                    'shape' => @$keyvaluepair['shape'],
                                                    'carat' => @$keyvaluepair['weight'],
                                                    'color' => @$keyvaluepair['color'],
                                                    'clarity' => @$keyvaluepair['clarity'],
                                                    'cut' => @$keyvaluepair['cut grade'],
                                                    'polish' => @$keyvaluepair['polish'],
                                                    'symmetry' => @$keyvaluepair['symmetry'],
                                                    'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                                    'length' => $C_Length,
                                                    'width' => $C_Width,
                                                    'depth' => $C_Depth,
                                                    'lab' => @$keyvaluepair['lab'],
                                                    'certificate_no' => @$keyvaluepair['certificate #'],
                                                    'cert_comment' => @$keyvaluepair['report comments'],
                                                    'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                                    'fancy_color' => @$keyvaluepair['fancy color'],
                                                    'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                                    'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                                    'depth_per' => @$keyvaluepair['depth percent'],
                                                    'table_per' => @$keyvaluepair['table percent'],
                                                    'girdle_thin' => @$keyvaluepair['girdle thin'],
                                                    'girdle_thick' => @$keyvaluepair['girdle thick'],
                                                    'gridle' => @$keyvaluepair['girdle condition'],
                                                    'cutlet' => @$keyvaluepair['culet'],
                                                    'gridle_per' => @$keyvaluepair['girdle percent'],
                                                    'crown_height' => @$keyvaluepair['crown height'],
                                                    'crown_angle' => @$keyvaluepair['crown angle'],
                                                    'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                                    'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                                    'country' => @$keyvaluepair['country'],
                                                    'city' => @$keyvaluepair['city'],
                                                    'image' => @$keyvaluepair['image link'],
                                                    'video' => trim(@$keyvaluepair['video link']),
                                                    'heart' => @$keyvaluepair['heart image'],
                                                    'arrow' => @$keyvaluepair['arrow image'],
                                                    'asset' => @$keyvaluepair['aset image'],
                                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                                    'milky' => @$keyvaluepair['milky'],
                                                    'eyeclean' => @$keyvaluepair['eye clean'],
                                                    'availability' => @$keyvaluepair['availability'],
                                                    'shade' => @$keyvaluepair['shade'],
                                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                                    'luster' => @$keyvaluepair['luster'],
                                                    'culet_condition' => @$keyvaluepair['culet condition'],
                                                );
                                                $result['reason'] = $respo['reason'];
                                                DiamondInvalid::insert($result);
                                                $invalid++;
                                            }
                                            $j++;
                                        }
                                        $i++;
                                    }
                                }

                                if ($flag) {
                                    $stock_upload_report = array(
                                        'supplier_id' => $supplier->sup_id,
                                        'no_of_stone' => $j,
                                        'valid_diamond' => $index,
                                        'invalid_diamond' => $invalid,
                                        'upload_mode' => 'FTP',
                                        'info' => $File_Name,
                                        'created_at' => date('Y-m-d H:i:s'),
                                        'file_updated_at' => $file_update_date,
                                    );
                                    $load_id = StockUploadReport::insertGetId($stock_upload_report);

                                    // $this->db->where('load_id', 0);
                                    // $this->db->where('supp_id', $supplier->id);
                                    // $this->db->update('diamond_master_stg', array('load_id' => $load_id));

                                    $data_response['message'] = $index . ' diamond uploaded';
                                    $data_response['files'][0]['name'] = $index . ' diamond uploaded  ' . $invalid . ' Invalid Diamond';
                                    $data_response['isSuccess'] = true;
                                    $data_response['flag'] = $flag;
                                } else {
                                    $data_response['flag'] = $flag;
                                    $data_response['warnings'][] = 'Format not supported';
                                    $data_response['hasWarnings'] = true;
                                }
                            } else {
                                // Lab Grown Diamond  //---------------------------------------------------------------------------------------------------------------------------------/
                                // Lab Grown Diamond  //---------------------------------------------------------------------------------------------------------------------------------/
                                // Lab Grown Diamond  //---------------------------------------------------------------------------------------------------------------------------------/

                                if(empty($SheetError))
                                {
                                    $certificate_array = array_column($sheet_data, array_search("certificate #", $sheet_data[0]));
                                    array_shift($certificate_array);
                                    $d = array_diff_assoc($certificate_array, array_unique($certificate_array));
                                }

                                $updatedelete = 1;
                                DiamondInvalid::where('supplier_id', $supplier->sup_id)->delete();
                                DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                                DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                                if ($supplier->stock_status == 'ACTIVE') {
                                } else {
                                    DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                                }

                                $flag = false;
                                $i = 1;
                                $index = 0;
                                $invalid = 0;
                                $j = 0;
                                $file_update_date = date("Y-m-d H:i:s", filemtime($file_path));

                                if ($updatedelete) {
                                    $updatestring = '';
                                    foreach ($sheet_data as $value) {
                                        $keyvaluepair = array_combine($sheet_data[0], $value);
                                        if ($i == 1 && str_replace(' ', '', @$keyvaluepair['stock #']) == "stock#" && trim(@$keyvaluepair['shape']) == 'shape' && trim(@$keyvaluepair['weight']) == 'weight' && trim(@$keyvaluepair['clarity']) == 'clarity' && trim(@$keyvaluepair['color']) == 'color' && str_replace(" ", "", @$keyvaluepair['certificate #']) == "certificate#" && strtoupper(trim(@$keyvaluepair['$/ct'])) == '$/CT') {
                                            $flag = true;
                                        }

                                        if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {

                                            if (empty(trim(@$keyvaluepair['certificate #']))) {
                                                $respo['success'] = false;
                                                $respo['reason'] = "Certificate Blank";
                                            } elseif (in_array(@$keyvaluepair['certificate #'], $d)) {
                                                $respo['success'] = false;
                                                $respo['reason'] = "Certificate Duplicate";
                                            } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                                $respo['success'] = false;
                                                $respo['reason'] = "Stock ID Blank";
                                            } elseif (in_array(@$keyvaluepair['stock #'], $st)) {
                                                $respo['success'] = false;
                                                $respo['reason'] = "Stock ID Duplicate";
                                            } else {
                                                $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                                if ($shape == "") {
                                                    $respo['success'] = false;
                                                    $respo['reason'] = "Shape";
                                                } else {
                                                    $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                                }
                                            }

                                            if ($respo['success']) {
                                                $cut = '';
                                                $Crn_Ht =  $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                                if ($shape == 'ROUND') {
                                                    $C_shape = 'round';
                                                    $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                                    $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                                    $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                                    $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                                    $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                                } else {
                                                    $C_shape = 'pear';
                                                }

                                                if (strtolower(@$keyvaluepair['color']) == 'fancy' || @$keyvaluepair['color'] == '*' || @$keyvaluepair['color'] == '') {
                                                    $color = 'fancy';
                                                    $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                                    $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                                    $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                                    $cut = '';
                                                    $Crn_Ht =  $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                                } else {
                                                    $f_color = $f_intensity = $f_overtone = '';
                                                    $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                                }
                                                $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                                $polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                                $symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                                $fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                                $certi = trim(@$keyvaluepair['certificate #']);
                                                $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                                $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                                $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                                if(empty($eyeclean))
                                                {
                                                    $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                                    switch($clarityToeyeclean)
                                                    {
                                                        case 'fl':
                                                        case 'if':
                                                        case 'vvs1':
                                                        case 'vvs2':
                                                        case 'vs1':
                                                            $eyeclean = "Yes";
                                                            break;
                                                    }
                                                }

                                                $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                                $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                                $arrow = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                                $asset = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                                $video = !empty(@$keyvaluepair['video link']) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                                $milky = '';
                                                $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';
                                                if(empty($milky))
                                                {
                                                    if(isset($keyvaluepair['luster']))
                                                    {
                                                        $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                        switch($lusterToMilky)
                                                        {
                                                            case 'excellent':
                                                            case 'ex':
                                                            case 'verygood':
                                                            case 'vg+':
                                                                $milky = 'NO MILKY';
                                                                break;
                                                            case 'lightmilky':
                                                                $milky = 'LIGHT MILKY ';
                                                                break;
                                                            case 'milky':
                                                                $milky = 'MILKY';
                                                                break;
                                                        }
                                                    }
                                                }

                                                $carat = sprintf('%.2f', @$keyvaluepair['weight']); //empty(bcdiv(@$keyvaluepair['Weight'], 1, 2)) ? @$keyvaluepair['Weight'] :
                                                $add_dic = 0;
                                                if (!empty($s_price_array)) {
                                                    $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                                }

                                                $dollerpercarat = str_replace(array('$', ','), '', @$keyvaluepair['$/ct']);
                                                $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                                $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                                $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                                $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                                $net_price = round($carat * $newdollerpercarat, 2);

                                                // if (@$keyvaluepair['measurements'] != "") {
                                                //     $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                                //     $main = explode("x", $mesurment);
                                                //     $C_Length = (!empty($main[0])) ? $main[0] : '';
                                                //     $C_Width = (!empty($main[1])) ? $main[1] : '';
                                                //     $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                                // }

                                                $C_Length = $C_Width = $C_Depth = '0';
                                                if (@$keyvaluepair['measurements'] != '') {
                                                    $mesurment = str_replace(array('*', '-', 'X', 'x'), 'x', strtolower(@$keyvaluepair['measurements']));
                                                    $main = explode('x', $mesurment);
                                                    $C_Length = (!empty($main[0])) ? $main[0] : '';
                                                    $C_Width = (!empty($main[1])) ? $main[1] : '';
                                                    $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                                }
                                                else
                                                {
                                                    $C_Length = !empty($keyvaluepair['length']) ? $keyvaluepair['length'] : '0';
                                                    $C_Width = !empty($keyvaluepair['width']) ? $keyvaluepair['width'] : '0';
                                                    $C_Depth = !empty($keyvaluepair['height']) ? $keyvaluepair['height'] : '0';
                                                }

                                                @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                                @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                                $result = array(
                                                    'supplier_name' => $supplier->companyname,
                                                    'supplier_id' => $supplier->sup_id,
                                                    'ref_no' => @$keyvaluepair['stock #'],
                                                    'shape' => $shape,
                                                    'carat' => $carat,
                                                    'color' => $color,
                                                    'clarity' => strtoupper($clarity),
                                                    'cut' => $cut,
                                                    'polish' => $polish,
                                                    'symmetry' => $symmetry,
                                                    'fluorescence' => $fluorescence,
                                                    'orignal_rate' => $dollerpercarat,
                                                    'rate' => $newdollerpercarat,
                                                    'net_dollar' => $net_price,
                                                    'table_per' => @$keyvaluepair['table percent'],
                                                    'depth_per' => @$keyvaluepair['depth percent'],
                                                    'lab' => $lab,
                                                    'fancy_color' => $f_color,
                                                    'fancy_intensity' => $f_intensity,
                                                    'fancy_overtone' => $f_overtone,
                                                    'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                                    'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                                    'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                                    'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                                    'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                                    'crown_angle' => $Crn_Ag,
                                                    'crown_height' => $Crn_Ht,
                                                    'pavilion_angle' => $Pav_Ag,
                                                    'pavilion_depth' => $Pav_Dp,
                                                    'certificate_no' => $certi,
                                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                                    'country' => $country,
                                                    'city' => @$keyvaluepair['city'],
                                                    'length' => $C_Length,
                                                    'width' => $C_Width,
                                                    'depth' => $C_Depth,
                                                    'milky' => $milky,
                                                    'eyeclean' => $eyeclean,
                                                    'image' => $image,
                                                    'video' => $video,
                                                    'heart' => $heart,
                                                    'arrow' => $arrow,
                                                    'asset' => $asset,
                                                    'diamond_type' => 'L',
                                                    'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                                    'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                                    'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                                    'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                                    'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                                    'is_delete' => '0',
                                                );

                                                $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                                $index++;
                                            } else {
                                                $C_Length = $C_Width = $C_Depth = '0';
                                                if (@$keyvaluepair['measurements'] != "") {
                                                    $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                                    $main = explode("x", $mesurment);
                                                    $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                                    $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                                    $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                                }
                                                else
                                                {
                                                    $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                                    $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                                    $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                                }
                                                $result = array(
                                                    'supplier_name' => $supplier->companyname,
                                                    'supplier_id' => $supplier->sup_id,
                                                    'ref_no' => @$keyvaluepair['stock #'],
                                                    'shape' => @$keyvaluepair['shape'],
                                                    'carat' => @$keyvaluepair['weight'],
                                                    'color' => @$keyvaluepair['color'],
                                                    'clarity' => @$keyvaluepair['clarity'],
                                                    'cut' => @$keyvaluepair['cut grade'],
                                                    'polish' => @$keyvaluepair['polish'],
                                                    'symmetry' => @$keyvaluepair['symmetry'],
                                                    'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                                    'length' => $C_Length,
                                                    'width' => $C_Width,
                                                    'depth' => $C_Depth,
                                                    'lab' => @$keyvaluepair['lab'],
                                                    'certificate_no' => @$keyvaluepair['certificate #'],
                                                    'cert_comment' => @$keyvaluepair['report comments'],
                                                    'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                                    'fancy_color' => @$keyvaluepair['fancy color'],
                                                    'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                                    'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                                    'depth_per' => @$keyvaluepair['depth percent'],
                                                    'table_per' => @$keyvaluepair['table percent'],
                                                    'girdle_thin' => @$keyvaluepair['girdle thin'],
                                                    'girdle_thick' => @$keyvaluepair['girdle thick'],
                                                    'gridle' => @$keyvaluepair['girdle condition'],
                                                    'cutlet' => @$keyvaluepair['culet'],
                                                    'gridle_per' => @$keyvaluepair['girdle percent'],
                                                    'crown_height' => @$keyvaluepair['crown height'],
                                                    'crown_angle' => @$keyvaluepair['crown angle'],
                                                    'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                                    'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                                    'country' => @$keyvaluepair['country'],
                                                    'city' => @$keyvaluepair['city'],
                                                    'image' => @$keyvaluepair['image link'],
                                                    'video' => trim(@$keyvaluepair['video link']),
                                                    'heart' => @$keyvaluepair['heart image'],
                                                    'arrow' => @$keyvaluepair['arrow image'],
                                                    'asset' => @$keyvaluepair['aset image'],
                                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                                    'milky' => @$keyvaluepair['milky'],
                                                    'eyeclean' => @$keyvaluepair['eye clean'],
                                                    'availability' => @$keyvaluepair['availability'],
                                                    'shade' => @$keyvaluepair['shade'],
                                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                                    'luster' => @$keyvaluepair['luster'],
                                                    'culet_condition' => @$keyvaluepair['culet condition'],
                                                );
                                                $result['reason'] = $respo['reason'];
                                                DiamondInvalid::insert($result);
                                                $invalid++;
                                            }
                                            $j++;
                                        }
                                        $i++;
                                    }
                                }
                                if ($flag) {
                                    $stock_upload_report = array(
                                        'supplier_id' => $supplier->sup_id,
                                        'no_of_stone' => $j,
                                        'valid_diamond' => $index,
                                        'invalid_diamond' => $invalid,
                                        'upload_mode' => 'FTP',
                                        'info' => $File_Name,
                                        'created_at' => date('Y-m-d H:i:s'),
                                        'file_updated_at' => $file_update_date,
                                    );
                                    $load_id = StockUploadReport::insertGetId($stock_upload_report);

                                    $data_response['message'] = $index . " Lab diamond uploaded";
                                    $data_response['files'][0]['name'] = $index . "  Lab diamond uploaded  " . $invalid . " Invalid Diamond";
                                    $data_response['isSuccess'] = true;
                                    $data_response['flag'] = $flag;
                                } else {
                                    $data_response['flag'] = $flag;
                                    $data_response['warnings'][] = "Format not supported";
                                    $data_response['hasWarnings'] = true;
                                }
                            }
                        }
                        else
                        {
                            $data_response['Missing'] = 'stock # or certificate # missing.';
                        }
                    }
                    else
                    {
                        $data_response['expire'] = "true";
                    }
                }
                else
                {
                    $data_response['File_Exception'] = 'File not found or file extension not allowed for '.$supplier->companyname.'.';
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        }
        else
        {
            echo "May be file";
        }

    }

    public function insert_update_diamond($result, $supplier, $certi, $dollerpercarat)
    {
        $created_date = date('Y-m-d H:i:s');
        if ($supplier->stock_status == 'ACTIVE') {
            $checkvalue = DiamondNatural::where('certificate_no', $certi)->get();
            if ($checkvalue->count() > 0) {
                $diamond_data = $checkvalue->first();
                if ($diamond_data->location == 1 && $diamond_data->status == 0) {
                    if ($diamond_data->supplier_id == $supplier->sup_id) {
                        DiamondNatural::where('supplier_id', $supplier->sup_id)->where('certificate_no', $certi)->update($result);
                    } else {

                        if($diamond_data->is_delete == 1)
                        {
                            DiamondNatural::where('certificate_no', $certi)->delete();
                            DiamondNatural::insert($result);
                        }
                        else
                        {
                            if($diamond_data->orignal_rate > $dollerpercarat)
                            {
                                $another_table_add = DB::insert("INSERT IGNORE INTO `diamond_conflict` (`supplier_id`, `supplier_name`, `new_supplier_name`, `ref_no`, `availability`, `diamond_type`, `shape`, `carat`, `color`, `clarity`, `cut`, `polish`, `symmetry`, `fluorescence`, `lab`, `certificate_no`, `certificate_link`, `certificate_download`, `length`, `width`, `depth`, `location`, `city`, `country`, `milky`, `eyeclean`, `hna`, `depth_per`, `table_per`, `crown_angle`, `crown_height`, `pavilion_angle`, `pavilion_depth`, `discount`, `rap`, `orignal_rate`, `rate`, `net_dollar`, `key_symbols`, `fancy_color`, `fancy_intensity`, `fancy_overtone`, `image_status`, `cloud_image`, `image`, `video`, `heart`, `cloud_heart`, `arrow`, `cloud_arrow`, `asset`, `cloud_asset`, `canada_mark`, `cutlet`, `luster`, `gridle`, `gridle_per`, `girdle_thin`, `girdle_thick`, `shade`, `c_type`, `status`, `supplier_comments`, `culet_condition`, `hold_for`, `updated_at`, `created_at`, `conflict_at`, `is_delete`)
                                                                SELECT `supplier_id`, `supplier_name`, '".$supplier->companyname."',`ref_no`, `availability`, `diamond_type`, `shape`, `carat`, `color`, `clarity`, `cut`, `polish`, `symmetry`, `fluorescence`, `lab`, `certificate_no`, `certificate_link`, `certificate_download`, `length`, `width`, `depth`, `location`, `city`, `country`, `milky`, `eyeclean`, `hna`, `depth_per`, `table_per`, `crown_angle`, `crown_height`, `pavilion_angle`, `pavilion_depth`, `discount`, `rap`, `orignal_rate`, `rate`, `net_dollar`, `key_symbols`, `fancy_color`, `fancy_intensity`, `fancy_overtone`, `image_status`, `cloud_image`, `image`, `video`, `heart`, `cloud_heart`, `arrow`, `cloud_arrow`, `asset`, `cloud_asset`, `canada_mark`, `cutlet`, `luster`, `gridle`, `gridle_per`, `girdle_thin`, `girdle_thick`, `shade`, `c_type`, `status`, `supplier_comments`, `culet_condition`, `hold_for`, `updated_at`, `created_at`, '".$created_date."',`is_delete`
                                    FROM diamond_natural WHERE certificate_no = '".$certi."' limit 1");

                                if ($another_table_add) {
                                    DiamondNatural::where('certificate_no', $certi)->delete();
                                    DiamondNatural::insert($result);
                                }
                            }
                            else
                            {
                                // $result['id'] = $diamond_data->id;
                                $result['conflict_at'] = $created_date;
                                $result['diamond_type'] = 'W';
                                DiamondConflict::insert($result);
                            }
                        }
                    }
                }
                else
                {
                    if ($diamond_data->supplier_name != $supplier->companyname) {
                        $result['conflict_at'] = $created_date;
                        $result['diamond_type'] = 'W';
                        DiamondConflict::insert($result);
                    }
                    else
                    {
                        DiamondNatural::where('supplier_id', $supplier->sup_id)->where('certificate_no', $certi)->update(['updated_at' => date('Y-m-d H:i:s')]);
                    }
                }
            } else {
                DiamondNatural::insert($result);
            }
        } else {
            DiamondUnapprove::insert($result);
        }

    }

    public function insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat)
    {
        $created_date = date('Y-m-d H:i:s');
        if ($supplier->stock_status == 'ACTIVE') {
            $checkvalue = DiamondLabgrown::where('certificate_no', $certi)->get();
            if ($checkvalue->count() > 0) {
                $diamond_data = $checkvalue->first();
                if ($diamond_data->location == 1 && $diamond_data->status == 0) {
                    if ($diamond_data->supplier_id == $supplier->sup_id) {
                        DiamondLabgrown::where('supplier_id', $supplier->sup_id)->where('certificate_no', $certi)->update($result);
                    } else {

                        if($diamond_data->is_delete == 1)
                        {
                            DiamondLabgrown::where('certificate_no', $certi)->delete();
                            DiamondLabgrown::insert($result);
                        }
                        else
                        {
                            if($diamond_data->orignal_rate > $dollerpercarat)
                            {
                                $another_table_add = DB::insert("INSERT IGNORE INTO `diamond_conflict` (`supplier_id`, `supplier_name`, `new_supplier_name`, `ref_no`, `availability`, `diamond_type`, `shape`, `carat`, `color`, `clarity`, `cut`, `polish`, `symmetry`, `fluorescence`, `lab`, `certificate_no`, `certificate_link`, `certificate_download`, `length`, `width`, `depth`, `location`, `city`, `country`, `milky`, `eyeclean`, `hna`, `depth_per`, `table_per`, `crown_angle`, `crown_height`, `pavilion_angle`, `pavilion_depth`, `discount`, `rap`, `orignal_rate`, `rate`, `net_dollar`, `key_symbols`, `fancy_color`, `fancy_intensity`, `fancy_overtone`, `image_status`, `cloud_image`, `image`, `video`, `heart`, `cloud_heart`, `arrow`, `cloud_arrow`, `asset`, `cloud_asset`, `canada_mark`, `cutlet`, `luster`, `gridle`, `gridle_per`, `girdle_thin`, `girdle_thick`, `shade`, `c_type`, `status`, `supplier_comments`, `culet_condition`, `hold_for`, `updated_at`, `created_at`, `conflict_at`, `is_delete`)
                                                                SELECT `supplier_id`, `supplier_name`, '".$supplier->companyname."',`ref_no`, `availability`, `diamond_type`, `shape`, `carat`, `color`, `clarity`, `cut`, `polish`, `symmetry`, `fluorescence`, `lab`, `certificate_no`, `certificate_link`, `certificate_download`, `length`, `width`, `depth`, `location`, `city`, `country`, `milky`, `eyeclean`, `hna`, `depth_per`, `table_per`, `crown_angle`, `crown_height`, `pavilion_angle`, `pavilion_depth`, `discount`, `rap`, `orignal_rate`, `rate`, `net_dollar`, `key_symbols`, `fancy_color`, `fancy_intensity`, `fancy_overtone`, `image_status`, `cloud_image`, `image`, `video`, `heart`, `cloud_heart`, `arrow`, `cloud_arrow`, `asset`, `cloud_asset`, `canada_mark`, `cutlet`, `luster`, `gridle`, `gridle_per`, `girdle_thin`, `girdle_thick`, `shade`, `c_type`, `status`, `supplier_comments`, `culet_condition`, `hold_for`, `updated_at`, `created_at`, '".$created_date."',`is_delete`
                                    FROM diamond_labgrown WHERE certificate_no = '".$certi."' limit 1");

                                if ($another_table_add) {
                                    DiamondLabgrown::where('certificate_no', $certi)->delete();
                                    DiamondLabgrown::insert($result);
                                }
                            }
                            else
                            {
                                // $result['id'] = $diamond_data->id;
                                $result['conflict_at'] = $created_date;
                                $result['diamond_type'] = 'L';
                                DiamondConflict::insert($result);
                            }
                        }
                    }
                }
                else
                {
                    if ($diamond_data->supplier_name != $supplier->companyname) {
                        $result['conflict_at'] = $created_date;
                        $result['diamond_type'] = 'L';
                        DiamondConflict::insert($result);
                    }
                    else
                    {
                        DiamondLabgrown::where('supplier_id', $supplier->sup_id)->where('certificate_no', $certi)->update(['updated_at' => date('Y-m-d H:i:s')]);
                    }
                }
            } else {
                DiamondLabgrown::insert($result);
            }
        } else {
            DiamondUnapprove::insert($result);
        }
    }

    function shippingPrice($shiping_price_array, $newdollerpercarat) {
		foreach ($shiping_price_array as $key => $value) {
			if ($key <= $newdollerpercarat && key($value) >= $newdollerpercarat) {
				return reset($value);
			}
		}
	}

    function findAdditionalValue($s_price_array, $CARAT)
    {
        foreach ($s_price_array as $key => $value) {
            if ($key <= $CARAT && key($value) >= $CARAT) {
                return reset($value);
            }
        }
    }

    public function brahma_diamonds()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 202)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                ## Call api for get data
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => "http://gi.peacocktech.in/GodhaniImpex.asmx/GetStock?token=PEACO-CKTEC-H2021-99PDP",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 300,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "GET",
                    CURLOPT_HTTPHEADER => array(
                        "cache-control: no-cache",
                    ),
                ));
                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error 1#:" . $err;
                    die;
                }

                $newresponse = json_decode($response, true); ## Create array from response
                $sheet_data = $newresponse['Result']; ## Create variable $sheet_data from response of result
                if($newresponse['Success'] != 0)
                {
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    if(!empty($sheet_data))
                    {
                        ## Change title
                        if ($supplier->diamond_type == 'Natural') {
                            $sheet_data_title = AppHelper::ChangeTitleNatural($sheet_data_title);
                        } else {
                            $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                        }

                        $shiping_price_array = AppHelper::shipingPriceArray();
                        $s_price_array = AppHelper::sPriceArray($supplier);

                        ###################################################
                        #################### Lab Grown ####################
                        ###################################################
                        $updatedelete = DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                        DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondLabgrown::where('supplier_id', $supplier->id)->update(['is_delete' => 1]);
                        DiamondUnapprove::where('supplier_id', $supplier->id)->update(['is_delete' => 1]);

                        if ($supplier->stock_status == 'ACTIVE') {
                        } else {
                            DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                        }

                        $flag = true;
                        $i = 1;
                        $valid = 0;
                        $invalid = 0;
                        $j = 0;

                        if ($flag) {
                            foreach ($sheet_data as $value) {
                                $keyvaluepair = array_combine($sheet_data_title, $value);

                                if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                    if (empty(trim(@$keyvaluepair['certificate #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Certificate Blank";
                                    } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Stock ID Blank";
                                    } else {
                                        $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                        if ($shape == "") {
                                            $respo['success'] = false;
                                            $respo['reason'] = "Shape";
                                        } else {
                                            $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                        }
                                    }

                                    if ($respo['success']) {
                                        $cut = '';
                                        $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                        if ($shape == "ROUND") {
                                            $C_shape = "round";
                                            $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                            $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                            $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                            $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                            $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                        } else {
                                            $C_shape = "pear";
                                        }

                                        if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                            $color = 'fancy';
                                            $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                            $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                            $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                            $cut = '';
                                        } else {
                                            $f_color = $f_intensity = $f_overtone = '';
                                            $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                        }

                                        $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }
                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'L',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );
                                        $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                        $valid++;
                                    } else {
                                        $C_Length = $C_Width = $C_Depth = '0';
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                        }

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => @$keyvaluepair['shape'],
                                            'carat' => @$keyvaluepair['weight'],
                                            'color' => @$keyvaluepair['color'],
                                            'clarity' => @$keyvaluepair['clarity'],
                                            'cut' => @$keyvaluepair['cut grade'],
                                            'polish' => @$keyvaluepair['polish'],
                                            'symmetry' => @$keyvaluepair['symmetry'],
                                            'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'lab' => @$keyvaluepair['lab'],
                                            'certificate_no' => @$keyvaluepair['certificate #'],
                                            'cert_comment' => @$keyvaluepair['report comments'],
                                            'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                            'fancy_color' => @$keyvaluepair['fancy color'],
                                            'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                            'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'girdle_thin' => @$keyvaluepair['girdle thin'],
                                            'girdle_thick' => @$keyvaluepair['girdle thick'],
                                            'gridle' => @$keyvaluepair['girdle condition'],
                                            'cutlet' => @$keyvaluepair['culet'],
                                            'gridle_per' => @$keyvaluepair['girdle percent'],
                                            'crown_height' => @$keyvaluepair['crown height'],
                                            'crown_angle' => @$keyvaluepair['crown angle'],
                                            'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                            'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                            'country' => @$keyvaluepair['country'],
                                            'city' => @$keyvaluepair['city'],
                                            'image' => @$keyvaluepair['image link'],
                                            'video' => trim(@$keyvaluepair['video link']),
                                            'heart' => @$keyvaluepair['heart image'],
                                            'arrow' => @$keyvaluepair['arrow image'],
                                            'asset' => @$keyvaluepair['aset image'],
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'milky' => @$keyvaluepair['milky'],
                                            'eyeclean' => @$keyvaluepair['eye clean'],
                                            'availability' => @$keyvaluepair['availability'],
                                            'shade' => @$keyvaluepair['shade'],
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => @$keyvaluepair['luster'],
                                            'culet_condition' => @$keyvaluepair['culet condition'],
                                        );
                                        $result['reason'] = $respo['reason'];
                                        DiamondInvalid::insert($result);
                                        $invalid++;
                                    }
                                    $j++;
                                }
                                $i++;
                            }
                        }
                        if ($flag) {
                            $stock_upload_report = array(
                                'supplier_id' => $supplier->sup_id,
                                'no_of_stone' => $j,
                                'valid_diamond' => $valid,
                                'invalid_diamond' => $invalid,
                                'upload_mode' => 'API',
                                'info' => '',
                                'created_at' => date('Y-m-d H:i:s'),
                                'file_updated_at' => date('Y-m-d H:i:s'),
                            );
                            $load_id = StockUploadReport::insertGetId($stock_upload_report);

                            $data_response['name'] = $supplier->companyname;
                            $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                        }
                    }
                }
                else
                {

                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function rajlaxmidiamond() //no conflict FILE
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 378)->first();

        try {
            if (!empty($supplier)) {

                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'https://api.culturedcarat.com/v1/keyAuth/all-stock',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_SSL_VERIFYHOST => false,
                    CURLOPT_SSL_VERIFYPEER => false,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'GET',
                    CURLOPT_HTTPHEADER => array(
                        'Authorization: ndPEluEK7gV'
                    ),
                ));

                $result = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }
                $response = json_decode($result, true);

                if(!empty($response['data']))
                {
                    $sheet_data = $response['data'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    ## Change title
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'availability':
                                    $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stock_id':
                                    $sheet_data_title[$key] = 'stock #';
                                break;
                            // case 'weight':
                            //      $sheet_data_title[$key] = 'weight';
                            //     break;
                            // case 'purity':
                            //      $sheet_data_title[$key] = 'clarity';
                            //     break;
                            case 'cut':
                                    $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'report_id':
                                    $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'price_per_caret':
                                    $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'table':
                                    $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth':
                                    $sheet_data_title[$key] = 'depth percent';
                                break;
                            // case 'fls':
                            //      $sheet_data_title[$key] = 'fluorescence intensity';
                            //     break;
                            // case 'symm':
                            //      $sheet_data_title[$key] = 'symmetry';
                            //     break;
                            case 'crown_angle':
                                    $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crown_height':
                                    $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilion_angle':
                                    $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'pavilion_depth':
                                    $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            // case 'country':
                            //      $sheet_data_title[$key] = 'country';
                            //     break;
                            // case 'girdle_cond':
                            //      $sheet_data_title[$key] = 'girdle condition';
                            //     break;
                            // case 'key_to_symbols':
                            //      $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            case 'girdle_per':
                                    $sheet_data_title[$key] = 'girdle percent';
                                break;
                            // case 'culetcon': //africanstar
                            //      $sheet_data_title[$key] = 'culet condition';
                            //     break;
                            // case 'eye_clean':
                            //      $sheet_data_title[$key] = 'eye clean';
                            //     break;
                            // case 'length_1':
                            //      $sheet_data_title[$key] = 'length';
                            //     break;
                            // case 'depth':
                            //      $sheet_data_title[$key] = 'height';
                            //     break;
                            case 'diamond_image':
                                    $sheet_data_title[$key] = 'image link';
                                break;
                            case 'diamond_video':
                                    $sheet_data_title[$key] = 'video link';
                                break;
                            // case 'lab_grown_type':
                            //         $sheet_data_title[$key] = 'treatment';
                            //     break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Lab Grown ####################
                    ###################################################

                    $updatedelete = DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }


                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($flag) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['lab_grown_type']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    $C_Length = $C_Width = $C_Depth = '0';
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }
                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                    print_r($data_response);
                }

                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function belgiumdia() //no conflict API
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 409)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                ## Call api for get data
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://belgiumdia.com/api/DeveloperAPI?stock=&APIKEY=55697304cd03b16b51920fcd2ae09c0b55ec3af1013d",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 300,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "GET",
                    CURLOPT_HTTPHEADER => array(
                        "cache-control: no-cache",
                    ),
                ));
                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error 1#:" . $err;
                    die;
                }

                $newresponse = json_decode($response, true); ## Create array from response

                $sheet_data = $newresponse['Stock']; ## Create variable $sheet_data from response of result
                if(!empty($sheet_data))
                {
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    ## Change title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitle = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitle) {
                            case 'fluorescence_intensity':
                                    $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'stock_no':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'buy_price':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'table_per':
                                    $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth_per':
                                    $sheet_data_title[$key] = 'depth percent';
                                break;
                            default:
                                    $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Lab Grown ####################
                    ###################################################
                    $updatedelete = DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($flag) {
                        $updatestring = '';
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if($keyvaluepair['diamond_type'] == 'Natural Diamond')
                            {
                                continue;
                            }

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && $keyvaluepair['diamond_type'] == 'Lab Grown') {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    $C_Length = $C_Width = $C_Depth = '0';
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }
                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function cultrdGrowersLlp() //no conflict API
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 341)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => "http://cultrd.diamx.net/API/StockSearch?APIToken=092da3f4-0091-468a-b1f2-085ff8e957b6",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_POSTFIELDS => "Content-Length: 0",
                    CURLOPT_CUSTOMREQUEST => "POST",
                    CURLOPT_HTTPHEADER => array(
                        "Content-Type: application/json"
                    ),
                ));
                $results = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                    die;
                }
                $sheet_data = json_decode($results, true);

                if($sheet_data['ApiStatus'] == 'Success')
                {
                    $sheet_data_title = array_keys($sheet_data['StoneList'][0]); ## Create array of title
                    foreach($sheet_data_title as $key => $SheetTitleArrayElement)
                    {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ","",strtolower($SheetTitleArrayElement)));
                        switch($SheetTitleArrayElementreplacelower)
                        {
                            case 'stockstatus':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stone_no':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'cutgrade':
                                $sheet_data_title[$key] = 'cut';
                                break;
                            case 'salerate':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'lab_report_no':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'symm':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'total_depth_per':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'table_diameter_per':
                                $sheet_data_title[$key] = 'table percent';
                                break;

                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'pavillionheight':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'pavillionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;

                            case 'girdlethin_id':
                                $sheet_data_title[$key] = 'girdle thin';
                                break;
                            case 'girdlethick_id':
                                $sheet_data_title[$key] = 'girdle thick';
                                break;
                            case 'girdle_per':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'girdlecon':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            case 'culetcon':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'milkey':
                                $sheet_data_title[$key] = 'milky';
                                break;
                            case 'stone_img_url':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'video_url':
                                $sheet_data_title[$key] = 'video';
                                break;
                            default:
                                $sheet_data[0][$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    ## Change title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitle = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitle) {
                            case 'flrintens':
                                    $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'tablepercent':
                                    $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthpercent':
                                    $sheet_data_title[$key] = 'depth percent';
                                break;
                            default:
                                    $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Lab Grown ####################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data['StoneList'] as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // if ($i == 1 && str_replace(' ', '', @$keyvaluepair['stock #']) == 'stock#' && @$keyvaluepair['shape'] == 'shape' && @$keyvaluepair['weight'] == 'weight' && @$keyvaluepair['color'] == 'color' && @$keyvaluepair['clarity'] == 'clarity' && str_replace(' ', '', @$keyvaluepair['certificate #']) == 'certificate#' && @$keyvaluepair['$/ct'] == '$/ct') {
                            //     echo "HI";
                            //     $flag = true;
                            // }

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty($keyvaluepair['certificate #']) && $keyvaluepair['weight'] > 0  && ($keyvaluepair['lab'] == "GIA" || $keyvaluepair['lab'] == "IGI" || $keyvaluepair['lab'] == "HRD")) {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    $C_Length = $C_Width = $C_Depth = '0';
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function classicgrown()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 529)->first();

        // error_reporting(-1); //info@thediamondport.com
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();

                curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
                curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'https://www.classicgrowndiamonds.com/API/action.php',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS =>'{
                        "action"  :"diamond_stock_list",
                        "email"    :"info@thediamondport.com",
                        "password"  :"tdp#123",
                        "color"    :"D,E,F,G,H,I,J,K,L,M,N",
                        "size"    :"0.47,10",
                        "startindex":"0"
                    }',
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/json'
                    ),
                ));

                $results = curl_exec($curl);
                if(curl_errno($curl)){
                    echo 'Request Error:' . curl_error($curl);
                }
                curl_close($curl);

                $sheet_data = json_decode($results, true);
                if($sheet_data['DATA'])
                {
                    $sheet_data_title = array_keys($sheet_data['DATA'][0]); ## Create array of title

                    ## Change title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    ## Change title
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'loat_no':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'certificate_no':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'price_per_cts':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'symm':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'fluro':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'table_per':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth_per':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Lab Grown ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data['DATA'] as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty($keyvaluepair['certificate #']) && $keyvaluepair['weight'] > 0 && !empty($keyvaluepair['color']) && ($keyvaluepair['lab'] == "GIA" || $keyvaluepair['lab'] == "IGI" || $keyvaluepair['lab'] == "HRD")) {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];


                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'File',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }


                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function elementsintlinc() //no conflict FILE
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 260)->first();

        try {
            if (!empty($supplier)) {

                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";
                $ext_array = array('xls','xlsx','csv');
                $file_path = '';
                if(!empty($supplier->folder_name))
                {
                    $Folder_Path = '../supplier_files/' . $supplier->folder_name . '/';

                    $filesInFolder = \File::allFiles($Folder_Path);
                    $fileNameArray = [];
                    foreach ($filesInFolder as $file){
                            $fileNameArray[] = $file->getFilename();
                    }

                    $File_Name = !empty($fileNameArray)? $fileNameArray[0]:'';
                    $ext = \File::extension($File_Name);

                    $file_path = !in_array($ext, $ext_array) ? NULL : $Folder_Path.$File_Name;
                }

                if (file_exists($file_path)) {
                    if($ext == "xlsx")
                    {
                        $sheet = Excel::toArray(new UsersImport(), $file_path, null,\Maatwebsite\Excel\Excel::XLSX);
                    }
                    else
                    {
                        $sheet = Excel::toArray(new UsersImport(), $file_path);
                    }
                    $sheet_data = $sheet[0];

                    foreach($sheet_data[0] as $key => $SheetTitleArrayElement)
                    {
                        $SheetTitleArray = trim(str_replace(" ","",strtolower($SheetTitleArrayElement)));
                        switch($SheetTitleArray)
                        {
                            case 'pricepercarat':
                                $sheet_data[0][$key] = '$/ct';
                                break;
                            case 'report#':
                                $sheet_data[0][$key] = 'certificate #';
                                break;
                            case 'depth%':
                                $sheet_data[0][$key] = 'depth percent';
                                break;
                            case 'table%':
                                $sheet_data[0][$key] = 'table percent';
                                break;
                            default:
                                $sheet_data[0][$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data[0], $value);

                            if ($i == 1 && str_replace(' ', '', @$keyvaluepair['stock #']) == 'stock#' && @$keyvaluepair['shape'] == 'shape' && @$keyvaluepair['weight'] == 'weight' && @$keyvaluepair['color'] == 'color' && @$keyvaluepair['clarity'] == 'clarity' && str_replace(' ', '', @$keyvaluepair['certificate #']) == 'certificate#' && @$keyvaluepair['$/ct'] == '$/ct') {
                                $flag = true;
                            }

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    $C_Length = $C_Width = $C_Depth = '0';
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'File',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }
                else
                {
                    $data_response['File_Exception'] = 'File not found or file extension not allowed for '.$supplier->companyname.'.';
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function JasDiamondsInc() //no conflict FILE
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 256)->first();

        try {
            if (!empty($supplier)) {

                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";
                $ext_array = array('xls','xlsx','csv');
                $file_path = '';
                if(!empty($supplier->folder_name))
                {
                    $Folder_Path = '../supplier_files/' . $supplier->folder_name . '/';

                    $filesInFolder = \File::allFiles($Folder_Path);
                    $fileNameArray = [];
                    foreach ($filesInFolder as $file){
                            $fileNameArray[] = $file->getFilename();
                    }

                    $File_Name = !empty($fileNameArray)? $fileNameArray[0]:'';
                    $ext = \File::extension($File_Name);

                    $file_path = !in_array($ext, $ext_array) ? NULL : $Folder_Path.$File_Name;
                }

                if (file_exists($file_path)) {
                    if($ext == "xlsx")
                    {
                        $sheet = Excel::toArray(new UsersImport(), $file_path, null,\Maatwebsite\Excel\Excel::XLSX);
                    }
                    else
                    {
                        $sheet = Excel::toArray(new UsersImport(), $file_path);
                    }
                    $sheet_data = $sheet[0];

                    ## Change title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data[0] = AppHelper::ChangeExcelTitleNatural($sheet_data[0]);
                    }
                    else
                    {
                        $sheet_data[0] = AppHelper::ChangeExcelTitleLabGrown($sheet_data[0]);
                    }

                    ## Change title
                    foreach ($sheet_data[0] as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ","",strtolower($SheetTitleArrayElement)));
                        switch($SheetTitleArrayElementreplacelower)
                        {
                            case 'vendorstocknumber':
                                $sheet_data[0][$key] = 'stock #';
                                break;
                            case 'cutgrade':
                                $sheet_data[0][$key] = 'cut grade';
                                break;
                            case 'price':
                                $sheet_data[0][$key] = '$/ct';
                                break;
                            case 'depth%':
                                $sheet_data[0][$key] = 'depth percent';
                                break;
                            case 'table%':
                                $sheet_data[0][$key] = 'table percent';
                                break;
                            case 'diamondimage':
                                $sheet_data[0][$key] = 'image link';
                                break;
                            case 'videourl':
                                $sheet_data[0][$key] = 'video link';
                                break;
                            case 'status':
                                $sheet_data[0][$key] = 'availability';
                                break;
                            default:
                                $sheet_data[0][$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    if ($supplier->diamond_type == 'Lab Grown') {
                        $updatedelete = 1;
                        DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                        DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                        if ($supplier->stock_status == 'ACTIVE') {
                        } else {
                            DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                        }

                        $flag = true;
                        $i = 1;
                        $valid = 0;
                        $invalid = 0;
                        $j = 0;

                        if ($updatedelete) {
                            foreach ($sheet_data as $value) {
                                $keyvaluepair = array_combine($sheet_data[0], $value);
                                if ($i == 1 && str_replace(' ', '', @$keyvaluepair['stock #']) == 'stock#' && @$keyvaluepair['shape'] == 'shape' && @$keyvaluepair['weight'] == 'weight' && @$keyvaluepair['color'] == 'color' && @$keyvaluepair['clarity'] == 'clarity' && str_replace(' ', '', @$keyvaluepair['certificate #']) == 'certificate#' && @$keyvaluepair['$/ct'] == '$/ct') {
                                    $flag = true;
                                }

                                if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                    if (empty(trim(@$keyvaluepair['certificate #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Certificate Blank";
                                    } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Stock ID Blank";
                                    } else {
                                        $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                        if ($shape == "") {
                                            $respo['success'] = false;
                                            $respo['reason'] = "Shape";
                                        } else {
                                            $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                        }
                                    }

                                    if ($respo['success']) {
                                        $cut = '';
                                        $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                        if ($shape == "ROUND") {
                                            $C_shape = "round";
                                            $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                            $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                            $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                            $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                            $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                        } else {
                                            $C_shape = "pear";
                                        }

                                        if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                            $color = 'fancy';
                                            $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                            $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                            $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                            $cut = '';
                                        } else {
                                            $f_color = $f_intensity = $f_overtone = '';
                                            $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                        }

                                        $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = $keyvaluepair['weight'];
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }

                                        $dollerpercarat = $keyvaluepair['$/ct']/$carat;
                                        // $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'L',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );

                                        $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                        $valid++;
                                    } else {
                                        $C_Length = $C_Width = $C_Depth = '0';
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                        }

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => @$keyvaluepair['shape'],
                                            'carat' => @$keyvaluepair['weight'],
                                            'color' => @$keyvaluepair['color'],
                                            'clarity' => @$keyvaluepair['clarity'],
                                            'cut' => @$keyvaluepair['cut grade'],
                                            'polish' => @$keyvaluepair['polish'],
                                            'symmetry' => @$keyvaluepair['symmetry'],
                                            'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'lab' => @$keyvaluepair['lab'],
                                            'certificate_no' => @$keyvaluepair['certificate #'],
                                            'cert_comment' => @$keyvaluepair['report comments'],
                                            'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                            'fancy_color' => @$keyvaluepair['fancy color'],
                                            'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                            'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'girdle_thin' => @$keyvaluepair['girdle thin'],
                                            'girdle_thick' => @$keyvaluepair['girdle thick'],
                                            'gridle' => @$keyvaluepair['girdle condition'],
                                            'cutlet' => @$keyvaluepair['culet'],
                                            'gridle_per' => @$keyvaluepair['girdle percent'],
                                            'crown_height' => @$keyvaluepair['crown height'],
                                            'crown_angle' => @$keyvaluepair['crown angle'],
                                            'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                            'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                            'country' => @$keyvaluepair['country'],
                                            'city' => @$keyvaluepair['city'],
                                            'image' => @$keyvaluepair['image link'],
                                            'video' => trim(@$keyvaluepair['video link']),
                                            'heart' => @$keyvaluepair['heart image'],
                                            'arrow' => @$keyvaluepair['arrow image'],
                                            'asset' => @$keyvaluepair['aset image'],
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'milky' => @$keyvaluepair['milky'],
                                            'eyeclean' => @$keyvaluepair['eye clean'],
                                            'availability' => @$keyvaluepair['availability'],
                                            'shade' => @$keyvaluepair['shade'],
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => @$keyvaluepair['luster'],
                                            'culet_condition' => @$keyvaluepair['culet condition'],
                                        );
                                        $result['reason'] = $respo['reason'];
                                        DiamondInvalid::insert($result);
                                        $invalid++;
                                    }
                                    $j++;
                                }
                                $i++;
                            }
                        }

                        if ($flag) {
                            $stock_upload_report = array(
                                'supplier_id' => $supplier->sup_id,
                                'no_of_stone' => $j,
                                'valid_diamond' => $valid,
                                'invalid_diamond' => $invalid,
                                'upload_mode' => 'File',
                                'info' => '',
                                'created_at' => date('Y-m-d H:i:s'),
                                'file_updated_at' => date('Y-m-d H:i:s'),
                            );
                            $load_id = StockUploadReport::insertGetId($stock_upload_report);

                            $data_response['name'] = $supplier->companyname;
                            $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                        } else {
                            $SheetError = array_search('stock #', $sheet_data_title[0])===false?'stock # missing from sheet ':null;
                            $SheetError .= array_search('shape', $sheet_data[0])===false?'shape missing from sheet ':null;
                            $SheetError .= array_search('weight', $sheet_data[0])===false?'weight missing from sheet ':null;
                            $SheetError .= array_search('color', $sheet_data[0])===false?'color missing from sheet ':null;
                            $SheetError .= array_search('clarity', $sheet_data[0])===false?'clarity missing from sheet ':null;
                            $SheetError .= array_search('certificate #', $sheet_data[0])===false?'certificate # missing from sheet ':null;
                            $SheetError .= array_search('$/ct', $sheet_data[0])===false?'$/ct missing from sheet ':null;

                            $this->session->set_flashdata('error_msg', 'Format not supported');
                            $data_response['flag'] = $flag;
                            $data_response['warnings'][] = 'Format not supported '.$SheetError;
                            $data_response['hasWarnings'] = true;
                        }
                    }
                }else
                {
                    $data_response['File_Exception'] = 'File not found or file extension not allowed for '.$supplier->companyname.'.';
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function merayadiamond() //no conflict API
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 487)->first();

        // error_reporting(-1);
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'http://betanew.merayadiamond.com/LgApi/api/LgStockApi/getDiamondData',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS =>'{
                        "uniqID":9,
                        "company":"The Diamond Port",
                        "actCode":"The@Mer#Po$23",
                        "selectAll":"All",
                        "StartIndex":1,
                        "count":5000,
                        "columns":"",
                        "finder":"size > 0.35  and cert=\'IGI\'",
                        "sort":""
                    }',
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/json'
                    ),
                ));

                $results = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                    die;
                }

                $sheet_data = json_decode($results, true);
                if($sheet_data['IsValidUser'] == 'true')
                {
                    $sheet_data_title = array_keys($sheet_data['DataList'][0]); ## Create array of title

                    ## Change title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    ## Change title
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            // case 'status':
                            //     $sheet_data_title[$key] = 'availability';
                            //     break;
                            case 'ref':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'size':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'certno':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'price/carat':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'sym':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'flour':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;

                            case 'm1':
                                $sheet_data_title[$key] = 'length';
                                break;
                            case 'm2':
                                $sheet_data_title[$key] = 'width';
                                break;
                            case 'm3':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'table':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'cert':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'videourl':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'imageurl':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'crang':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'pavdepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'girdlecondition':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'keytosymbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            // case 'culetsize':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            // case 'culetcon':
                            //     $sheet_data_title[$key] = 'culet codition';
                            //     break;
                            // case 'eyeclean':
                            //     $sheet_data_title[$key] = 'eye clean';
                            //     break;
                            // case 'comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'shade':
                            //     $sheet_data_title[$key] = 'shade_changed';
                            //     break;
                            // case 'tinge':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Lab Grown ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data['DataList'] as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty($keyvaluepair['certificate #']) && $keyvaluepair['weight'] > 0 && !empty($keyvaluepair['color']) && ($keyvaluepair['lab'] == "GIA" || $keyvaluepair['lab'] == "IGI" || $keyvaluepair['lab'] == "HRD")) {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];


                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'File',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }


                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function neolabdiamonds() //no conflict API
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 302)->first();

        // error_reporting(-1);
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'https://neolabdiamonds.com/api/GetSolitaires.php',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 300,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "GET",
                    CURLOPT_HTTPHEADER => array(
                        'Authorization: NEO1xdkrwthzemclpgvs6483'
                    ),
                ));

                $results = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                    die;
                }

                $sheet_data = json_decode($results, true);
                if($sheet_data['status'] == 'success')
                {
                    $sheet_data_title = array_keys($sheet_data['data'][0]); ## Create array of title

                    ## Change title
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'status':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'sku':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'carat':
                                $sheet_data_title[$key] = 'weight';
                                break;

                            case 'certificate_number':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'price_per_carat':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurement':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'table_percentage':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth_percentage':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            // case 'flrintens':
                            //     $sheet_data_title[$key] = 'fluorescence intensity';
                            //     break;
                            case 'video_link':
                                $sheet_data_title[$key] = 'video';
                                break;
                            case 'imsg':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'summery':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            // case 'crownangle':
                            //     $sheet_data_title[$key] = 'crown angle';
                            //     break;
                            // case 'crownheight':
                            //     $sheet_data_title[$key] = 'crown height';
                            //     break;
                            // case 'pavillionangle':
                            //     $sheet_data_title[$key] = 'pavilion angle';
                            //     break;
                            // case 'pavillionheight':
                            //     $sheet_data_title[$key] = 'pavilion depth';
                            //     break;
                            // case 'location':
                            //     $sheet_data_title[$key] = 'country';
                            //     break;
                            // case 'girdlecon':
                            //     $sheet_data_title[$key] = 'girdle condition';
                            //     break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'keytosymbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'girdle_per':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            // case 'culetsize':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            // case 'culetcon':
                            //     $sheet_data_title[$key] = 'culet codition';
                            //     break;
                            // case 'eyeclean':
                            //     $sheet_data_title[$key] = 'eye clean';
                            //     break;
                            // case 'comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'shade':
                            //     $sheet_data_title[$key] = 'shade_changed';
                            //     break;
                            // case 'tinge':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Lab Grown ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data['data'] as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty($keyvaluepair['certificate #']) && $keyvaluepair['weight'] > 0 && !empty($keyvaluepair['color']) && ($keyvaluepair['lab'] == "GIA" || $keyvaluepair['lab'] == "IGI" || $keyvaluepair['lab'] == "HRD")) {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];


                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'File',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }


                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function purelabdiamond() //no conflict FILE
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 292)->first();

        try {
            if (!empty($supplier)) {

                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";
                $ext_array = array('xls','xlsx','csv','Csv');
                $file_path = '';
                if(!empty($supplier->folder_name))
                {
                    $Folder_Path = '../supplier_files/' . $supplier->folder_name . '/';

                    $filesInFolder = \File::allFiles($Folder_Path);
                    $fileNameArray = [];
                    foreach ($filesInFolder as $file){
                            $fileNameArray[] = $file->getFilename();
                    }

                    $File_Name = !empty($fileNameArray)? $fileNameArray[0]:'';
                    $ext = \File::extension($File_Name);

                    $file_path = !in_array($ext, $ext_array) ? NULL : $Folder_Path.$File_Name;
                }

                if (file_exists($file_path)) {
                    if($ext == "xlsx")
                    {
                        $sheet = Excel::toArray(new UsersImport(), $file_path, null,\Maatwebsite\Excel\Excel::XLSX);
                    }
                    else
                    {
                        $sheet = Excel::toArray(new UsersImport(), $file_path);
                    }
                    $sheet_data = $sheet[0];

                    foreach($sheet_data[0] as $key => $SheetTitleArrayElement)
                    {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ","",strtolower($SheetTitleArrayElement)));
                        switch($SheetTitleArrayElementreplacelower)
                        {
                            case 'rapnetprice':
                                $sheet_data[0][$key] = '$/ct';
                                break;
                            case 'cutgrade':
                                $sheet_data[0][$key] = 'cut grade';
                                break;
                            case 'depth%':
                                $sheet_data[0][$key] = 'depth percent';
                                break;
                            case 'table%':
                                $sheet_data[0][$key] = 'table percent';
                                break;
                            case 'diamondimage':
                                $sheet_data[0][$key] = 'image link';
                                break;
                            case 'diamondvideo':
                                $sheet_data[0][$key] = 'video link';
                                break;
                            default:
                                $sheet_data[0][$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    if ($supplier->diamond_type == 'Lab Grown') {
                        $updatedelete = 1;
                        DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                        DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                        if ($supplier->stock_status == 'ACTIVE') {
                        } else {
                            DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                        }

                        $flag = true;
                        $i = 1;
                        $valid = 0;
                        $invalid = 0;
                        $j = 0;
                        $file_update_date = date("Y-m-d H:i:s", filemtime($file_path));

                        if ($updatedelete) {
                            foreach ($sheet_data as $value) {
                                $keyvaluepair = array_combine($sheet_data[0], $value);

                                if ($i == 1 && str_replace(' ', '', @$keyvaluepair['stock #']) == 'stock#' && @$keyvaluepair['shape'] == 'shape' && @$keyvaluepair['weight'] == 'weight' && @$keyvaluepair['color'] == 'color' && @$keyvaluepair['clarity'] == 'clarity' && str_replace(' ', '', @$keyvaluepair['certificate #']) == 'certificate#' && @$keyvaluepair['$/ct'] == '$/ct') {
                                    $flag = true;
                                }

                                if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                    if (empty(trim(@$keyvaluepair['certificate #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Certificate Blank";
                                    } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Stock ID Blank";
                                    } else {
                                        $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                        if ($shape == "") {
                                            $respo['success'] = false;
                                            $respo['reason'] = "Shape";
                                        } else {
                                            $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                        }
                                    }

                                    if ($respo['success']) {
                                        $cut = '';
                                        $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                        if ($shape == "ROUND") {
                                            $C_shape = "round";
                                            $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                            $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                            $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                            $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                            $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                        } else {
                                            $C_shape = "pear";
                                        }

                                        if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                            $color = 'fancy';
                                            $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                            $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                            $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                            $cut = '';
                                        } else {
                                            $f_color = $f_intensity = $f_overtone = '';
                                            $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                        }

                                        $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }
                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'L',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );

                                        $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                        $valid++;
                                    } else {
                                        if (@$keyvaluepair['girdle %'] != '') {
                                            $gridle_per = @$keyvaluepair['girdle %'];
                                        } else {
                                            $gridle_per = '0';
                                        }

                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                        }

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => @$keyvaluepair['shape'],
                                            'carat' => @$keyvaluepair['weight'],
                                            'color' => @$keyvaluepair['color'],
                                            'clarity' => @$keyvaluepair['clarity'],
                                            'cut' => @$keyvaluepair['cut grade'],
                                            'polish' => @$keyvaluepair['polish'],
                                            'symmetry' => @$keyvaluepair['symmetry'],
                                            'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'lab' => @$keyvaluepair['lab'],
                                            'certificate_no' => @$keyvaluepair['certificate #'],
                                            'cert_comment' => @$keyvaluepair['report comments'],
                                            'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                            'fancy_color' => @$keyvaluepair['fancy color'],
                                            'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                            'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'girdle_thin' => @$keyvaluepair['girdle thin'],
                                            'girdle_thick' => @$keyvaluepair['girdle thick'],
                                            'gridle' => @$keyvaluepair['girdle condition'],
                                            'cutlet' => @$keyvaluepair['culet'],
                                            'gridle_per' => @$keyvaluepair['girdle percent'],
                                            'crown_height' => @$keyvaluepair['crown height'],
                                            'crown_angle' => @$keyvaluepair['crown angle'],
                                            'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                            'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                            'country' => @$keyvaluepair['country'],
                                            'city' => @$keyvaluepair['city'],
                                            'image' => @$keyvaluepair['image link'],
                                            'video' => trim(@$keyvaluepair['video link']),
                                            'heart' => @$keyvaluepair['heart image'],
                                            'arrow' => @$keyvaluepair['arrow image'],
                                            'asset' => @$keyvaluepair['aset image'],
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'milky' => @$keyvaluepair['milky'],
                                            'eyeclean' => @$keyvaluepair['eye clean'],
                                            'availability' => @$keyvaluepair['availability'],
                                            'shade' => @$keyvaluepair['shade'],
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => @$keyvaluepair['luster'],
                                            'culet_condition' => @$keyvaluepair['culet condition'],
                                        );
                                        $result['reason'] = $respo['reason'];
                                        DiamondInvalid::insert($result);
                                        $invalid++;
                                    }
                                    $j++;
                                }
                                $i++;
                            }
                        }

                        if ($flag) {
                            $stock_upload_report = array(
                                'supplier_id' => $supplier->sup_id,
                                'no_of_stone' => $j,
                                'valid_diamond' => $valid,
                                'invalid_diamond' => $invalid,
                                'upload_mode' => 'File',
                                'info' => '',
                                'created_at' => date('Y-m-d H:i:s'),
                                'file_updated_at' => $file_update_date,
                            );
                            $load_id = StockUploadReport::insertGetId($stock_upload_report);

                            $data_response['name'] = $supplier->companyname;
                            $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                        } else {
                            $SheetError = array_search('stock #', $sheet_data[0])===false?'stock # missing from sheet ':null;
                            $SheetError .= array_search('shape', $sheet_data[0])===false?'shape missing from sheet ':null;
                            $SheetError .= array_search('weight', $sheet_data[0])===false?'weight missing from sheet ':null;
                            $SheetError .= array_search('color', $sheet_data[0])===false?'color missing from sheet ':null;
                            $SheetError .= array_search('clarity', $sheet_data[0])===false?'clarity missing from sheet ':null;
                            $SheetError .= array_search('certificate #', $sheet_data[0])===false?'certificate # missing from sheet ':null;
                            $SheetError .= array_search('$/ct', $sheet_data[0])===false?'$/ct missing from sheet ':null;

                            $data_response['flag'] = $flag;
                            $data_response['warnings'][] = 'Format not supported '.$SheetError;
                            $data_response['hasWarnings'] = true;
                        }
                    }
                }
                else
                {
                    $data_response['File_Exception'] = 'File not found or file extension not allowed for '.$supplier->companyname.'.';
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function paralleldiamonds() //no conflict API
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 223)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "http://www.paralleldiamonds.com/api/getstock?user=yzY47BAsvkLSmTNvewvAg4zK4Mz8gHsALnRTO+VBXq0=&key=BnnqiYrgEjf/WavJW8xLYQ==";
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_SSL_VERIFYHOST => 0,
                    CURLOPT_SSL_VERIFYPEER => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'GET',
                    CURLOPT_HTTPHEADER => array(
                    'Cookie: ASP.NET_SessionId=xzady3x5o1q3lrqtn3c02czm'
                    ),
                ));
                $result = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);
                if ($err) {
                    echo "cURL Error 1#:" . $err;
                    die;
                }
                $sxml = simplexml_load_string(utf8_encode($result));
                $json_string = json_encode($sxml);
                $results = json_decode($json_string, TRUE);
                $sheet_data = $results['ExcelData']; ## Create variable $sheet_data from response of result

                $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                //Change title
                foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                    $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                    switch ($SheetTitleArrayElementreplacelower) {
                        case 'stone_x0020_id':
                            $sheet_data_title[$key] = 'stock #';
                            break;
                        case 'carat':
                            $sheet_data_title[$key] = 'weight';
                            break;
                        case 'price_x002f_ct':
                            $sheet_data_title[$key] = '$/ct';
                            break;
                        case 'certificate_x0020_no':
                            $sheet_data_title[$key] = 'certificate #';
                            break;
                        case 'fl':
                            $sheet_data_title[$key] = 'fluorescence intensity';
                            break;
                        case 'cut':
                            $sheet_data_title[$key] = 'cut grade';
                            break;
                        case 'measurement':
                            $sheet_data_title[$key] = 'measurements';
                            break;
                        case 'tab_x0025_':
                            $sheet_data_title[$key] = 'table percent';
                            break;
                        case 'totdepth_x0020__x0025_':
                            $sheet_data_title[$key] = 'depth percent';
                            break;
                        case 'image':
                            $sheet_data_title[$key] = 'image link';
                            break;
                        case 'video':
                            $sheet_data_title[$key] = 'video link';
                            break;
                        case 'key_x0020_to_x0020_sym':
                            $sheet_data_title[$key] = 'key to symbol';
                            break;
                        case 'cr_x0020_hgt':
                            $sheet_data_title[$key] = 'crown height';
                            break;
                        case 'cr_x0020_ang':
                            $sheet_data_title[$key] = 'crown angle';
                            break;
                        case 'pv_x0020_ang':
                            $sheet_data_title[$key] = 'pavilion angle';
                            break;
                        case 'pv_x0020_hgt':
                            $sheet_data_title[$key] = 'pavilion depth';
                            break;
                        case 'location':
                            $sheet_data_title[$key] = 'country';
                            break;
                        case 'eye_x0020_clean':
                            $sheet_data_title[$key] = 'eye clean';
                            break;
                        case 'girdle_x0025_':
                            $sheet_data_title[$key] = 'girdle %';
                            break;
                        default:
                            $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                    }
                }

                $shiping_price_array = AppHelper::shipingPriceArray();
                $s_price_array = AppHelper::sPriceArray($supplier);

                ###################################################
                #################### Lab Grown ####################
                ###################################################

                $updatedelete = 1;
                DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                if ($supplier->stock_status == 'ACTIVE') {
                } else {
                    DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                }

                $flag = true;
                $i = 1;
                $valid = 0;
                $invalid = 0;
                $j = 0;

                if ($flag) {
                    $updatestring = '';

                    foreach ($sheet_data as $value) {
                        $keyvaluepair = array_combine($sheet_data_title, $value);

                        if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty(@$keyvaluepair['certificate #']) && @$keyvaluepair['certificate #'] != "-" && @$keyvaluepair['weight'] > 0 && !empty(@$keyvaluepair['color']) && @$keyvaluepair['lab'] != "Not Certified" && @$keyvaluepair['lab'] != "-") {
                            if (empty(trim(@$keyvaluepair['certificate #']))) {
                                $respo['success'] = false;
                                $respo['reason'] = "Certificate Blank";
                            } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                $respo['success'] = false;
                                $respo['reason'] = "Stock ID Blank";
                            } else {
                                $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                if ($shape == "") {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Shape";
                                } else {
                                    $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                }
                            }

                            if ($respo['success']) {
                                $cut = '';
                                $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                if ($shape == "ROUND") {
                                    $C_shape = "round";
                                    $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                    $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                    $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                    $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                    $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                } else {
                                    $C_shape = "pear";
                                }

                                if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                    $color = 'fancy';
                                    $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                    $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                    $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                    $cut = '';
                                } else {
                                    $f_color = $f_intensity = $f_overtone = '';
                                    $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                }

                                $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                if(empty($milky))
                                {
                                    if(isset($keyvaluepair['luster']))
                                    {
                                        $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                        switch($lusterToMilky)
                                        {
                                            case 'excellent':
                                            case 'ex':
                                            case 'verygood':
                                            case 'vg+':
                                                $milky = 'NO MILKY';
                                                break;
                                            case 'lightmilky':
                                                $milky = 'LIGHT MILKY ';
                                                break;
                                            case 'milky':
                                                $milky = 'MILKY';
                                                break;
                                        }
                                    }
                                }

                                $certi = trim(@$keyvaluepair['certificate #']);
                                $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                if(empty($eyeclean))
                                {
                                    $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                    switch($clarityToeyeclean)
                                    {
                                        case 'fl':
                                        case 'if':
                                        case 'vvs1':
                                        case 'vvs2':
                                        case 'vs1':
                                            $eyeclean = "Yes";
                                            break;
                                    }
                                }

                                $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                $add_dic = 0;
                                if (!empty($s_price_array)) {
                                    $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                }
                                $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                $net_price = round($carat * $newdollerpercarat, 2);

                                $C_Length = $C_Width = $C_Depth = 0;
                                if (@$keyvaluepair['measurements'] != "") {
                                    $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                    $main = explode("x", $mesurment);
                                    $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                    $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                    $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                }
                                else
                                {
                                    $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                    $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                    $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                }

                                $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                $result = array(
                                    'supplier_name' => $supplier->companyname,
                                    'supplier_id' => $supplier->sup_id,
                                    'ref_no' => @$keyvaluepair['stock #'],
                                    'shape' => $shape,
                                    'carat' => $carat,
                                    'color' => $color,
                                    'clarity' => strtoupper($clarity),
                                    'cut' => $cut,
                                    'polish' => $C_Polish,
                                    'symmetry' => $C_Symmetry,
                                    'fluorescence' => $C_Fluorescence,
                                    'orignal_rate' => $dollerpercarat,
                                    'rate' => $newdollerpercarat,
                                    'net_dollar' => $net_price,
                                    'table_per' => @$keyvaluepair['table percent'],
                                    'depth_per' => @$keyvaluepair['depth percent'],
                                    'lab' => $lab,
                                    'fancy_color' => $f_color,
                                    'fancy_intensity' => $f_intensity,
                                    'fancy_overtone' => $f_overtone,
                                    'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                    'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                    'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                    'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                    'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                    'crown_angle' => $Crn_Ag,
                                    'crown_height' => $Crn_Ht,
                                    'pavilion_angle' => $Pav_Ag,
                                    'pavilion_depth' => $Pav_Dp,
                                    'certificate_no' => $certi,
                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                    'country' => $country,
                                    'city' => @$keyvaluepair['city'],
                                    'length' => $C_Length,
                                    'width' => $C_Width,
                                    'depth' => $C_Depth,
                                    'milky' => $milky,
                                    'eyeclean' => $eyeclean,
                                    'image' => $image,
                                    'video' => $video,
                                    'heart' => $heart,
                                    'arrow' => $arrow,
                                    'asset' => $asset,
                                    'diamond_type' => 'L',
                                    'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                    'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                    'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                    'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                    'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                    'is_delete' => '0',
                                );

                                $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                $valid++;
                            } else {
                                if (@$keyvaluepair['girdle %'] != '') {
                                    $gridle_per = @$keyvaluepair['girdle %'];
                                } else {
                                    $gridle_per = '0';
                                }

                                if (@$keyvaluepair['measurements'] != "") {
                                    $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                    $main = explode("x", $mesurment);
                                    $C_Length = (!empty($main[0])) ? $main[0] : '';
                                    $C_Width = (!empty($main[1])) ? $main[1] : '';
                                    $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                }

                                $result = array(
                                    'supplier_name' => $supplier->companyname,
                                    'supplier_id' => $supplier->sup_id,
                                    'ref_no' => @$keyvaluepair['stock #'],
                                    'shape' => @$keyvaluepair['shape'],
                                    'carat' => @$keyvaluepair['weight'],
                                    'color' => @$keyvaluepair['color'],
                                    'clarity' => @$keyvaluepair['clarity'],
                                    'cut' => @$keyvaluepair['cut grade'],
                                    'polish' => @$keyvaluepair['polish'],
                                    'symmetry' => @$keyvaluepair['symmetry'],
                                    'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                    'length' => $C_Length,
                                    'width' => $C_Width,
                                    'depth' => $C_Depth,
                                    'lab' => @$keyvaluepair['lab'],
                                    'certificate_no' => @$keyvaluepair['certificate #'],
                                    'cert_comment' => @$keyvaluepair['report comments'],
                                    'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                    'fancy_color' => @$keyvaluepair['fancy color'],
                                    'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                    'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                    'depth_per' => @$keyvaluepair['depth percent'],
                                    'table_per' => @$keyvaluepair['table percent'],
                                    'girdle_thin' => @$keyvaluepair['girdle thin'],
                                    'girdle_thick' => @$keyvaluepair['girdle thick'],
                                    'gridle' => @$keyvaluepair['girdle condition'],
                                    'cutlet' => @$keyvaluepair['culet'],
                                    'gridle_per' => @$keyvaluepair['girdle percent'],
                                    'crown_height' => @$keyvaluepair['crown height'],
                                    'crown_angle' => @$keyvaluepair['crown angle'],
                                    'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                    'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                    'country' => @$keyvaluepair['country'],
                                    'city' => @$keyvaluepair['city'],
                                    'image' => @$keyvaluepair['image link'],
                                    'video' => trim(@$keyvaluepair['video link']),
                                    'heart' => @$keyvaluepair['heart image'],
                                    'arrow' => @$keyvaluepair['arrow image'],
                                    'asset' => @$keyvaluepair['aset image'],
                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                    'milky' => @$keyvaluepair['milky'],
                                    'eyeclean' => @$keyvaluepair['eye clean'],
                                    'availability' => @$keyvaluepair['availability'],
                                    'shade' => @$keyvaluepair['shade'],
                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                    'luster' => @$keyvaluepair['luster'],
                                    'culet_condition' => @$keyvaluepair['culet condition'],
                                );
                                $result['reason'] = $respo['reason'];
                                DiamondInvalid::insert($result);
                                $invalid++;
                            }
                            $j++;
                        }
                        $i++;
                    }
                }
                if ($flag) {
                    $stock_upload_report = array(
                        'supplier_id' => $supplier->sup_id,
                        'no_of_stone' => $j,
                        'valid_diamond' => $valid,
                        'invalid_diamond' => $invalid,
                        'upload_mode' => 'File',
                        'info' => '',
                        'created_at' => date('Y-m-d H:i:s'),
                        'file_updated_at' => date('Y-m-d H:i:s'),
                    );
                    $load_id = StockUploadReport::insertGetId($stock_upload_report);

                    $data_response['name'] = $supplier->companyname;
                    $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function hrimpex() //no conflict API
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 243)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "http://www.hrimpex.in/api/tdp.php";
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_SSL_VERIFYHOST => 0,
                    CURLOPT_SSL_VERIFYPEER => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'GET',
                ));
                $result = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);
                if ($err) {
                    echo "cURL Error 1#:" . $err;
                    die;
                }

                $sheet_data = json_decode($result, TRUE);
                $sheet_data = $sheet_data['data'];

                $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                ## Change title
                if ($supplier->diamond_type == 'Natural') {
                    $sheet_data_title = AppHelper::ChangeTitleNatural($sheet_data_title);
                } else {
                    $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                }

                foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                    $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                    switch ($SheetTitleArrayElementreplacelower) {
                        // case 'availability':
                        //         $sheet_data_title[$key] = 'availability';
                        //     break;
                        // case 'stock_id':
                        //         $sheet_data_title[$key] = 'stock #';
                        //     break;
                        // case 'weight':
                        //      $sheet_data_title[$key] = 'weight';
                        //     break;
                        // case 'purity':
                        //      $sheet_data_title[$key] = 'clarity';
                        //     break;
                        // case 'cut':
                        //     $sheet_data_title[$key] = 'cut grade';
                        //     break;
                        case 'report#':
                            $sheet_data_title[$key] = 'certificate #';
                            break;
                        case 'pricepercarat':
                            $sheet_data_title[$key] = '$/ct';
                            break;
                        // case 'table%':
                        //         $sheet_data_title[$key] = 'table percent';
                        //     break;
                        // case 'depth%':
                        //         $sheet_data_title[$key] = 'depth percent';
                        //     break;
                        // case 'fls':
                        //      $sheet_data_title[$key] = 'fluorescence intensity';
                        //     break;
                        // case 'symm':
                        //      $sheet_data_title[$key] = 'symmetry';
                        //     break;
                        case 'crown angle':
                                $sheet_data_title[$key] = 'crown angle';
                            break;
                        case 'crown height':
                                $sheet_data_title[$key] = 'crown height';
                            break;
                        case 'pavilion angle':
                                $sheet_data_title[$key] = 'pavilion angle';
                            break;
                        case 'pavilion depth':
                                $sheet_data_title[$key] = 'pavilion depth';
                            break;
                        // case 'country':
                        //      $sheet_data_title[$key] = 'country';
                        //     break;
                        // case 'girdle_cond':
                        //      $sheet_data_title[$key] = 'girdle condition';
                        //     break;
                        // case 'key_to_symbols':
                        //      $sheet_data_title[$key] = 'key to symbols';
                        //     break;
                        // case 'girdle_per':
                        //         $sheet_data_title[$key] = 'girdle percent';
                        //     break;
                        // case 'culetcon': //africanstar
                        //      $sheet_data_title[$key] = 'culet condition';
                        //     break;
                        // case 'eye_clean':
                        //      $sheet_data_title[$key] = 'eye clean';
                        //     break;
                        // case 'length_1':
                        //      $sheet_data_title[$key] = 'length';
                        //     break;
                        // case 'depth':
                        //      $sheet_data_title[$key] = 'height';
                        // case 'diamond_video':
                        //         $sheet_data_title[$key] = 'video link';
                        //     break;
                        default:
                            $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                    }
                }

                $shiping_price_array = AppHelper::shipingPriceArray();
                $s_price_array = AppHelper::sPriceArray($supplier);

                ###################################################
                #################### Lab Grown ####################
                ###################################################

                $updatedelete = 1;
                DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                if ($supplier->stock_status == 'ACTIVE') {
                } else {
                    DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                }

                $flag = true;
                $i = 1;
                $valid = 0;
                $invalid = 0;
                $j = 0;

                if ($flag) {
                    $updatestring = '';

                    foreach ($sheet_data as $value) {
                        $keyvaluepair = array_combine($sheet_data_title, $value);

                        if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty(@$keyvaluepair['certificate #']) && @$keyvaluepair['certificate #'] != "-" && @$keyvaluepair['weight'] > 0 && !empty(@$keyvaluepair['color']) && @$keyvaluepair['lab'] != "Not Certified" && @$keyvaluepair['lab'] != "-") {
                            if (empty(trim(@$keyvaluepair['certificate #']))) {
                                $respo['success'] = false;
                                $respo['reason'] = "Certificate Blank";
                            } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                $respo['success'] = false;
                                $respo['reason'] = "Stock ID Blank";
                            } else {
                                $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                if ($shape == "") {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Shape";
                                } else {
                                    $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                }
                            }

                            if ($respo['success']) {
                                $cut = '';
                                $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                if ($shape == "ROUND") {
                                    $C_shape = "round";
                                    $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                    $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                    $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                    $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                    $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                } else {
                                    $C_shape = "pear";
                                }

                                if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                    $color = 'fancy';
                                    $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                    $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                    $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                    $cut = '';
                                } else {
                                    $f_color = $f_intensity = $f_overtone = '';
                                    $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                }

                                $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                if(empty($milky))
                                {
                                    if(isset($keyvaluepair['luster']))
                                    {
                                        $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                        switch($lusterToMilky)
                                        {
                                            case 'excellent':
                                            case 'ex':
                                            case 'verygood':
                                            case 'vg+':
                                                $milky = 'NO MILKY';
                                                break;
                                            case 'lightmilky':
                                                $milky = 'LIGHT MILKY ';
                                                break;
                                            case 'milky':
                                                $milky = 'MILKY';
                                                break;
                                        }
                                    }
                                }

                                $certi = trim(@$keyvaluepair['certificate #']);
                                $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                if(empty($eyeclean))
                                {
                                    $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                    switch($clarityToeyeclean)
                                    {
                                        case 'fl':
                                        case 'if':
                                        case 'vvs1':
                                        case 'vvs2':
                                        case 'vs1':
                                            $eyeclean = "Yes";
                                            break;
                                    }
                                }

                                $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                $add_dic = 0;
                                if (!empty($s_price_array)) {
                                    $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                }
                                $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                $net_price = round($carat * $newdollerpercarat, 2);

                                $C_Length = $C_Width = $C_Depth = 0;
                                if (@$keyvaluepair['measurements'] != "") {
                                    $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                    $main = explode("x", $mesurment);
                                    $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                    $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                    $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                }
                                else
                                {
                                    $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                    $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                    $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                }

                                $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                $result = array(
                                    'supplier_name' => $supplier->companyname,
                                    'supplier_id' => $supplier->sup_id,
                                    'ref_no' => @$keyvaluepair['stock #'],
                                    'shape' => $shape,
                                    'carat' => $carat,
                                    'color' => $color,
                                    'clarity' => strtoupper($clarity),
                                    'cut' => $cut,
                                    'polish' => $C_Polish,
                                    'symmetry' => $C_Symmetry,
                                    'fluorescence' => $C_Fluorescence,
                                    'orignal_rate' => $dollerpercarat,
                                    'rate' => $newdollerpercarat,
                                    'net_dollar' => $net_price,
                                    'table_per' => @$keyvaluepair['table percent'],
                                    'depth_per' => @$keyvaluepair['depth percent'],
                                    'lab' => $lab,
                                    'fancy_color' => $f_color,
                                    'fancy_intensity' => $f_intensity,
                                    'fancy_overtone' => $f_overtone,
                                    'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                    'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                    'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                    'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                    'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                    'crown_angle' => $Crn_Ag,
                                    'crown_height' => $Crn_Ht,
                                    'pavilion_angle' => $Pav_Ag,
                                    'pavilion_depth' => $Pav_Dp,
                                    'certificate_no' => $certi,
                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                    'country' => $country,
                                    'city' => @$keyvaluepair['city'],
                                    'length' => $C_Length,
                                    'width' => $C_Width,
                                    'depth' => $C_Depth,
                                    'milky' => $milky,
                                    'eyeclean' => $eyeclean,
                                    'image' => $image,
                                    'video' => $video,
                                    'heart' => $heart,
                                    'arrow' => $arrow,
                                    'asset' => $asset,
                                    'diamond_type' => 'L',
                                    'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                    'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                    'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                    'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                    'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                    'is_delete' => '0',
                                );

                                $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                $valid++;
                            } else {
                                if (@$keyvaluepair['girdle %'] != '') {
                                    $gridle_per = @$keyvaluepair['girdle %'];
                                } else {
                                    $gridle_per = '0';
                                }

                                if (@$keyvaluepair['measurements'] != "") {
                                    $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                    $main = explode("x", $mesurment);
                                    $C_Length = (!empty($main[0])) ? $main[0] : '';
                                    $C_Width = (!empty($main[1])) ? $main[1] : '';
                                    $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                }

                                $result = array(
                                    'supplier_name' => $supplier->companyname,
                                    'supplier_id' => $supplier->sup_id,
                                    'ref_no' => @$keyvaluepair['stock #'],
                                    'shape' => @$keyvaluepair['shape'],
                                    'carat' => @$keyvaluepair['weight'],
                                    'color' => @$keyvaluepair['color'],
                                    'clarity' => @$keyvaluepair['clarity'],
                                    'cut' => @$keyvaluepair['cut grade'],
                                    'polish' => @$keyvaluepair['polish'],
                                    'symmetry' => @$keyvaluepair['symmetry'],
                                    'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                    'length' => $C_Length,
                                    'width' => $C_Width,
                                    'depth' => $C_Depth,
                                    'lab' => @$keyvaluepair['lab'],
                                    'certificate_no' => @$keyvaluepair['certificate #'],
                                    'cert_comment' => @$keyvaluepair['report comments'],
                                    'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                    'fancy_color' => @$keyvaluepair['fancy color'],
                                    'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                    'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                    'depth_per' => @$keyvaluepair['depth percent'],
                                    'table_per' => @$keyvaluepair['table percent'],
                                    'girdle_thin' => @$keyvaluepair['girdle thin'],
                                    'girdle_thick' => @$keyvaluepair['girdle thick'],
                                    'gridle' => @$keyvaluepair['girdle condition'],
                                    'cutlet' => @$keyvaluepair['culet'],
                                    'gridle_per' => @$keyvaluepair['girdle percent'],
                                    'crown_height' => @$keyvaluepair['crown height'],
                                    'crown_angle' => @$keyvaluepair['crown angle'],
                                    'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                    'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                    'country' => @$keyvaluepair['country'],
                                    'city' => @$keyvaluepair['city'],
                                    'image' => @$keyvaluepair['image link'],
                                    'video' => trim(@$keyvaluepair['video link']),
                                    'heart' => @$keyvaluepair['heart image'],
                                    'arrow' => @$keyvaluepair['arrow image'],
                                    'asset' => @$keyvaluepair['aset image'],
                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                    'milky' => @$keyvaluepair['milky'],
                                    'eyeclean' => @$keyvaluepair['eye clean'],
                                    'availability' => @$keyvaluepair['availability'],
                                    'shade' => @$keyvaluepair['shade'],
                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                    'luster' => @$keyvaluepair['luster'],
                                    'culet_condition' => @$keyvaluepair['culet condition'],
                                );
                                $result['reason'] = $respo['reason'];
                                DiamondInvalid::insert($result);
                                $invalid++;
                            }
                            $j++;
                        }
                        $i++;
                    }
                }
                if ($flag) {
                    $stock_upload_report = array(
                        'supplier_id' => $supplier->sup_id,
                        'no_of_stone' => $j,
                        'valid_diamond' => $valid,
                        'invalid_diamond' => $invalid,
                        'upload_mode' => 'File',
                        'info' => '',
                        'created_at' => date('Y-m-d H:i:s'),
                        'file_updated_at' => date('Y-m-d H:i:s'),
                    );
                    $load_id = StockUploadReport::insertGetId($stock_upload_report);

                    $data_response['name'] = $supplier->companyname;
                    $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    function multiRequest($data)
    {
        // initialize the multihandler
        $mh = curl_multi_init();

        $channels = array();
        foreach ($data as $key => $url) {
            // initiate individual channel
            $channels[$key] = curl_init();
            curl_setopt_array($channels[$key], array(
                CURLOPT_URL => $url,
                CURLOPT_RETURNTRANSFER => 1,
                CURLOPT_SSL_VERIFYHOST => 0,
                CURLOPT_SSL_VERIFYPEER => 0,
                CURLOPT_USERAGENT => 'Codular Sample cURL Request'
            ));

            // add channel to multihandler
            curl_multi_add_handle($mh, $channels[$key]);
        }

        // execute - if there is an active connection then keep looping
        $active = null;
        do {
            $status = curl_multi_exec($mh, $active);
        } while ($active && $status == CURLM_OK);

        if ($status != CURLM_OK) {
            // Display error message
            echo 'ERROR!\n ' . curl_multi_strerror($status);
        }
        // echo the content, remove the handlers, then close them
        $result = array();
        $myfile = fopen('jb_api.json', 'w') or die("Can't create file");
        foreach ($channels as $chan) {
            $rese = curl_multi_getcontent($chan);
            fwrite($myfile, $rese);
            // $res = json_decode($res);
            // $result = array_merge($result, $res);
            curl_multi_remove_handle($mh, $chan);
            curl_close($chan);
        }
        fclose($myfile);

        // close the multihandler
        curl_multi_close($mh);
        return $result;
    }

    public function arush()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 376)->first();

        try {
            if (!empty($supplier)) {

                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                for($i = 0; $i < 12; $i++)
                {
                    $data_url[] = 'https://labdiamondinventory.com/api/inventory/661fa182944b88?page='.$i;
                }
                // $curl = curl_init();

                // curl_setopt_array($curl, array(
                //     CURLOPT_URL => 'https://labdiamondinventory.com/api/inventory/661fa182944b88?page=1',
                //     CURLOPT_RETURNTRANSFER => true,
                //     CURLOPT_ENCODING => '',
                //     CURLOPT_MAXREDIRS => 10,
                //     CURLOPT_TIMEOUT => 0,
                //     CURLOPT_FOLLOWLOCATION => true,
                //     CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                //     CURLOPT_CUSTOMREQUEST => 'GET',
                //     CURLOPT_HTTPHEADER => array(
                //         'Authorization: Basic dGhlZGlhbW9uZF9ncm91cF9hbmtpdEBsYWJkaWFtb25kaW52ZW50b3J5LmNvbTpjVGRATCRzZCNMUGRAQWF2ZA=='
                //     ),
                // ));

                // $response = curl_exec($curl);
                // $err = curl_error($curl);
                // if ($err) {
                //     echo "cURL Error #:" . $err;
                // }
                // curl_close($curl);
                // $response = json_decode($response,true);

                $mh = curl_multi_init();

                $channels = array();
                foreach ($data_url as $key => $url) {
                    // initiate individual channel
                    $channels[$key] = curl_init();
                    curl_setopt_array($channels[$key], array(
                        CURLOPT_URL => $url,
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => '',
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 0,
                        CURLOPT_FOLLOWLOCATION => true,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => 'GET',
                        CURLOPT_HTTPHEADER => array(
                            'Authorization: Basic dGhlZGlhbW9uZF9ncm91cF9hbmtpdEBsYWJkaWFtb25kaW52ZW50b3J5LmNvbTpjVGRATCRzZCNMUGRAQWF2ZA=='
                        ),
                    ));

                    // add channel to multihandler
                    curl_multi_add_handle($mh, $channels[$key]);
                }

                // execute - if there is an active connection then keep looping
                $active = null;
                do {
                    $status = curl_multi_exec($mh, $active);
                } while ($active && $status == CURLM_OK);

                if ($status != CURLM_OK) {
                    // Display error message
                    echo 'ERROR!\n ' . curl_multi_strerror($status);
                }
                // echo the content, remove the handlers, then close them
                $result = array();

                foreach ($channels as $chan) {
                    $rese = curl_multi_getcontent($chan);
                    $response = json_decode($rese, true);
                    $result = array_merge($result, $response['data']);
                    curl_multi_remove_handle($mh, $chan);
                    curl_close($chan);
                }
                // close the multihandler
                curl_multi_close($mh);

                if(!empty($result))
                {
                    $sheet_data = $result;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    ## Change title
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            // case 'availability':
                            //         $sheet_data_title[$key] = 'availability';
                            //     break;
                            // case 'stock_id':
                            //         $sheet_data_title[$key] = 'stock #';
                            //     break;
                            // case 'weight':
                            //      $sheet_data_title[$key] = 'weight';
                            //     break;
                            // case 'purity':
                            //      $sheet_data_title[$key] = 'clarity';
                            //     break;
                            case 'cut':
                                    $sheet_data_title[$key] = 'cut grade';
                                break;
                            // case 'report_id':
                            //         $sheet_data_title[$key] = 'certificate #';
                            //     break;
                            case 'pricepercarat':
                                    $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'table%':
                                    $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth%':
                                    $sheet_data_title[$key] = 'depth percent';
                                break;
                            // case 'fls':
                            //      $sheet_data_title[$key] = 'fluorescence intensity';
                            //     break;
                            // case 'symm':
                            //      $sheet_data_title[$key] = 'symmetry';
                            //     break;
                            // case 'crown_angle':
                            //         $sheet_data_title[$key] = 'crown angle';
                            //     break;
                            // case 'crown_height':
                            //         $sheet_data_title[$key] = 'crown height';
                            //     break;
                            // case 'pavilion_angle':
                            //         $sheet_data_title[$key] = 'pavilion angle';
                            //     break;
                            // case 'pavilion_depth':
                            //         $sheet_data_title[$key] = 'pavilion depth';
                            //     break;
                            // case 'country':
                            //      $sheet_data_title[$key] = 'country';
                            //     break;
                            // case 'girdle_cond':
                            //      $sheet_data_title[$key] = 'girdle condition';
                            //     break;
                            // case 'key_to_symbols':
                            //      $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'girdle_per':
                            //         $sheet_data_title[$key] = 'girdle percent';
                            //     break;
                            // case 'culetcon': //africanstar
                            //      $sheet_data_title[$key] = 'culet condition';
                            //     break;
                            // case 'eye_clean':
                            //      $sheet_data_title[$key] = 'eye clean';
                            //     break;
                            // case 'length_1':
                            //      $sheet_data_title[$key] = 'length';
                            //     break;
                            // case 'depth':
                            //      $sheet_data_title[$key] = 'height';
                            // case 'diamond_video':
                            //         $sheet_data_title[$key] = 'video link';
                            //     break;
                            default:
                                    $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Lab Grown ####################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($flag) {
                        $updatestring = '';

                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            $keyvaluepair = array_change_key_case($keyvaluepair, CASE_LOWER);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }
                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'File',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                    print_r($data_response);
                }
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function paladiya_diamond()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 394)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "http://PB.prolanceit.in/api/user/token";
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_RETURNTRANSFER => 1,
                    CURLOPT_URL => $url,
                    CURLOPT_USERAGENT => 'Codular Sample cURL Request',
                    CURLOPT_HTTPHEADER => array(
                        "apiKey: Daoisdhiowerhw8yhcihgidhfsghihfmiofm=="
                    ),
                ));
                $response = curl_exec($curl);
                $response = json_decode($response);

                if(!empty($response) && $response->Status == 200)
                {
                    $token = $response->Token;
                    $url = "http://PB.prolanceit.in/api/stones";
                    $curl = curl_init();
                    curl_setopt_array($curl, array(
                        CURLOPT_RETURNTRANSFER => 1,
                        CURLOPT_URL => $url,
                        CURLOPT_USERAGENT => 'Codular Sample cURL Request',
                        CURLOPT_HTTPHEADER => array(
                            "token: $token"
                        ),
                    ));
                    $response1 = curl_exec($curl);
                    $err = curl_error($curl);
                    curl_close($curl);
                    if ($err) {
                        echo "cURL Error #:" . $err; die;
                    }
                    $sheet_data = json_decode($response1, true);

                    if(!empty($sheet_data))
                    {
                        $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                        ## Change title
                        if ($supplier->diamond_type == 'Natural') {
                            $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                        } else {
                            $sheet_data_title = AppHelper::ChangeExcelTitleLabGrown($sheet_data_title);
                        }

                        $sheet_data_title[9] = 'fluorescence intensity';
                        $sheet_data_title[10] = 'fluorescence color';
                        $sheet_data_title[15] = '$/ct';
                        $sheet_data_title[23] = 'girdlethick';
                        $sheet_data_title[25] = 'removed_girdle_condition';
                        $sheet_data_title[27] = 'removed_culet_condition';

                        $shiping_price_array = AppHelper::shipingPriceArray();
                        $s_price_array = AppHelper::sPriceArray($supplier);

                        ###################################################
                        #################### Natural ######################
                        ###################################################

                        $updatedelete = 1;
                        DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                        DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                        if ($supplier->stock_status == 'ACTIVE') {
                        } else {
                            DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                        }

                        $flag = true;
                        $i = 1;
                        $valid = 0;
                        $invalid = 0;
                        $j = 0;

                        if ($updatedelete) {
                            foreach ($sheet_data as $value) {
                                $keyvaluepair = array_combine($sheet_data_title, $value);

                                if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                    if (empty(trim(@$keyvaluepair['certificate #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Certificate Blank";
                                    } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Stock ID Blank";
                                    } else {
                                        $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                        if ($shape == "") {
                                            $respo['success'] = false;
                                            $respo['reason'] = "Shape";
                                        } else {
                                            $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                        }
                                    }

                                    if ($respo['success']) {
                                        $cut = '';
                                        $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                        if ($shape == "ROUND") {
                                            $C_shape = "round";
                                            $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                            $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                            $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                            $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                            $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                        } else {
                                            $C_shape = "pear";
                                        }

                                        if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                            $color = 'fancy';
                                            $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                            $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                            $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                            $cut = '';
                                        } else {
                                            $f_color = $f_intensity = $f_overtone = '';
                                            $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                        }

                                        $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }
                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'L',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );

                                        $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                        $valid++;
                                    } else {
                                        if (@$keyvaluepair['girdle %'] != '') {
                                            $gridle_per = @$keyvaluepair['girdle %'];
                                        } else {
                                            $gridle_per = '0';
                                        }

                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                        }

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => @$keyvaluepair['shape'],
                                            'carat' => @$keyvaluepair['weight'],
                                            'color' => @$keyvaluepair['color'],
                                            'clarity' => @$keyvaluepair['clarity'],
                                            'cut' => @$keyvaluepair['cut grade'],
                                            'polish' => @$keyvaluepair['polish'],
                                            'symmetry' => @$keyvaluepair['symmetry'],
                                            'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'lab' => @$keyvaluepair['lab'],
                                            'certificate_no' => @$keyvaluepair['certificate #'],
                                            'cert_comment' => @$keyvaluepair['report comments'],
                                            'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                            'fancy_color' => @$keyvaluepair['fancy color'],
                                            'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                            'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'girdle_thin' => @$keyvaluepair['girdle thin'],
                                            'girdle_thick' => @$keyvaluepair['girdle thick'],
                                            'gridle' => @$keyvaluepair['girdle condition'],
                                            'cutlet' => @$keyvaluepair['culet'],
                                            'gridle_per' => @$keyvaluepair['girdle percent'],
                                            'crown_height' => @$keyvaluepair['crown height'],
                                            'crown_angle' => @$keyvaluepair['crown angle'],
                                            'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                            'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                            'country' => @$keyvaluepair['country'],
                                            'city' => @$keyvaluepair['city'],
                                            'image' => @$keyvaluepair['image link'],
                                            'video' => trim(@$keyvaluepair['video link']),
                                            'heart' => @$keyvaluepair['heart image'],
                                            'arrow' => @$keyvaluepair['arrow image'],
                                            'asset' => @$keyvaluepair['aset image'],
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'milky' => @$keyvaluepair['milky'],
                                            'eyeclean' => @$keyvaluepair['eye clean'],
                                            'availability' => @$keyvaluepair['availability'],
                                            'shade' => @$keyvaluepair['shade'],
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => @$keyvaluepair['luster'],
                                            'culet_condition' => @$keyvaluepair['culet condition'],
                                        );
                                        $result['reason'] = $respo['reason'];
                                        DiamondInvalid::insert($result);
                                        $invalid++;
                                    }
                                    $j++;
                                }
                                $i++;
                            }
                        }

                        if ($flag) {
                            $stock_upload_report = array(
                                'supplier_id' => $supplier->sup_id,
                                'no_of_stone' => $j,
                                'valid_diamond' => $valid,
                                'invalid_diamond' => $invalid,
                                'upload_mode' => 'File',
                                'info' => '',
                                'created_at' => date('Y-m-d H:i:s'),
                                'file_updated_at' => date('Y-m-d H:i:s'),
                            );
                            $load_id = StockUploadReport::insertGetId($stock_upload_report);

                            $data_response['name'] = $supplier->companyname;
                            $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                        }
                        print_r($data_response);
                    }
                }

                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function paldiam() //no conflict API
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 397)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "http://paldiam.diamx.net/API/StockSearch?APIToken=812e795b-ea78-4ac8-a2cc-1b3cb5392b1f";
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/json',
                        'Content-Length: 0'
                    ),
                ));
                $resp = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }
                $response = json_decode($resp, true);

                $sheet_data = $response['StoneList']; ## Create variable $sheet_data from response of result
                $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                ## Change title
                foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                    $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                    switch ($SheetTitleArrayElementreplacelower) {
                        case 'stockstatus':
                            $sheet_data_title[$key] = 'availability';
                            break;
                        case 'stone_no':
                            $sheet_data_title[$key] = 'stock #';
                            break;
                        case 'lab_report_no':
                            $sheet_data_title[$key] = 'certificate #';
                            break;
                        case 'salerate':
                            $sheet_data_title[$key] = '$/ct';
                            break;
                        case 'measurement':
                            $sheet_data_title[$key] = 'measurements';
                            break;
                        case 'table_diameter_per':
                            $sheet_data_title[$key] = 'table percent';
                            break;
                        case 'total_depth_per':
                            $sheet_data_title[$key] = 'depth percent';
                            break;
                        case 'flrintens':
                            $sheet_data_title[$key] = 'fluorescence intensity';
                            break;
                        case 'video_url':
                            $sheet_data_title[$key] = 'video';
                            break;
                        case 'stone_img_url':
                            $sheet_data_title[$key] = 'image link';
                            break;
                        case 'symm':
                            $sheet_data_title[$key] = 'symmetry';
                            break;
                        case 'crownangle':
                            $sheet_data_title[$key] = 'crown angle';
                            break;
                        case 'crownheight':
                            $sheet_data_title[$key] = 'crown height';
                            break;
                        case 'pavillionangle':
                            $sheet_data_title[$key] = 'pavilion angle';
                            break;
                        case 'pavillionheight':
                            $sheet_data_title[$key] = 'pavilion depth';
                            break;
                        case 'location':
                            $sheet_data_title[$key] = 'country';
                            break;
                        case 'girdlecon':
                            $sheet_data_title[$key] = 'girdle condition';
                            break;
                        case 'fcolor':
                            $sheet_data_title[$key] = 'fancy color';
                            break;
                        case 'fcintens':
                            $sheet_data_title[$key] = 'fancy color intensity';
                            break;
                        case 'keytosymbols':
                            $sheet_data_title[$key] = 'key to symbols';
                            break;
                        case 'girdle_per':
                            $sheet_data_title[$key] = 'girdle %';
                            break;
                        case 'culetsize':
                            $sheet_data_title[$key] = 'culet';
                            break;
                        case 'eyeclean':
                            $sheet_data_title[$key] = 'eye clean';
                            break;
                        case 'stone_comment':
                            $sheet_data_title[$key] = 'supplier comments';
                            break;
                        case 'girdlethin_id':
                            $sheet_data_title[$key] = 'girdle thin';
                            break;
                        case 'girdlethick_id':
                            $sheet_data_title[$key] = 'girdle thick';
                            break;
                        case 'tinge':
                            $sheet_data_title[$key] = 'shade';
                            break;
                        case 'shade':
                            $sheet_data_title[$key] = 'empty_shade';
                            break;
                        default:
                            $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                    }
                }

                $shiping_price_array = AppHelper::shipingPriceArray();
                $s_price_array = AppHelper::sPriceArray($supplier);

                ###################################################
                #################### Lab Grown ######################
                ###################################################

                $updatedelete = 1;
                DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                if ($supplier->stock_status == 'ACTIVE') {
                } else {
                    DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                }

                $flag = true;
                $i = 1;
                $valid = 0;
                $invalid = 0;
                $j = 0;

                if ($updatedelete) {
                    foreach ($sheet_data as $value) {
                        $keyvaluepair = array_combine($sheet_data_title, $value);

                        if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                            if (empty(trim(@$keyvaluepair['certificate #']))) {
								$respo['success'] = false;
								$respo['reason'] = "Certificate Blank";
							} elseif (empty(trim(@$keyvaluepair['stock #']))) {
								$respo['success'] = false;
								$respo['reason'] = "Stock ID Blank";
							} else {
								$shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
								if ($shape == "") {
									$respo['success'] = false;
									$respo['reason'] = "Shape";
								} else {
									$respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
								}
							}

                            if ($respo['success']) {
                                $cut = '';
								$Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
								if ($shape == "ROUND") {
									$C_shape = "round";
									$cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
									$Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
									$Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
									$Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
									$Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
								} else {
									$C_shape = "pear";
								}

                                if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
									$color = 'fancy';
									$f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
									$f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
									$f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
									$cut = '';
								} else {
									$f_color = $f_intensity = $f_overtone = '';
									$color = AppHelper::ColorValidation(@$keyvaluepair['color']);
								}

                                $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                if(empty($milky))
                                {
                                    if(isset($keyvaluepair['luster']))
                                    {
                                        $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                        switch($lusterToMilky)
                                        {
                                            case 'excellent':
                                            case 'ex':
                                            case 'verygood':
                                            case 'vg+':
                                                $milky = 'NO MILKY';
                                                break;
                                            case 'lightmilky':
                                                $milky = 'LIGHT MILKY ';
                                                break;
                                            case 'milky':
                                                $milky = 'MILKY';
                                                break;
                                        }
                                    }
                                }

                                $certi = trim(@$keyvaluepair['certificate #']);
                                $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                if(empty($eyeclean))
                                {
                                    $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                    switch($clarityToeyeclean)
                                    {
                                        case 'fl':
                                        case 'if':
                                        case 'vvs1':
                                        case 'vvs2':
                                        case 'vs1':
                                            $eyeclean = "Yes";
                                            break;
                                    }
                                }

                                $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                $add_dic = 0;
                                if (!empty($s_price_array)) {
                                    $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                }
                                $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                $net_price = round($carat * $newdollerpercarat, 2);

                                $C_Length = $C_Width = $C_Depth = 0;
                                if (@$keyvaluepair['measurements'] != "") {
                                    $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                    $main = explode("x", $mesurment);
                                    $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                    $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                    $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                }
                                else
                                {
                                    $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                    $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                    $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                }

                                $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                $result = array(
                                    'supplier_name' => $supplier->companyname,
                                    'supplier_id' => $supplier->sup_id,
                                    'ref_no' => @$keyvaluepair['stock #'],
                                    'shape' => $shape,
                                    'carat' => $carat,
                                    'color' => $color,
                                    'clarity' => strtoupper($clarity),
                                    'cut' => $cut,
                                    'polish' => $C_Polish,
                                    'symmetry' => $C_Symmetry,
                                    'fluorescence' => $C_Fluorescence,
                                    'orignal_rate' => $dollerpercarat,
                                    'rate' => $newdollerpercarat,
                                    'net_dollar' => $net_price,
                                    'table_per' => @$keyvaluepair['table percent'],
                                    'depth_per' => @$keyvaluepair['depth percent'],
                                    'lab' => $lab,
                                    'fancy_color' => $f_color,
                                    'fancy_intensity' => $f_intensity,
                                    'fancy_overtone' => $f_overtone,
                                    'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                    'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                    'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                    'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                    'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                    'crown_angle' => $Crn_Ag,
                                    'crown_height' => $Crn_Ht,
                                    'pavilion_angle' => $Pav_Ag,
                                    'pavilion_depth' => $Pav_Dp,
                                    'certificate_no' => $certi,
                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                    'country' => $country,
                                    'city' => @$keyvaluepair['city'],
                                    'length' => $C_Length,
                                    'width' => $C_Width,
                                    'depth' => $C_Depth,
                                    'milky' => $milky,
                                    'eyeclean' => $eyeclean,
                                    'image' => $image,
                                    'video' => $video,
                                    'heart' => $heart,
                                    'arrow' => $arrow,
                                    'asset' => $asset,
                                    'diamond_type' => 'L',
                                    'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                    'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                    'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                    'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                    'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                    'is_delete' => '0',
                                );

                                $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                $valid++;
                            } else {
                                if (@$keyvaluepair['girdle %'] != '') {
                                    $gridle_per = @$keyvaluepair['girdle %'];
                                } else {
                                    $gridle_per = '0';
                                }

                                if (@$keyvaluepair['measurements'] != "") {
                                    $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                    $main = explode("x", $mesurment);
                                    $C_Length = (!empty($main[0])) ? $main[0] : '';
                                    $C_Width = (!empty($main[1])) ? $main[1] : '';
                                    $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                }

                                $result = array(
                                    'supplier_name' => $supplier->companyname,
                                    'supplier_id' => $supplier->sup_id,
                                    'ref_no' => @$keyvaluepair['stock #'],
                                    'shape' => @$keyvaluepair['shape'],
                                    'carat' => @$keyvaluepair['weight'],
                                    'color' => @$keyvaluepair['color'],
                                    'clarity' => @$keyvaluepair['clarity'],
                                    'cut' => @$keyvaluepair['cut grade'],
                                    'polish' => @$keyvaluepair['polish'],
                                    'symmetry' => @$keyvaluepair['symmetry'],
                                    'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                    'length' => $C_Length,
                                    'width' => $C_Width,
                                    'depth' => $C_Depth,
                                    'lab' => @$keyvaluepair['lab'],
                                    'certificate_no' => @$keyvaluepair['certificate #'],
                                    'cert_comment' => @$keyvaluepair['report comments'],
                                    'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                    'fancy_color' => @$keyvaluepair['fancy color'],
                                    'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                    'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                    'depth_per' => @$keyvaluepair['depth percent'],
                                    'table_per' => @$keyvaluepair['table percent'],
                                    'girdle_thin' => @$keyvaluepair['girdle thin'],
                                    'girdle_thick' => @$keyvaluepair['girdle thick'],
                                    'gridle' => @$keyvaluepair['girdle condition'],
                                    'cutlet' => @$keyvaluepair['culet'],
                                    'gridle_per' => @$keyvaluepair['girdle percent'],
                                    'crown_height' => @$keyvaluepair['crown height'],
                                    'crown_angle' => @$keyvaluepair['crown angle'],
                                    'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                    'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                    'country' => @$keyvaluepair['country'],
                                    'city' => @$keyvaluepair['city'],
                                    'image' => @$keyvaluepair['image link'],
                                    'video' => trim(@$keyvaluepair['video link']),
                                    'heart' => @$keyvaluepair['heart image'],
                                    'arrow' => @$keyvaluepair['arrow image'],
                                    'asset' => @$keyvaluepair['aset image'],
                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                    'milky' => @$keyvaluepair['milky'],
                                    'eyeclean' => @$keyvaluepair['eye clean'],
                                    'availability' => @$keyvaluepair['availability'],
                                    'shade' => @$keyvaluepair['shade'],
                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                    'luster' => @$keyvaluepair['luster'],
                                    'culet_condition' => @$keyvaluepair['culet condition'],
                                );
                                $result['reason'] = $respo['reason'];
                                DiamondInvalid::insert($result);
                                $invalid++;
                            }
                            $j++;
                        }
                        $i++;
                    }
                }

                if ($flag) {
                    $stock_upload_report = array(
                        'supplier_id' => $supplier->sup_id,
                        'no_of_stone' => $j,
                        'valid_diamond' => $valid,
                        'invalid_diamond' => $invalid,
                        'upload_mode' => 'API',
                        'info' => '',
                        'created_at' => date('Y-m-d H:i:s'),
                        'file_updated_at' => date('Y-m-d H:i:s'),
                    );
                    $load_id = StockUploadReport::insertGetId($stock_upload_report);

                    $data_response['name'] = $supplier->companyname;
                    $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function shivamjewels()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 253)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "https://sjworldapi.azurewebsites.net/share/sjapi.asmx/GetData?LoginName=RK&PassWord=RK321";
                // $url = "https://sjworldapi.azurewebsites.net/share/sjapi.asmx/GetData?LoginName=vrustar&PassWord=vrustar321";
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 300,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "GET",
                    CURLOPT_POSTFIELDS => "",
                    CURLOPT_HTTPHEADER => array(
                        "Accept: */*",
                        "Cache-Control: no-cache",
                        "Connection: keep-alive",
                        "accept-encoding: gzip, deflate"
                    ),
                ));
                $result = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                }
                $response = json_decode($result, true);
                if(!empty($response['Result']))
                {
                    $sheet_data = $response['Result']; ## Create variable $sheet_data from response of result
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    //Change title
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'stock':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'percarat':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'table':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'fluorescencecolor':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'girdlethin':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            case 'keytosymbols':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'culetsize':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty(@$keyvaluepair['certificate #']) && @$keyvaluepair['weight'] > 0 && !empty(@$keyvaluepair['color']) && @$keyvaluepair['availability'] == "Subject to Prior Sale" && (@$keyvaluepair['lab'] === "GIA" || @$keyvaluepair['lab'] === "IGI" || @$keyvaluepair['lab'] === "HRD")) {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }
                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'W',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'File',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                    print_r($data_response);
                    // $this->benchmark->mark('code_end');
                    // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                    // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                }
                else
                {
                    print_r($response);
                }
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function supremeexports() //no conflict API
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 393)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "http://supreme.diamx.net/API/StockSearch?APIToken=a27d8570-0caf-4179-be43-c768d1c75a76";
                $curl = curl_init($url);
                curl_setopt($curl, CURLOPT_URL, $url);
                curl_setopt($curl, CURLOPT_POST, true);
                curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
                $headers = array(
                    "Content-Type: application/json",
                    "Content-Length: 0",
                );
                curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
                $resp = curl_exec($curl);
                curl_close($curl);

                $response = json_decode($resp, true);
                $sheet_data = $response['StoneList']; ## Create variable $sheet_data from response of result
                $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                ## Change title
                foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                    $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                    switch ($SheetTitleArrayElementreplacelower) {
                        case 'stockstatus':
                            $sheet_data_title[$key] = 'availability';
                            break;
                        case 'stone_no':
                            $sheet_data_title[$key] = 'stock #';
                            break;
                        case 'lab_report_no':
                            $sheet_data_title[$key] = 'certificate #';
                            break;
                        case 'salerate':
                            $sheet_data_title[$key] = '$/ct';
                            break;
                        case 'measurement':
                            $sheet_data_title[$key] = 'measurements';
                            break;
                        case 'table_diameter_per':
                            $sheet_data_title[$key] = 'table percent';
                            break;
                        case 'total_depth_per':
                            $sheet_data_title[$key] = 'depth percent';
                            break;
                        case 'flrintens':
                            $sheet_data_title[$key] = 'fluorescence intensity';
                            break;
                        case 'video_url':
                            $sheet_data_title[$key] = 'video';
                            break;
                        case 'stone_img_url':
                            $sheet_data_title[$key] = 'image link';
                            break;
                        case 'symm':
                            $sheet_data_title[$key] = 'symmetry';
                            break;
                        case 'crownangle':
                            $sheet_data_title[$key] = 'crown angle';
                            break;
                        case 'crownheight':
                            $sheet_data_title[$key] = 'crown height';
                            break;
                        case 'pavillionangle':
                            $sheet_data_title[$key] = 'pavilion angle';
                            break;
                        case 'pavillionheight':
                            $sheet_data_title[$key] = 'pavilion depth';
                            break;
                        case 'location':
                            $sheet_data_title[$key] = 'country';
                            break;
                        case 'girdlecon':
                            $sheet_data_title[$key] = 'girdle condition';
                            break;
                        case 'fcolor':
                            $sheet_data_title[$key] = 'fancy color';
                            break;
                        case 'fcintens':
                            $sheet_data_title[$key] = 'fancy color intensity';
                            break;
                        case 'keytosymbols':
                            $sheet_data_title[$key] = 'key to symbols';
                            break;
                        case 'girdle_per':
                            $sheet_data_title[$key] = 'girdle %';
                            break;
                        case 'culetsize':
                            $sheet_data_title[$key] = 'culet';
                            break;
                        case 'eyeclean':
                            $sheet_data_title[$key] = 'eye clean';
                            break;
                        case 'stone_comment':
                            $sheet_data_title[$key] = 'supplier comments';
                            break;
                        case 'girdlethin_id':
                            $sheet_data_title[$key] = 'girdle thin';
                            break;
                        case 'girdlethick_id':
                            $sheet_data_title[$key] = 'girdle thick';
                            break;
                        case 'tinge':
                            $sheet_data_title[$key] = 'shade';
                            break;
                        case 'shade':
                            $sheet_data_title[$key] = 'empty_shade';
                            break;
                        default:
                            $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                    }
                }

                $shiping_price_array = AppHelper::shipingPriceArray();
                $s_price_array = AppHelper::sPriceArray($supplier);

                ###################################################
                #################### Natural ######################
                ###################################################

                $updatedelete = 1;
                DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                if ($supplier->stock_status == 'ACTIVE') {
                } else {
                    DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                }

                $flag = true;
                $i = 1;
                $valid = 0;
                $invalid = 0;
                $j = 0;

                if ($updatedelete) {
                    foreach ($sheet_data as $value) {
                        $keyvaluepair = array_combine($sheet_data_title, $value);

                        if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                            if (empty(trim(@$keyvaluepair['certificate #']))) {
								$respo['success'] = false;
								$respo['reason'] = "Certificate Blank";
							} elseif (empty(trim(@$keyvaluepair['stock #']))) {
								$respo['success'] = false;
								$respo['reason'] = "Stock ID Blank";
							} else {
								$shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
								if ($shape == "") {
									$respo['success'] = false;
									$respo['reason'] = "Shape";
								} else {
									$respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
								}
							}

                            if ($respo['success']) {
                                $cut = '';
								$Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
								if ($shape == "ROUND") {
									$C_shape = "round";
									$cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
									$Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
									$Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
									$Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
									$Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
								} else {
									$C_shape = "pear";
								}

                                if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
									$color = 'fancy';
									$f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
									$f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
									$f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
									$cut = '';
								} else {
									$f_color = $f_intensity = $f_overtone = '';
									$color = AppHelper::ColorValidation(@$keyvaluepair['color']);
								}

                                $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                if(empty($milky))
                                {
                                    if(isset($keyvaluepair['luster']))
                                    {
                                        $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                        switch($lusterToMilky)
                                        {
                                            case 'excellent':
                                            case 'ex':
                                            case 'verygood':
                                            case 'vg+':
                                                $milky = 'NO MILKY';
                                                break;
                                            case 'lightmilky':
                                                $milky = 'LIGHT MILKY ';
                                                break;
                                            case 'milky':
                                                $milky = 'MILKY';
                                                break;
                                        }
                                    }
                                }

                                $certi = trim(@$keyvaluepair['certificate #']);
                                $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                if(empty($eyeclean))
                                {
                                    $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                    switch($clarityToeyeclean)
                                    {
                                        case 'fl':
                                        case 'if':
                                        case 'vvs1':
                                        case 'vvs2':
                                        case 'vs1':
                                            $eyeclean = "Yes";
                                            break;
                                    }
                                }

                                $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                $add_dic = 0;
                                if (!empty($s_price_array)) {
                                    $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                }
                                $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                $net_price = round($carat * $newdollerpercarat, 2);

                                $C_Length = $C_Width = $C_Depth = 0;
                                if (@$keyvaluepair['measurements'] != "") {
                                    $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                    $main = explode("x", $mesurment);
                                    $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                    $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                    $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                }
                                else
                                {
                                    $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                    $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                    $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                }

                                $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                $result = array(
                                    'supplier_name' => $supplier->companyname,
                                    'supplier_id' => $supplier->sup_id,
                                    'ref_no' => @$keyvaluepair['stock #'],
                                    'shape' => $shape,
                                    'carat' => $carat,
                                    'color' => $color,
                                    'clarity' => strtoupper($clarity),
                                    'cut' => $cut,
                                    'polish' => $C_Polish,
                                    'symmetry' => $C_Symmetry,
                                    'fluorescence' => $C_Fluorescence,
                                    'orignal_rate' => $dollerpercarat,
                                    'rate' => $newdollerpercarat,
                                    'net_dollar' => $net_price,
                                    'table_per' => @$keyvaluepair['table percent'],
                                    'depth_per' => @$keyvaluepair['depth percent'],
                                    'lab' => $lab,
                                    'fancy_color' => $f_color,
                                    'fancy_intensity' => $f_intensity,
                                    'fancy_overtone' => $f_overtone,
                                    'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                    'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                    'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                    'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                    'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                    'crown_angle' => $Crn_Ag,
                                    'crown_height' => $Crn_Ht,
                                    'pavilion_angle' => $Pav_Ag,
                                    'pavilion_depth' => $Pav_Dp,
                                    'certificate_no' => $certi,
                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                    'country' => $country,
                                    'city' => @$keyvaluepair['city'],
                                    'length' => $C_Length,
                                    'width' => $C_Width,
                                    'depth' => $C_Depth,
                                    'milky' => $milky,
                                    'eyeclean' => $eyeclean,
                                    'image' => $image,
                                    'video' => $video,
                                    'heart' => $heart,
                                    'arrow' => $arrow,
                                    'asset' => $asset,
                                    'diamond_type' => 'W',
                                    'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                    'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                    'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                    'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                    'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                    'is_delete' => '0',
                                );

                                $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                $valid++;
                            } else {
                                if (@$keyvaluepair['girdle %'] != '') {
                                    $gridle_per = @$keyvaluepair['girdle %'];
                                } else {
                                    $gridle_per = '0';
                                }

                                if (@$keyvaluepair['measurements'] != "") {
                                    $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                    $main = explode("x", $mesurment);
                                    $C_Length = (!empty($main[0])) ? $main[0] : '';
                                    $C_Width = (!empty($main[1])) ? $main[1] : '';
                                    $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                }

                                $result = array(
                                    'supplier_name' => $supplier->companyname,
                                    'supplier_id' => $supplier->sup_id,
                                    'ref_no' => @$keyvaluepair['stock #'],
                                    'shape' => @$keyvaluepair['shape'],
                                    'carat' => @$keyvaluepair['weight'],
                                    'color' => @$keyvaluepair['color'],
                                    'clarity' => @$keyvaluepair['clarity'],
                                    'cut' => @$keyvaluepair['cut grade'],
                                    'polish' => @$keyvaluepair['polish'],
                                    'symmetry' => @$keyvaluepair['symmetry'],
                                    'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                    'length' => $C_Length,
                                    'width' => $C_Width,
                                    'depth' => $C_Depth,
                                    'lab' => @$keyvaluepair['lab'],
                                    'certificate_no' => @$keyvaluepair['certificate #'],
                                    'cert_comment' => @$keyvaluepair['report comments'],
                                    'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                    'fancy_color' => @$keyvaluepair['fancy color'],
                                    'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                    'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                    'depth_per' => @$keyvaluepair['depth percent'],
                                    'table_per' => @$keyvaluepair['table percent'],
                                    'girdle_thin' => @$keyvaluepair['girdle thin'],
                                    'girdle_thick' => @$keyvaluepair['girdle thick'],
                                    'gridle' => @$keyvaluepair['girdle condition'],
                                    'cutlet' => @$keyvaluepair['culet'],
                                    'gridle_per' => @$keyvaluepair['girdle percent'],
                                    'crown_height' => @$keyvaluepair['crown height'],
                                    'crown_angle' => @$keyvaluepair['crown angle'],
                                    'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                    'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                    'country' => @$keyvaluepair['country'],
                                    'city' => @$keyvaluepair['city'],
                                    'image' => @$keyvaluepair['image link'],
                                    'video' => trim(@$keyvaluepair['video link']),
                                    'heart' => @$keyvaluepair['heart image'],
                                    'arrow' => @$keyvaluepair['arrow image'],
                                    'asset' => @$keyvaluepair['aset image'],
                                    'key_symbols' => @$keyvaluepair['key to symbol'],
                                    'milky' => @$keyvaluepair['milky'],
                                    'eyeclean' => @$keyvaluepair['eye clean'],
                                    'availability' => @$keyvaluepair['availability'],
                                    'shade' => @$keyvaluepair['shade'],
                                    'supplier_comments' => @$keyvaluepair['supplier comments'],
                                    'luster' => @$keyvaluepair['luster'],
                                    'culet_condition' => @$keyvaluepair['culet condition'],
                                );
                                $result['reason'] = $respo['reason'];
                                DiamondInvalid::insert($result);
                                $invalid++;
                            }
                            $j++;
                        }
                        $i++;
                    }
                }

                if ($flag) {
                    $stock_upload_report = array(
                        'supplier_id' => $supplier->sup_id,
                        'no_of_stone' => $j,
                        'valid_diamond' => $valid,
                        'invalid_diamond' => $invalid,
                        'upload_mode' => 'File',
                        'info' => '',
                        'created_at' => date('Y-m-d H:i:s'),
                        'file_updated_at' => date('Y-m-d H:i:s'),
                    );
                    $load_id = StockUploadReport::insertGetId($stock_upload_report);

                    $data_response['name'] = $supplier->companyname;
                    $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function smilingRock()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 420)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "https://api.b2bsmilingrocks.com/api/access/login";
                $curl = curl_init();
                    curl_setopt_array($curl, array(
                        CURLOPT_URL => $url,
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => '',
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 0,
                        CURLOPT_SSL_VERIFYHOST => 0,
                        CURLOPT_SSL_VERIFYPEER => 0,
                        CURLOPT_FOLLOWLOCATION => true,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => 'POST',
                        CURLOPT_POSTFIELDS =>'{
                            "USER_NAME": "dhaval@thediamondport.com",
                            "PASSWORD": "goodluck",
                            "DEVICE": "API"
                        }',
                        CURLOPT_HTTPHEADER => array(
                            'Content-Type: application/json'
                        ),
                    ));
                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                }
                $response = json_decode($response);

                if(!empty($response->SEQ_NO) && !empty($response->TOKAN_NO))
                {
                    $url = "https://api.b2bsmilingrocks.com/api/diamond/diamond-list";
                    $curl = curl_init();
                    curl_setopt_array($curl, array(
                        CURLOPT_URL => $url,
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => '',
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 0,
                        CURLOPT_SSL_VERIFYHOST => 0,
                        CURLOPT_SSL_VERIFYPEER => 0,
                        CURLOPT_FOLLOWLOCATION => true,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => 'POST',
                        CURLOPT_POSTFIELDS =>'{
                        "TOKAN_NO": '.$response->TOKAN_NO.',
                        "USER_SEQ": '.$response->SEQ_NO.',
                        "LOGIN_USER_SEQ": '.$response->SEQ_NO.',
                        "STOCK_TYPE": "LIST",
                        "START": "0",
                        "END": "2200",
                        "SORTBY": null,
                        "DRAW": 0,
                        "SAVE_HISTORY": true
                        }',
                        CURLOPT_HTTPHEADER => array(
                            'Content-Type: application/json'
                        ),
                    ));

                    $response = curl_exec($curl);
                    $err = curl_error($curl);
                    curl_close($curl);

                    if ($err) {
                        echo "cURL Error #:" . $err;
                    }
                    $response = json_decode($response, true);

                    if($response['Status'] == "SUCCESS")
                    {
                        $sheet_data = $response['data'];
                        $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                        foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                            $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                            // print_r($SheetTitleArrayElementreplacelower);echo "<br/>";
                            switch ($SheetTitleArrayElementreplacelower) {
                                case 'carat':
                                    $sheet_data_title[$key] = 'weight';
                                    break;
                                case 'packet_no':
                                    $sheet_data_title[$key] = 'stock #';
                                    break;
                                case 'cut':
                                    $sheet_data_title[$key] = 'cut grade';
                                    break;
                                case 'report_no':
                                    $sheet_data_title[$key] = 'certificate #';
                                    break;
                                case 'net_rate':
                                    $sheet_data_title[$key] = '$/ct';
                                    break;
                                case 'depth':
                                    $sheet_data_title[$key] = 'height';
                                    break;
                                case 'table_per':
                                    $sheet_data_title[$key] = 'table percent';
                                    break;
                                case 'depth_per':
                                    $sheet_data_title[$key] = 'depth percent';
                                    break;
                                case 'symm':
                                    $sheet_data_title[$key] = 'symmetry';
                                    break;
                                case 'fls':
                                    $sheet_data_title[$key] = 'fluorescence intensity';
                                    break;
                                // case 'video_url':
                                //     $sheet_data_title[$key] = 'video';
                                //     break;
                                case 'real_image':
                                    $sheet_data_title[$key] = 'image link';
                                    break;
                                case 'cr_angle':
                                    $sheet_data_title[$key] = 'crown angle';
                                    break;
                                case 'cr_height':
                                    $sheet_data_title[$key] = 'crown height';
                                    break;
                                case 'pav_angle':
                                    $sheet_data_title[$key] = 'pavilion angle';
                                    break;
                                case 'pav_height':
                                    $sheet_data_title[$key] = 'pavilion depth';
                                    break;
                                case 'location':
                                    $sheet_data_title[$key] = 'country';
                                    break;
                                case 'girdle_per':
                                    $sheet_data_title[$key] = 'girdle %';
                                    break;
                                case 'girdle_cond':
                                    $sheet_data_title[$key] = 'girdle condition';
                                    break;
                                // case 'fcolor':
                                //     $sheet_data_title[$key] = 'fancy color';
                                //     break;
                                // case 'fcintens':
                                //     $sheet_data_title[$key] = 'fancy color intensity';
                                //     break;
                                case 'key_to_symbols':
                                    $sheet_data_title[$key] = 'key to symbols';
                                    break;
                                case 'culet_seq':
                                    $sheet_data_title[$key] = 'culet';
                                    break;
                                // case 'eyeclean':
                                //     $sheet_data_title[$key] = 'eye clean';
                                //     break;
                                // case 'stone_comment':
                                //     $sheet_data_title[$key] = 'supplier comments';
                                //     break;
                                // case 'girdlethin_id':
                                //     $sheet_data_title[$key] = 'girdle thin';
                                //     break;
                                // case 'girdlethick_id':
                                //     $sheet_data_title[$key] = 'girdle thick';
                                //     break;
                                case 'luster':
                                    $sheet_data_title[$key] = 'shade';
                                    break;
                                // case 'shade':
                                //     $sheet_data_title[$key] = 'empty_shade';
                                //     break;
                                default:
                                    $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                            }
                        }

                        $shiping_price_array = AppHelper::shipingPriceArray();
                        $s_price_array = AppHelper::sPriceArray($supplier);

                        ###################################################
                        #################### Lab Grown ######################
                        ###################################################

                        $updatedelete = 1;
                        DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                        DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                        if ($supplier->stock_status == 'ACTIVE') {
                        } else {
                            DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                        }

                        $flag = true;
                        $i = 1;
                        $valid = 0;
                        $invalid = 0;
                        $j = 0;

                        if ($updatedelete) {
                            foreach ($sheet_data as $value) {
                                $keyvaluepair = array_combine($sheet_data_title, $value);

                                if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                    if (empty(trim(@$keyvaluepair['certificate #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Certificate Blank";
                                    } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Stock ID Blank";
                                    } else {
                                        $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                        if ($shape == "") {
                                            $respo['success'] = false;
                                            $respo['reason'] = "Shape";
                                        } else {
                                            $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                        }
                                    }

                                    if ($respo['success']) {
                                        $cut = '';
                                        $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                        if ($shape == "ROUND") {
                                            $C_shape = "round";
                                            $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                            $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                            $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                            $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                            $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                        } else {
                                            $C_shape = "pear";
                                        }

                                        if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                            $color = 'fancy';
                                            $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                            $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                            $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                            $cut = '';
                                        } else {
                                            $f_color = $f_intensity = $f_overtone = '';
                                            $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                        }

                                        $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }
                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'L',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );

                                        $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                        $valid++;
                                    } else {
                                        if (@$keyvaluepair['girdle %'] != '') {
                                            $gridle_per = @$keyvaluepair['girdle %'];
                                        } else {
                                            $gridle_per = '0';
                                        }

                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                        }
                                        else
                                        {
                                            $C_Length = $keyvaluepair['length'];
                                            $C_Width = $keyvaluepair['width'];
                                            $C_Depth = $keyvaluepair['height'];
                                        }

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => @$keyvaluepair['shape'],
                                            'carat' => @$keyvaluepair['weight'],
                                            'color' => @$keyvaluepair['color'],
                                            'clarity' => @$keyvaluepair['clarity'],
                                            'cut' => @$keyvaluepair['cut grade'],
                                            'polish' => @$keyvaluepair['polish'],
                                            'symmetry' => @$keyvaluepair['symmetry'],
                                            'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'lab' => @$keyvaluepair['lab'],
                                            'certificate_no' => @$keyvaluepair['certificate #'],
                                            'cert_comment' => @$keyvaluepair['report comments'],
                                            'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                            'fancy_color' => @$keyvaluepair['fancy color'],
                                            'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                            'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'girdle_thin' => @$keyvaluepair['girdle thin'],
                                            'girdle_thick' => @$keyvaluepair['girdle thick'],
                                            'gridle' => @$keyvaluepair['girdle condition'],
                                            'cutlet' => @$keyvaluepair['culet'],
                                            'gridle_per' => @$keyvaluepair['girdle percent'],
                                            'crown_height' => @$keyvaluepair['crown height'],
                                            'crown_angle' => @$keyvaluepair['crown angle'],
                                            'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                            'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                            'country' => @$keyvaluepair['country'],
                                            'city' => @$keyvaluepair['city'],
                                            'image' => @$keyvaluepair['image link'],
                                            'video' => trim(@$keyvaluepair['video link']),
                                            'heart' => @$keyvaluepair['heart image'],
                                            'arrow' => @$keyvaluepair['arrow image'],
                                            'asset' => @$keyvaluepair['aset image'],
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'milky' => @$keyvaluepair['milky'],
                                            'eyeclean' => @$keyvaluepair['eye clean'],
                                            'availability' => @$keyvaluepair['availability'],
                                            'shade' => @$keyvaluepair['shade'],
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => @$keyvaluepair['luster'],
                                            'culet_condition' => @$keyvaluepair['culet condition'],
                                        );
                                        $result['reason'] = $respo['reason'];
                                        DiamondInvalid::insert($result);
                                        $invalid++;
                                    }
                                    $j++;
                                }
                                $i++;
                            }
                        }

                        if ($flag) {
                            $stock_upload_report = array(
                                'supplier_id' => $supplier->sup_id,
                                'no_of_stone' => $j,
                                'valid_diamond' => $valid,
                                'invalid_diamond' => $invalid,
                                'upload_mode' => 'File',
                                'info' => '',
                                'created_at' => date('Y-m-d H:i:s'),
                                'file_updated_at' => date('Y-m-d H:i:s'),
                            );
                            $load_id = StockUploadReport::insertGetId($stock_upload_report);

                            $data_response['name'] = $supplier->companyname;
                            $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                        }
                    }

                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function snjdiam()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 556)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "https://snjdiam.com/ShareStock/Api?loginname=thediamondport&password=snj456";
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_SSL_VERIFYHOST => 0,
                    CURLOPT_SSL_VERIFYPEER => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'GET',
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                }
                $response = json_decode($response, true);

                if($response['Success'] == true)
                {
                    $sheet_data = $response['Result'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        // print_r($SheetTitleArrayElementreplacelower);echo "<br/>";
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'shpname':
                                $sheet_data_title[$key] = 'shape';
                                break;
                            case 'calname':
                                $sheet_data_title[$key] = 'clarity';
                                break;
                            case 'sid':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'flo':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            // case 'cut':
                            //     $sheet_data_title[$key] = 'cut grade';
                            //     break;
                            case 'crname':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            // case 'net_rate':
                            //     $sheet_data_title[$key] = '$/ct';
                            //     break;
                            // case 'depth':
                            //     $sheet_data_title[$key] = 'height';
                            //     break;
                            case 'tab':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            // case 'depth_per':
                            //     $sheet_data_title[$key] = 'depth percent';
                            //     break;
                            // case 'symm':
                            //     $sheet_data_title[$key] = 'symmetry';
                            //     break;

                            case 'movielink':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            // case 'real_image':
                            //     $sheet_data_title[$key] = 'image link';
                            //     break;
                            // case 'cr_angle':
                            //     $sheet_data_title[$key] = 'crown angle';
                            //     break;
                            // case 'cr_height':
                            //     $sheet_data_title[$key] = 'crown height';
                            //     break;
                            // case 'pav_angle':
                            //     $sheet_data_title[$key] = 'pavilion angle';
                            //     break;
                            // case 'pav_height':
                            //     $sheet_data_title[$key] = 'pavilion depth';
                            //     break;
                            // case 'location':
                            //     $sheet_data_title[$key] = 'country';
                            //     break;
                            // case 'girdle_per':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            // case 'girdle_cond':
                            //     $sheet_data_title[$key] = 'girdle condition';
                            //     break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'key_to_symbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'culet_seq':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            // case 'eyeclean':
                            //     $sheet_data_title[$key] = 'eye clean';
                            //     break;
                            // case 'stone_comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            // case 'luster':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            // case 'shade':
                            //     $sheet_data_title[$key] = 'empty_shade';
                            //     break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'W',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }


    public function narolabrothers()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 807)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $url = "https://pckngndsrv.azurewebsites.net/admin/StockShare/StockShareAPIResult?username=TDPRK2022&Access_Key=QTHL-N79T-E9RN-DFJR-NYG9-EGI3-H4HF";
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => $url,
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_SSL_VERIFYHOST => 0,
                    CURLOPT_SSL_VERIFYPEER => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'GET',
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                }
                $response = json_decode($response, true);

                if(!empty($response) && $response['success'] == true)
                {
                    $sheet_data = $response['data'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        // print_r($SheetTitleArrayElementreplacelower);echo "<br/>";
                        switch ($SheetTitleArrayElementreplacelower) {
                            // case 'shpname':
                            //     $sheet_data_title[$key] = 'shape';
                            //     break;
                            // case 'shpname':
                            //     $sheet_data_title[$key] = 'clarity';
                            //     break;
                            // case 'sid':
                            //     $sheet_data_title[$key] = 'stock #';
                            //     break;
                            // case 'cut':
                            //     $sheet_data_title[$key] = 'cut grade';
                            //     break;
                            case 'certiname':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'certino':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'percarat':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            // case 'depth':
                            //     $sheet_data_title[$key] = 'height';
                            //     break;
                            // case 'table_per':
                            //     $sheet_data_title[$key] = 'table percent';
                            //     break;
                            // case 'depth_per':
                            //     $sheet_data_title[$key] = 'depth percent';
                            //     break;
                            // case 'symm':
                            //     $sheet_data_title[$key] = 'symmetry';
                            //     break;
                            // case 'fls':
                            //     $sheet_data_title[$key] = 'fluorescence intensity';
                            //     break;
                            case 'moviepath':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'photopath':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            // case 'cr_angle':
                            //     $sheet_data_title[$key] = 'crown angle';
                            //     break;
                            // case 'cr_height':
                            //     $sheet_data_title[$key] = 'crown height';
                            //     break;
                            // case 'pav_angle':
                            //     $sheet_data_title[$key] = 'pavilion angle';
                            //     break;
                            // case 'pav_height':
                            //     $sheet_data_title[$key] = 'pavilion depth';
                            //     break;
                            // case 'location':
                            //     $sheet_data_title[$key] = 'country';
                            //     break;
                            // case 'girdle_per':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            // case 'girdle_cond':
                            //     $sheet_data_title[$key] = 'girdle condition';
                            //     break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'key_to_symbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'culet_seq':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            // case 'eyeclean':
                            //     $sheet_data_title[$key] = 'eye clean';
                            //     break;
                            // case 'stone_comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            // case 'luster':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            // case 'shade':
                            //     $sheet_data_title[$key] = 'empty_shade';
                            //     break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'W',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function BlueEarth()
    {

        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 557)->first();
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();

                curl_setopt_array($curl, array(
                CURLOPT_URL => 'http://r3x.01a.mywebsitetransfer.com/public/api/get_stock?APIToken=MtVLHlfvytabXX8c0yfjKKArNL1fOJcM',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'POST',
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                }
                $response = json_decode($response, true);

                if($response['ApiStatus'] == true)
                {
                    $sheet_data = $response['StoneList'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }


                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'shpname':
                                $sheet_data_title[$key] = 'shape';
                                break;
                            case 'calname':
                                $sheet_data_title[$key] = 'clarity';
                                break;
                            case 'stone_no':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'flo':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'lab_report_no':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            // case 'cut':
                            //     $sheet_data_title[$key] = 'cut grade';
                            //     break;
                            case 'crname':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'salerate':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            // case 'depth':
                            //     $sheet_data_title[$key] = 'height';
                            //     break;
                            case 'table_diameter_per':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'total_depth_per':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'symm':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'video_url':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            // case 'real_image':
                            //     $sheet_data_title[$key] = 'image link';
                            //     break;
                            // case 'cr_angle':
                            //     $sheet_data_title[$key] = 'crown angle';
                            //     break;
                            // case 'cr_height':
                            //     $sheet_data_title[$key] = 'crown height';
                            //     break;
                            // case 'pav_angle':
                            //     $sheet_data_title[$key] = 'pavilion angle';
                            //     break;
                            // case 'pav_height':
                            //     $sheet_data_title[$key] = 'pavilion depth';
                            //     break;
                            // case 'location':
                            //     $sheet_data_title[$key] = 'country';
                            //     break;
                            // case 'girdle_per':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            // case 'girdle_cond':
                            //     $sheet_data_title[$key] = 'girdle condition';
                            //     break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'key_to_symbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'culet_seq':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            // case 'eyeclean':
                            //     $sheet_data_title[$key] = 'eye clean';
                            //     break;
                            // case 'stone_comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            // case 'luster':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            // case 'shade':
                            //     $sheet_data_title[$key] = 'empty_shade';
                            //     break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    // print_r($sheet_data_title);
                    // die;
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function EcoBrilliance()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',318)->first();
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();

                curl_setopt_array($curl, array(
                CURLOPT_URL => 'http://183.87.180.166:9292/token',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_POSTFIELDS => 'username=495&password=495ecoapi&grant_type=password',
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/x-www-form-urlencoded'
                ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }
                $response = json_decode($response);
                $token = $response->access_token;

                $curl = curl_init();

                curl_setopt_array($curl, array(
                  CURLOPT_URL => 'http://183.87.180.166:9292/api/DToW/StockList?dt',
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => '',
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 0,
                  CURLOPT_FOLLOWLOCATION => true,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => 'GET',
                  CURLOPT_HTTPHEADER => array(
                    'Authorization: Bearer '.$token.''
                  ),
                ));

                $response = curl_exec($curl);

                curl_close($curl);
                // echo $response;

                // if ($err) {
                //     echo "cURL Error #:" . $err;
                // }
                $response = json_decode($response, true);
                if($response == true)
                {
                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'cts':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'purity':
                                $sheet_data_title[$key] = 'clarity';
                                break;
                            case 'rowno':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'fls':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'reportno':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'cut grade':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'lab':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'partyrate':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'depth':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthper':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'symm':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'video link':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'mage link':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'ca':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'ch':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pa':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'ph':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'country':
                                $sheet_data_title[$key] = 'country';
                                break;
                            // case 'girdle_per':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            case 'girdle condition':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'key_to_symbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'culet_seq':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            case 'eyeclean':
                                $sheet_data_title[$key] = 'eye clean';
                                break;
                            // case 'stone_comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            // case 'luster':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            case 'shade':
                                $sheet_data_title[$key] = 'empty_shade';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function Jodhani()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 443)->first(); //443
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                // echo "<pre>";
                $curl = curl_init();

                curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://jodhani.in/web_services/jodhani.asmx',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_SSL_VERIFYHOST => false,
                CURLOPT_SSL_VERIFYPEER => false,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'POST',
                CURLOPT_POSTFIELDS =>'<?xml version="1.0" encoding="utf-8"?>
                <soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
                <soap12:Body>
                    <Stock_API xmlns="http://tempuri.org/">
                    <user_name>diamondport</user_name>
                    <password>diam@123</password>
                    </Stock_API>
                </soap12:Body>
                </soap12:Envelope>',
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/soap+xml'
                ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;
                }

                /* $convert = str_replace('<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><soap:Body><GetWebStockResponse xmlns="http://Akarshexports.com/"><GetWebStockResult>', '', $response);
                // $convert1 = str_replace('</GetWebStockResult></GetWebStockResponse></soap:Body></soap:Envelope>', '', $convert);
                // $response = json_decode($convert1, TRUE);*/

                $response = json_decode($response, TRUE);
                print_r($response);
                die;

                if(!empty($response['status'] == 1))
                {
                    $sheet_data = $response['data']; ## Create variable $sheet_data from response of result
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                        // dd($sheet_data);
                        // dd($sheet_data_title);
                    //Change title
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'stock':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'percarat':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'table':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'fluorescencecolor':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'girdlethin':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            case 'keytosymbols':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'culetsize':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty(@$keyvaluepair['certificate #']) && @$keyvaluepair['weight'] > 0 && !empty(@$keyvaluepair['color']) && @$keyvaluepair['availability'] == "Subject to Prior Sale" && (@$keyvaluepair['lab'] === "GIA" || @$keyvaluepair['lab'] === "IGI" || @$keyvaluepair['lab'] === "HRD")) {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }
                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'W',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                    print_r($data_response);
                    // $this->benchmark->mark('code_end');
                    // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                    // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                }
                else
                {
                    print_r($response);
                }
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function AkarshExports()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 648)->first();
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'http://akarshexports.com/GetFullStock.asmx',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS =>'<?xml version="1.0" encoding="utf-8"?>
                    <soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
                    <soap12:Body>
                        <GetWebStock xmlns="http://Akarshexports.com/" />
                    </soap12:Body>
                    </soap12:Envelope>',
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/soap+xml'
                    ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $convert = str_replace('<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><soap:Body><GetWebStockResponse xmlns="http://Akarshexports.com/"><GetWebStockResult>', '', $response);
                $convert1 = str_replace('</GetWebStockResult></GetWebStockResponse></soap:Body></soap:Envelope>', '', $convert);
                $response = json_decode($convert1, TRUE);

                if(!empty($response))
                {
                    $sheet_data = $response; ## Create variable $sheet_data from response of result
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    //Change title
                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(array(' ', '.','_'), '',strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'packetno':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'reportno':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'netrate':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'cts':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'purity':
                                $sheet_data_title[$key] = 'clarity';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'symm':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'fls':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthper':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'depth':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'length1':
                                $sheet_data_title[$key] = 'length';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavillionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'pavillionheight':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'girdlethin':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            case 'keytosymbols':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'eyeclean':
                                $sheet_data_title[$key] = 'eye clean';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'culetsize':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }


                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty(@$keyvaluepair['certificate #']) && @$keyvaluepair['weight'] > 0 && !empty(@$keyvaluepair['color'])) {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }
                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : 0;
                                            $C_Width = (!empty($main[1])) ? $main[1] : 0;
                                            $C_Depth = (!empty($main[2])) ? $main[2] : 0;
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'W',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : 0;
                                        $C_Width = (!empty($main[1])) ? $main[1] : 0;
                                        $C_Depth = (!empty($main[2])) ? $main[2] : 0;
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                    print_r($data_response);
                    // $this->benchmark->mark('code_end');
                    // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                    // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                }
                else
                {
                    print_r($response);
                }
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function Diamspark()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',488)->first();  //488
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();

                curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://www.diamspark.com/DiamSparkServices/GenerelService.svc/FetchStock?sidx=&sord=&page=1&rows=9000&loginUserName=THEDIAMONDPORT&loginPwd=Diamondport@54',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'POST',
                CURLOPT_POSTFIELDS =>'{}',
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json'
                ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;die;
                }

                $response = json_decode($response, true);

                if($response == true)
                {
                    $sheet_data = $response['rows'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'size':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'clarity':
                                $sheet_data_title[$key] = 'clarity';
                                break;
                            case 'stoneid':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'fluorescence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'certificateNo':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'lab':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'price':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            // case 'depth':
                            //     $sheet_data_title[$key] = 'height';
                            //     break;
                            case 'tablepercent':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthpercent':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'symm':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'videourl':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'imageurl':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'country':
                                $sheet_data_title[$key] = 'country';
                                break;
                            // case 'girdle_per':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            case 'girdle condition':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'key_to_symbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'culet_seq':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            case 'eyeclean':
                                $sheet_data_title[$key] = 'eye clean';
                                break;
                            // case 'stone_comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            // case 'luster':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            case 'shade':
                                $sheet_data_title[$key] = 'empty_shade';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function AnkitGems()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 210)->first();
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'https://api1.ankitgems.com:4443/apiuser/logincheck',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS => array('Name' => 'Rkexports','password' => 'Rkexports07'),
                    CURLOPT_HTTPHEADER => array(
                      'Content-Type: application/json'
                    ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;die;
                }

                $response = json_decode($response);
                print_r($response);
                if($response->flag)
                {
                    $token = $response->access_token;
                    $curl = curl_init();
                    curl_setopt_array($curl, array(
                        CURLOPT_URL => 'https://api1.ankitgems.com:4443/apistock/stockdetail',
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => '',
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 0,
                        CURLOPT_FOLLOWLOCATION => true,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => 'POST',
                        CURLOPT_POSTFIELDS => array('page' => '1','limit' => '4000','' => ''),
                        CURLOPT_HTTPHEADER => array(
                            'Authorization: Bearer '.$token.''
                        ),
                    ));
                    $response = curl_exec($curl);
                    $err = curl_error($curl);
                    curl_close($curl);

                    if ($err) {
                        echo "cURL Error #:" . $err;die;
                    }
                    $response = json_decode($response, true);
                    print_r($response);
                    die;
                    if($response == true)
                    {
                        $sheet_data = $response;
                        $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                        if ($supplier->diamond_type == 'Natural') {
                            $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                        } else {
                            $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                        }

                        foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                            $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                            switch ($SheetTitleArrayElementreplacelower) {
                                case 'cts':
                                    $sheet_data_title[$key] = 'weight';
                                    break;
                                case 'purity':
                                    $sheet_data_title[$key] = 'clarity';
                                    break;
                                case 'rowno':
                                    $sheet_data_title[$key] = 'stock #';
                                    break;
                                case 'fls':
                                    $sheet_data_title[$key] = 'fluorescence intensity';
                                    break;
                                case 'reportno':
                                    $sheet_data_title[$key] = 'certificate #';
                                    break;
                                case 'cut grade':
                                    $sheet_data_title[$key] = 'cut grade';
                                    break;
                                case 'lab':
                                    $sheet_data_title[$key] = 'lab';
                                    break;
                                case 'partyvalue':
                                    $sheet_data_title[$key] = '$/ct';
                                    break;
                                case 'depth':
                                    $sheet_data_title[$key] = 'height';
                                    break;
                                case 'tableper':
                                    $sheet_data_title[$key] = 'table percent';
                                    break;
                                case 'depthper':
                                    $sheet_data_title[$key] = 'depth percent';
                                    break;
                                case 'symm':
                                    $sheet_data_title[$key] = 'symmetry';
                                    break;
                                case 'video link':
                                    $sheet_data_title[$key] = 'video link';
                                    break;
                                case 'mage link':
                                    $sheet_data_title[$key] = 'image link';
                                    break;
                                case 'ca':
                                    $sheet_data_title[$key] = 'crown angle';
                                    break;
                                case 'ch':
                                    $sheet_data_title[$key] = 'crown height';
                                    break;
                                case 'pa':
                                    $sheet_data_title[$key] = 'pavilion angle';
                                    break;
                                case 'ph':
                                    $sheet_data_title[$key] = 'pavilion depth';
                                    break;
                                case 'country':
                                    $sheet_data_title[$key] = 'country';
                                    break;
                                // case 'girdle_per':
                                //     $sheet_data_title[$key] = 'girdle %';
                                //     break;
                                case 'girdle condition':
                                    $sheet_data_title[$key] = 'girdle condition';
                                    break;
                                // case 'fcolor':
                                //     $sheet_data_title[$key] = 'fancy color';
                                //     break;
                                // case 'fcintens':
                                //     $sheet_data_title[$key] = 'fancy color intensity';
                                //     break;
                                // case 'key_to_symbols':
                                //     $sheet_data_title[$key] = 'key to symbols';
                                //     break;
                                // case 'culet_seq':
                                //     $sheet_data_title[$key] = 'culet';
                                //     break;
                                case 'eyeclean':
                                    $sheet_data_title[$key] = 'eye clean';
                                    break;
                                // case 'stone_comment':
                                //     $sheet_data_title[$key] = 'supplier comments';
                                //     break;
                                // case 'girdlethin_id':
                                //     $sheet_data_title[$key] = 'girdle thin';
                                //     break;
                                // case 'girdlethick_id':
                                //     $sheet_data_title[$key] = 'girdle thick';
                                //     break;
                                // case 'luster':
                                //     $sheet_data_title[$key] = 'shade';
                                //     break;
                                case 'shade':
                                    $sheet_data_title[$key] = 'empty_shade';
                                    break;
                                default:
                                    $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                            }
                        }
                        $shiping_price_array = AppHelper::shipingPriceArray();
                        $s_price_array = AppHelper::sPriceArray($supplier);

                        ###################################################
                        #################### Natural ######################
                        ###################################################

                        $updatedelete = 1;
                        DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                        DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                        DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                        if ($supplier->stock_status == 'ACTIVE') {
                        } else {
                            DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                        }

                        $flag = true;
                        $i = 1;
                        $valid = 0;
                        $invalid = 0;
                        $j = 0;

                        if ($updatedelete) {
                            foreach ($sheet_data as $value) {
                                $keyvaluepair = array_combine($sheet_data_title, $value);
                                if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                    if (empty(trim(@$keyvaluepair['certificate #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Certificate Blank";
                                    } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Stock ID Blank";
                                    } else {
                                        $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                        if ($shape == "") {
                                            $respo['success'] = false;
                                            $respo['reason'] = "Shape";
                                        } else {
                                            $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                        }
                                    }

                                    if ($respo['success']) {
                                        $cut = '';
                                        $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                        if ($shape == "ROUND") {
                                            $C_shape = "round";
                                            $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                            $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                            $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                            $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                            $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                        } else {
                                            $C_shape = "pear";
                                        }

                                        if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                            $color = 'fancy';
                                            $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                            $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                            $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                            $cut = '';
                                        } else {
                                            $f_color = $f_intensity = $f_overtone = '';
                                            $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                        }

                                        $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                        $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                        $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                        $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                        $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                        $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                        if(empty($milky))
                                        {
                                            if(isset($keyvaluepair['luster']))
                                            {
                                                $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                                switch($lusterToMilky)
                                                {
                                                    case 'excellent':
                                                    case 'ex':
                                                    case 'verygood':
                                                    case 'vg+':
                                                        $milky = 'NO MILKY';
                                                        break;
                                                    case 'lightmilky':
                                                        $milky = 'LIGHT MILKY ';
                                                        break;
                                                    case 'milky':
                                                        $milky = 'MILKY';
                                                        break;
                                                }
                                            }
                                        }

                                        $certi = trim(@$keyvaluepair['certificate #']);
                                        $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                        $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                        $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                        if(empty($eyeclean))
                                        {
                                            $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                            switch($clarityToeyeclean)
                                            {
                                                case 'fl':
                                                case 'if':
                                                case 'vvs1':
                                                case 'vvs2':
                                                case 'vs1':
                                                    $eyeclean = "Yes";
                                                    break;
                                            }
                                        }

                                        $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                        $add_dic = 0;
                                        if (!empty($s_price_array)) {
                                            $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                        }
                                        $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                        $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                        $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                        $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                        $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                        $net_price = round($carat * $newdollerpercarat, 2);

                                        $C_Length = $C_Width = $C_Depth = 0;
                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                        }
                                        else
                                        {
                                            $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                            $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                            $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                        }

                                        $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                        $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                        $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                        $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                        @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                        @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => $shape,
                                            'carat' => $carat,
                                            'color' => $color,
                                            'clarity' => strtoupper($clarity),
                                            'cut' => $cut,
                                            'polish' => $C_Polish,
                                            'symmetry' => $C_Symmetry,
                                            'fluorescence' => $C_Fluorescence,
                                            'orignal_rate' => $dollerpercarat,
                                            'rate' => $newdollerpercarat,
                                            'net_dollar' => $net_price,
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'lab' => $lab,
                                            'fancy_color' => $f_color,
                                            'fancy_intensity' => $f_intensity,
                                            'fancy_overtone' => $f_overtone,
                                            'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                            'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                            'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                            'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                            'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                            'crown_angle' => $Crn_Ag,
                                            'crown_height' => $Crn_Ht,
                                            'pavilion_angle' => $Pav_Ag,
                                            'pavilion_depth' => $Pav_Dp,
                                            'certificate_no' => $certi,
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'country' => $country,
                                            'city' => @$keyvaluepair['city'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'milky' => $milky,
                                            'eyeclean' => $eyeclean,
                                            'image' => $image,
                                            'video' => $video,
                                            'heart' => $heart,
                                            'arrow' => $arrow,
                                            'asset' => $asset,
                                            'diamond_type' => 'L',
                                            'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                            'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                            'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                            'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                            'is_delete' => '0',
                                        );

                                        $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                        $valid++;
                                    } else {
                                        if (@$keyvaluepair['girdle %'] != '') {
                                            $gridle_per = @$keyvaluepair['girdle %'];
                                        } else {
                                            $gridle_per = '0';
                                        }

                                        if (@$keyvaluepair['measurements'] != "") {
                                            $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                            $main = explode("x", $mesurment);
                                            $C_Length = (!empty($main[0])) ? $main[0] : '';
                                            $C_Width = (!empty($main[1])) ? $main[1] : '';
                                            $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                        }
                                        else
                                        {
                                            $C_Length = $keyvaluepair['length'];
                                            $C_Width = $keyvaluepair['width'];
                                            $C_Depth = $keyvaluepair['height'];
                                        }

                                        $result = array(
                                            'supplier_name' => $supplier->companyname,
                                            'supplier_id' => $supplier->sup_id,
                                            'ref_no' => @$keyvaluepair['stock #'],
                                            'shape' => @$keyvaluepair['shape'],
                                            'carat' => @$keyvaluepair['weight'],
                                            'color' => @$keyvaluepair['color'],
                                            'clarity' => @$keyvaluepair['clarity'],
                                            'cut' => @$keyvaluepair['cut grade'],
                                            'polish' => @$keyvaluepair['polish'],
                                            'symmetry' => @$keyvaluepair['symmetry'],
                                            'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                            'length' => $C_Length,
                                            'width' => $C_Width,
                                            'depth' => $C_Depth,
                                            'lab' => @$keyvaluepair['lab'],
                                            'certificate_no' => @$keyvaluepair['certificate #'],
                                            'cert_comment' => @$keyvaluepair['report comments'],
                                            'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                            'fancy_color' => @$keyvaluepair['fancy color'],
                                            'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                            'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                            'depth_per' => @$keyvaluepair['depth percent'],
                                            'table_per' => @$keyvaluepair['table percent'],
                                            'girdle_thin' => @$keyvaluepair['girdle thin'],
                                            'girdle_thick' => @$keyvaluepair['girdle thick'],
                                            'gridle' => @$keyvaluepair['girdle condition'],
                                            'cutlet' => @$keyvaluepair['culet'],
                                            'gridle_per' => @$keyvaluepair['girdle percent'],
                                            'crown_height' => @$keyvaluepair['crown height'],
                                            'crown_angle' => @$keyvaluepair['crown angle'],
                                            'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                            'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                            'country' => @$keyvaluepair['country'],
                                            'city' => @$keyvaluepair['city'],
                                            'image' => @$keyvaluepair['image link'],
                                            'video' => trim(@$keyvaluepair['video link']),
                                            'heart' => @$keyvaluepair['heart image'],
                                            'arrow' => @$keyvaluepair['arrow image'],
                                            'asset' => @$keyvaluepair['aset image'],
                                            'key_symbols' => @$keyvaluepair['key to symbol'],
                                            'milky' => @$keyvaluepair['milky'],
                                            'eyeclean' => @$keyvaluepair['eye clean'],
                                            'availability' => @$keyvaluepair['availability'],
                                            'shade' => @$keyvaluepair['shade'],
                                            'supplier_comments' => @$keyvaluepair['supplier comments'],
                                            'luster' => @$keyvaluepair['luster'],
                                            'culet_condition' => @$keyvaluepair['culet condition'],
                                        );
                                        $result['reason'] = $respo['reason'];
                                        DiamondInvalid::insert($result);
                                        $invalid++;
                                    }
                                    $j++;
                                }
                                $i++;
                            }
                        }

                        if ($flag) {
                            $stock_upload_report = array(
                                'supplier_id' => $supplier->sup_id,
                                'no_of_stone' => $j,
                                'valid_diamond' => $valid,
                                'invalid_diamond' => $invalid,
                                'upload_mode' => 'API',
                                'info' => '',
                                'created_at' => date('Y-m-d H:i:s'),
                                'file_updated_at' => date('Y-m-d H:i:s'),
                            );
                            $load_id = StockUploadReport::insertGetId($stock_upload_report);
                            $data_response['name'] = $supplier->companyname;
                            $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                        }
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function ParishiDiamond()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 486)->first(); //486
        // dd($supplier);
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();

                curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://parishidiamond.com/aspxpages/StkDwnl.aspx?uname=THEDIAMONDPORT&pwd=Mumbai@10101',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_SSL_VERIFYHOST => false,
                CURLOPT_SSL_VERIFYPEER => false,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'POST',
                CURLOPT_HTTPHEADER => array(
                    'Content-Length: 0',
                    'Cookie: ASP.NET_SessionId=s54krmbkujahdc4yeatwtey4'
                ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $sxml = simplexml_load_string(utf8_encode($response));
                $json_string = json_encode($sxml);
                $response = json_decode($json_string, TRUE);

                if(!empty($response['ExcelData']))
                {
                    $sheet_data = $response['ExcelData']; ## Create variable $sheet_data from response of result
                    $sheet_data_title = array_keys($sheet_data[0]);

                    $sheet_data_title1 = array_keys(array("RefNo" => "231638",
                        "Availability" => "AVAILABLE",
                        "CutName" => "RD",
                        "Weight" => "1.000",
                        "ColorCode" => "G",
                        "ClarityName" => "SI1",
                        "PropCode" => "VG",
                        "PolishName" => "VG",
                        "SymName" => "EX",
                        "FLName" => "NONE",
                        "Diameter" => "6.52-6.58*3.74",
                        "CertName" => "GIA",
                        "CertNo" => "7398659569",
                        "Treatment" => [],
                        "RapRate" => "8100",
                        "RapDown" => "-40.00",
                        "Rate" => "4860.00",
                        "CashPriceDiscount" => [],
                        "RapPrice" => [],
                        "TotDepth" => "57.10",
                        "Table" => "64.00",
                        "BGM" => "-",
                        "GirdleMinMs" => "3.47",
                        "GirdleMaxMs" => "4.35",
                        "GirdlePer" => "4.00",
                        "GirdleCondition" => [],
                        "Culet" => "N",
                        "CuletCondition" => [],
                        "CH" => "10.50",
                        "CA" => "30.00",
                        "PavilionPer" => "43.00",
                        "PA" => "40.80",
                        "LaserInscription" => [],
                        "Comments" => "Additional clouds pinpoints and surface graining are not shown.",
                        "Location" => "INDIA",
                        "State" => [],
                        "City" => [],
                        "KeyToSymbols" => "Feather Cloud Crystal Needle Chip Indented Natural Natural",
                        "ColorShade" => "WH",
                        "Strln" => "50.00",
                        "CenterInclusion" => [],
                        "BlackInc" => "0",
                        "SuratRemarks" => "I",
                        "ImagePath" => "https://videop.co.in/imaged/T-26E-9801/T-26E-9801.jpg",
                        "VideoPath" => "https://videop.co.in/imaged/T-26E-9801/T-26E-9801.mp4",
                        "CertificatePath" => "https://www.parishidiamond.com/pages/CertificatePDF?reportno=231638|1.000")); ## Create array of title

                    // Change title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                        $sheet_data_title1 = AppHelper::ChangeExcelTitleNatural($sheet_data_title1);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                        $sheet_data_title1 = AppHelper::ChangeTitleLabGrown($sheet_data_title1);
                    }

                    // print_r($sheet_data);
                    // die;
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(array(' ', '.','_'), '',strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'cutname':
                                $sheet_data_title[$key] = 'shape';
                                break;
                            // case 'reportno':
                            //     $sheet_data_title[$key] = 'certificate #';
                            //     break;
                            case 'diameter':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'certname':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'colorcode':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'clarityname':
                                $sheet_data_title[$key] = 'clarity';
                                break;
                            case 'propcode':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'polishname':
                                $sheet_data_title[$key] = 'polish';
                                break;
                            case 'symname':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'flname':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'totdepth':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'depth':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'length1':
                                $sheet_data_title[$key] = 'length';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavillionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'pavilionper':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'girdlethin':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            case 'keytosymbols':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'eyeclean':
                                $sheet_data_title[$key] = 'eye clean';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'culetsize':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'imagepath':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'videopath':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    foreach ($sheet_data_title1 as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(array(' ', '.','_'), '',strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'cutname':
                                $sheet_data_title1[$key] = 'shape';
                                break;
                            // case 'reportno':
                            //     $sheet_data_title1[$key] = 'certificate #';
                            //     break;
                            case 'diameter':
                                $sheet_data_title1[$key] = 'measurements';
                                break;
                            case 'certname':
                                $sheet_data_title1[$key] = 'lab';
                                break;
                            case 'colorcode':
                                $sheet_data_title1[$key] = 'color';
                                break;
                            case 'clarityname':
                                $sheet_data_title1[$key] = 'clarity';
                                break;
                            case 'propcode':
                                $sheet_data_title1[$key] = 'cut grade';
                                break;
                            case 'polishname':
                                $sheet_data_title1[$key] = 'polish';
                                break;
                            case 'symname':
                                $sheet_data_title1[$key] = 'symmetry';
                                break;
                            case 'flname':
                                $sheet_data_title1[$key] = 'fluorescence intensity';
                                break;
                            case 'tableper':
                                $sheet_data_title1[$key] = 'table percent';
                                break;
                            case 'totdepth':
                                $sheet_data_title1[$key] = 'depth percent';
                                break;
                            case 'depth':
                                $sheet_data_title1[$key] = 'height';
                                break;
                            case 'length1':
                                $sheet_data_title1[$key] = 'length';
                                break;
                            case 'crownangle':
                                $sheet_data_title1[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title1[$key] = 'crown height';
                                break;
                            case 'pavillionangle':
                                $sheet_data_title1[$key] = 'pavilion angle';
                                break;
                            case 'pavilionper':
                                $sheet_data_title1[$key] = 'pavilion depth';
                                break;
                            case 'girdlethin':
                                $sheet_data_title1[$key] = 'girdle condition';
                                break;
                            case 'keytosymbols':
                                $sheet_data_title1[$key] = 'key to symbols';
                                break;
                            case 'eyeclean':
                                $sheet_data_title1[$key] = 'eye clean';
                                break;
                            case 'girdle':
                                $sheet_data_title1[$key] = 'girdle %';
                                break;
                            case 'culetsize':
                                $sheet_data_title1[$key] = 'culet';
                                break;
                            case 'location':
                                $sheet_data_title1[$key] = 'country';
                                break;
                            case 'imagepath':
                                $sheet_data_title1[$key] = 'image link';
                                break;
                            case 'videopath':
                                $sheet_data_title1[$key] = 'video link';
                                break;
                            case 'heartimage':
                                $sheet_data_title1[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title1[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title1[$key] = 'aset image';
                                break;
                            default:
                                $sheet_data_title1[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }


                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            foreach ($value as $key => $values) {
                                if (is_array($values)) $value[$key] = "";
                            }

                            if(count($value) == 45)
                            {
                                $keyvaluepair = array_combine($sheet_data_title, $value);
                            }
                            elseif(count($value) == 46)
                            {
                                $keyvaluepair = array_combine($sheet_data_title1, $value);
                            }

                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && !empty(@$keyvaluepair['certificate #']) && @$keyvaluepair['weight'] > 0 && !empty(@$keyvaluepair['color'])) {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : 0;
                                        $C_Width = (!empty($main[1])) ? $main[1] : 0;
                                        $C_Depth = (!empty($main[2])) ? $main[2] : 0;
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'W',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : 0;
                                        $C_Width = (!empty($main[1])) ? $main[1] : 0;
                                        $C_Depth = (!empty($main[2])) ? $main[2] : 0;
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                    print_r($data_response);
                    // $this->benchmark->mark('code_end');
                    // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                    // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                }
                else
                {
                    print_r($response);
                }
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function ShyamCorporation()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',387)->first();
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'https://shyamcorporation.net/WServices/GeneralFetchStockService.svc/FetchStock?sidx=&sord=&page=1&rows=9000&loginUserName=diamondport&loginPwd=tdp2022',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS =>'{
                                            "SearchUserID":"Salim",
                                            "SearchUserName":"Salim",
                                            "strShape":"",
                                            "CARAT_FROM": 0.18,
                                            "CARAT_TO": 20,
                                            "strColor": "",
                                            "strPolish": "",
                                            "strSymmetry": "",
                                            "strCut": ""
                                        }',
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/json'
                    ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err;die;
                }

                $response = json_decode($response, true);

                if($response == true)
                {
                    $sheet_data = $response['rows'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'size':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'clarity':
                                $sheet_data_title[$key] = 'clarity';
                                break;
                            case 'stoneid':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'fluorescence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'certificateNo':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'lab':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'price':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            // case 'depth':
                            //     $sheet_data_title[$key] = 'height';
                            //     break;
                            case 'tablepercent':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthpercent':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'symm':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            case 'video link':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'mage link':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'country':
                                $sheet_data_title[$key] = 'country';
                                break;
                            // case 'girdle_per':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            case 'girdle condition':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'key_to_symbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'culet_seq':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            case 'eyeclean':
                                $sheet_data_title[$key] = 'eye clean';
                                break;
                            // case 'stone_comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            // case 'luster':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            case 'shade':
                                $sheet_data_title[$key] = 'empty_shade';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'W',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function ExcelSuccess()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',724)->first(); //724
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";
                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'http://168.138.160.6:8086/api/stock/37522',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'GET',
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $response = stripslashes($response);
                // $response = str_replace('[ Free Shipping to HONG KONG ]', '', $response);
                // $response = str_replace('ONE PRICE  {Login at www.esl9.com}', '', $response);
                $response = trim($response, '"');

                $response = json_decode($response, true);

                if(!empty($response))
                {
                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'rapnetprice':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'colour':
                                $sheet_data_title[$key] = 'color';
                                break;
                            // case 'stoneid':
                            //     $sheet_data_title[$key] = 'stock #';
                            //     break;
                            // case 'fluorescence':
                            //     $sheet_data_title[$key] = 'fluorescence intensity';
                            //     break;
                            // case 'certificateNo':
                            //     $sheet_data_title[$key] = 'certificate #';
                            //     break;
                            // case 'cut':
                            //     $sheet_data_title[$key] = 'cut grade';
                            //     break;
                            // case 'lab':
                            //     $sheet_data_title[$key] = 'lab';
                            //     break;
                            case 'rapnetprice':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'depthmm':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthper':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            // case 'girdle_per':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            case 'girdle condition':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            // case 'fcolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            // case 'fcintens':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'key_to_symbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'culet_seq':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            case 'eyeclean':
                                $sheet_data_title[$key] = 'eye clean';
                                break;
                            // case 'stone_comment':
                            //     $sheet_data_title[$key] = 'supplier comments';
                            //     break;
                            // case 'girdlethin_id':
                            //     $sheet_data_title[$key] = 'girdle thin';
                            //     break;
                            // case 'girdlethick_id':
                            //     $sheet_data_title[$key] = 'girdle thick';
                            //     break;
                            // case 'luster':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }

                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'W',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {

                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function CDinesh()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',741)->first();  //supplier id //741
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";
                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'http://service.cdinesh.in/fullstockapi.asmx?op=GetStockJsonSP',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS =>'<?xml version="1.0" encoding="utf-8"?>
                    <soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
                    <soap12:Body>
                        <GetStockJsonSP xmlns="http://tempuri.org/">
                        <Uid>2c944281-cf99-49a0-b9b4-df9cb62ce62b</Uid>
                        </GetStockJsonSP>
                    </soap12:Body>
                    </soap12:Envelope>',
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/soap+xml'
                    ),
                ));


                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $first_replace = str_replace('<?xml version="1.0" encoding="utf-8"?><soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><soap:Body><GetStockJsonSPResponse xmlns="http://tempuri.org/"><GetStockJsonSPResult>','',$response);
                $last_response  = str_replace('</GetStockJsonSPResult></GetStockJsonSPResponse></soap:Body></soap:Envelope>','',$first_replace);

                $response = json_decode($last_response, true);

                if($response == true)
                {
                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'status':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'packetno':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'wt':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'colour':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'flourence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'certificateno':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'price':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurements':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthper':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'videocd':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'fancycolorintensity':
                                $sheet_data_title[$key] = 'fancy color intensity';
                                break;
                            case 'keytosyb':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'cullet':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'imageurl':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            // print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function DiamantireBv()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',779)->first();  //supplier id //779
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

                $curl = curl_init();

                curl_setopt_array($curl, array(
                  CURLOPT_URL => 'http://168.138.160.6:8086/api/stock/37542',
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => '',
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 0,
                  CURLOPT_FOLLOWLOCATION => true,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => 'GET',
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }
                $response = stripslashes($response);
                $response = trim($response,'"');
                $response = json_decode($response, true);
                if($response == true)
                {
                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'status':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stockno':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'wt':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'colour':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'flourence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            // case 'lab':
                            //     $sheet_data_title[$key] = 'lab';
                            //     break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'rapnetprice':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurements':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthper':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'videocd':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'depthmm':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'fancycolorintensity':
                                $sheet_data_title[$key] = 'fancy color intensity';
                                break;
                            case 'keytosyb':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'cullet':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'imageurl':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            // print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'W',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function DMDiamond()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 778)->first();  //supplier id //778
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";
                $curl = curl_init();

                curl_setopt_array($curl, array(
                  CURLOPT_URL => 'http://www.dmdiamonds.in/api/getstock?user=QpRK99iw6JofEoglYKzR6ITHDLO/h6G77cUd5DVIO2c=&key=JwnZS1oyEXXVxJiSR/Y7AcSZrKQ3XnZVRmfuR4gZt4A=',
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => '',
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 0,
                  CURLOPT_FOLLOWLOCATION => true,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => 'GET',
                  CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/soap+xml',
                    'Cookie: ASP.NET_SessionId=0m25ladmvvkwgj1rw2aunfdb'
                  ),
                ));

                $response = curl_exec($curl);

                curl_close($curl);
                $err = curl_error($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $str = strip_tags($response);
                // $str = str_replace('  ', '', $response);
                $str = str_replace('<form method="post" action="./getstock?user=QpRK99iw6JofEoglYKzR6ITHDLO%2fh6G77cUd5DVIO2c%3d&amp;key=JwnZS1oyEXXVxJiSR%2fY7AcSZrKQ3XnZVRmfuR4gZt4A%3d" id="form1">', '', $response);
                $str = str_replace('<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="/wEPDwULLTE2MTY2ODcyMjlkZLlQNdj1yLtIK3dSkT5LRNbAx4SUWXDdXZ/TLBZck00E" />', '', $str);
                $str = str_replace('<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="ED942F36" />', '', $str);
                $str = str_replace(array('<div>','</div>','<title>','</title>','<!DOCTYPE html>','<html lang="en">','<head>','</head>','<body>','\n','</form>','</body>','</html>'), '', $str);
                // $str = trim($str);
                $sxml = simplexml_load_string($str);

                $json_string = json_encode($sxml);
                $response = json_decode($json_string, TRUE);

                if($response['ExcelData'])
                {
                    $sheet_data = $response['ExcelData'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'status':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stonex0020id':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'colour':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'flourence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'eyex0020clean':
                                $sheet_data_title[$key] = 'eye clean';
                                break;
                            case 'certificatex0020no':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'pricex002fct':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurements':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'tabx0025':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'totdepthx0020x0025':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'videocd':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crx0020ang':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crx0020hgt':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pvx0020ang':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'pvx0020hgt':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'depthmm':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'fancycolorintensity':
                                $sheet_data_title[$key] = 'fancy color intensity';
                                break;
                            case 'keyx0020tox0020sym':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'cullet':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'imageurl':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            if(count($value) == 38)
                            {
                                $keyvaluepair = array_combine($sheet_data_title, $value);
                            }
                            else
                            {
                                // print_r(count($value));
                                // print_r($value);
                                // print_r($keyvaluepair);
                                // die;
                                // continue;
                            }

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {

                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'W',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function ShineStone()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',783)->first();  //supplier id //783
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

                $curl = curl_init();

                curl_setopt_array($curl, array(
                  CURLOPT_URL => 'http://168.138.160.6:8086/api/stock/37543',
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => '',
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 0,
                  CURLOPT_FOLLOWLOCATION => true,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => 'GET',
                  CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json'
                  ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);
                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }
                $response = stripslashes($response);
                $response = trim($response,'"');
                $response = json_decode($response, true);
                if($response == true)
                {
                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'status':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stockno':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'wt':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'colour':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'flourence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            // case 'lab':
                            //     $sheet_data_title[$key] = 'lab';
                            //     break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'rapnetprice':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurements':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthper':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'videocd':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'depthmm':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'fancycolorintensity':
                                $sheet_data_title[$key] = 'fancy color intensity';
                                break;
                            case 'keytosyb':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'cullet':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'imageurl':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            // print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function GlowStar()
    {

        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',465)->first();  //supplier id //741
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

                $curl = curl_init();

                curl_setopt_array($curl, array(
                  CURLOPT_URL => 'http://168.138.160.6:8086/api/stock/37543',
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => '',
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 0,
                  CURLOPT_FOLLOWLOCATION => true,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => 'GET',
                  CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json'
                  ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);
                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }
                $response = stripslashes($response);
                $response = trim($response,'"');
                $response = json_decode($response, true);
                if($response == true)
                {
                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'status':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stockno':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'wt':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'colour':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'flourence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            // case 'lab':
                            //     $sheet_data_title[$key] = 'lab';
                            //     break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'rapnetprice':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurements':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depthper':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'videocd':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'depthmm':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'fancycolorintensity':
                                $sheet_data_title[$key] = 'fancy color intensity';
                                break;
                            case 'keytosyb':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'cullet':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'imageurl':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            // print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }


    public function Blumoon()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',794)->first();  //supplier id //794
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

                $curl = curl_init();

                curl_setopt_array($curl, array(
                  CURLOPT_URL => 'https://api.blumoondiamonds.com/v2/Inventory',
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => '',
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 0,
                  CURLOPT_FOLLOWLOCATION => true,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => 'GET',
                  CURLOPT_POSTFIELDS => array('username' => 'thediamondport','password' => 'gFD<9E('),
                  CURLOPT_HTTPHEADER => array(
                    'Authorization: Basic dGhlZGlhbW9uZHBvcnQ6Z0ZEPDlFKA=='
                  ),
                ));

                $response = curl_exec($curl);

                curl_close($curl);
                $err = curl_error($curl);
                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }
                $response = json_decode($response, true);
                if($response == true)
                {
                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'status':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'packetid':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'caretweight':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'color':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'flourence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'certificatelab':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'certificateno':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'raporate':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurements':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'tbl':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'dp':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'videolink':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'symentry':
                                $sheet_data_title[$key] = 'symmetry';
                                break;
                            // case 'depthmm':
                            //     $sheet_data_title[$key] = 'height';
                            //     break;
                            // case 'fancycolorintensity':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'keytosyb':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            case 'culet':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'imagelink':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondLabgrown::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            // print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function AfricanStar()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',796)->first();  //supplier id //796
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

                $curl = curl_init();

                curl_setopt_array($curl, array(
                CURLOPT_URL => 'http://astar.diamx.net/API/StockSearch?APIToken=c33f4579-a1b3-4901-bf2b-a202e0c7347f',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'POST',
                CURLOPT_HTTPHEADER => array(
                    'Content-Length: 0',
                    'APIToken: c33f4579-a1b3-4901-bf2b-a202e0c7347f'
                ),
                ));

                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $response = json_decode($response, true);

                if($response['ApiStatus'] == 'Success')
                {

                    $sheet_data = $response['StoneList'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'status':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stone_no':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'weight':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'color':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'symm':
                                $sheet_data_title[$key] = 'symmetry';
                            break;
                            case 'cut':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'flourence':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'lab':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'lab_report_no':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'salerate':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurement':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'table_diameter_per':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'total_depth':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'videocd':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'depthmm':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'fancycolorintensity':
                                $sheet_data_title[$key] = 'fancy color intensity';
                                break;
                            case 'keytosyb':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'cullet':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'imageurl':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            // print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function EasyImpex()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',800)->first();  //supplier id //800
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

                $curl = curl_init();

                curl_setopt_array($curl, array(
                  CURLOPT_URL => 'https://easyimpex.co.in/wp-json/gia/all-products',
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => '',
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 0,
                  CURLOPT_FOLLOWLOCATION => true,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => 'GET',
                ));

                $response = curl_exec($curl);

                curl_close($curl);
                $err = curl_error($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $response = json_decode($response, true);

                if($response)
                {

                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'availability':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stock':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'weight':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'color':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'symmetry':
                                $sheet_data_title[$key] = 'symmetry';
                            break;
                            case 'cut_grade':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'fluorescence_intensity':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'lab':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'per_ct':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurements':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'table':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'videocd':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'depthmm':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'fancycolorintensity':
                                $sheet_data_title[$key] = 'fancy color intensity';
                                break;
                            case 'key_to_symbols':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'culet_size':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'diamond_image':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle_condition':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            // print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function Osam()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',476)->first();  //supplier id //800
        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

                echo '<pre>';
                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'http://3.110.23.80/OsamProvideStock.svc/GetStock',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_HTTPHEADER => array(
                      'Content-Length: 0'
                    ),
                  ));

                $response = curl_exec($curl);
                curl_close($curl);
                $err = curl_error($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $response = json_decode($response, true);
                if($response['GetStockResult'])
                {
                    $sheet_data = $response['GetStockResult']['Data'];
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title

                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }
                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            // case 'availability':
                            //     $sheet_data_title[$key] = 'availability';
                            //     break;
                            // case 'packet_no':
                            //     $sheet_data_title[$key] = 'stock #';
                            //     break;
                            case 'cts':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'purity':
                                $sheet_data_title[$key] = 'clarity';
                                break;
                            // case 'symm':
                            //     $sheet_data_title[$key] = 'symmetry';
                            // break;
                            // case 'cut':
                            //     $sheet_data_title[$key] = 'cut grade';
                            //     break;
                            // case 'fls':
                            //     $sheet_data_title[$key] = 'fluorescence intensity';
                            //     break;
                            // case 'lab':
                            //     $sheet_data_title[$key] = 'lab';
                            //     break;
                            // case 'report_no':
                            //     $sheet_data_title[$key] = 'certificate #';
                            //     break;
                            case 'netrate':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'lwd':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'tableper':
                                $sheet_data_title[$key] = 'table percent';
                                break;

                            // case 'depth percent':
                            //     $sheet_data_title[$key] = 'height';
                            //     break;
                            case 'depthper':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            // case 'image_link':
                            //     $sheet_data_title[$key] = 'video link';
                            //     break;
                            // case 'crown_angle':
                            //     $sheet_data_title[$key] = 'crown angle';
                            //     break;
                            // case 'crown_height':
                            //     $sheet_data_title[$key] = 'crown height';
                            //     break;
                            case 'pavangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'pavheight':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            // case 'location':
                            //     $sheet_data_title[$key] = 'country';
                            //     break;
                            // case 'fancycolor':
                            //     $sheet_data_title[$key] = 'fancy color';
                            //     break;
                            case 'length1':
                                $sheet_data_title[$key] = 'length';
                                break;
                            // case 'fancycolorintensity':
                            //     $sheet_data_title[$key] = 'fancy color intensity';
                            //     break;
                            // case 'key_to_symbols':
                            //     $sheet_data_title[$key] = 'key to symbols';
                            //     break;
                            // case 'culet_size':
                            //     $sheet_data_title[$key] = 'culet';
                            //     break;
                            // case 'diamond_image':
                            //     $sheet_data_title[$key] = 'image link';
                            //     break;
                            // case 'shade':
                            //     $sheet_data_title[$key] = 'shade';
                            //     break;
                            // case 'heartimage':
                            //     $sheet_data_title[$key] = 'heart image';
                            //     break;
                            // case 'arrowimage':
                            //     $sheet_data_title[$key] = 'arrow image';
                            //     break;
                            // case 'assetimage':
                            //     $sheet_data_title[$key] = 'aset image';
                            //     break;
                            // case 'girdleper':
                            //     $sheet_data_title[$key] = 'girdle %';
                            //     break;
                            // case 'milky/luster':
                            //     $sheet_data_title[$key] = 'luster';
                            //     break;
                            // case 'girdle_condition':
                            //     $sheet_data_title[$key] = 'girdle condition';
                            //     break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }
                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }

    public function NaturalBelgiumdia() //no conflict API
    {

        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id', 409)->first();

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
                echo "<pre>";

                ## Call api for get data
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://belgiumdia.com/api/DeveloperAPI?stock=&APIKEY=55697304cd03b16b51920fcd2ae09c0b55ec3af1013d",
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => "",
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 300,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "GET",
                    CURLOPT_HTTPHEADER => array(
                        "cache-control: no-cache",
                    ),
                ));
                $response = curl_exec($curl);
                $err = curl_error($curl);
                curl_close($curl);

                if ($err) {
                    echo "cURL Error 1#:" . $err;
                    die;
                }

                $newresponse = json_decode($response, true); ## Create array from response

                $sheet_data = $newresponse['Stock']; ## Create variable $sheet_data from response of result
                if(!empty($sheet_data))
                {
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    ## Change title
                    if ($supplier->diamond_type == 'Natural') {
                        $sheet_data_title = AppHelper::ChangeTitleNatural($sheet_data_title);
                    } else {
                        $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitle = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));
                        switch ($SheetTitle) {
                            case 'fluorescence_intensity':
                                    $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'stock_no':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'certificate':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'buy_price':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'table_per':
                                    $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth_per':
                                    $sheet_data_title[$key] = 'depth percent';
                                break;
                            default:
                                    $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ####################
                    ###################################################
                    $updatedelete = DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($flag) {
                        $updatestring = '';
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);

                            if($keyvaluepair['diamond_type'] == 'Natural Diamond')
                            {
                                continue;
                            }

                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #" && $keyvaluepair['diamond_type'] == 'Lab Grown') {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::LabGrownCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);

                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);

                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_lab_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    $C_Length = $C_Width = $C_Depth = '0';
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:'0';
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:'0';
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:'0';
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }
                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);

                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }
                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }


    public function Vidhansh()
    {
        $data_response = array();
        $supplier = Supplier::join('users', 'users.id', '=', 'suppliers.sup_id')->where('sup_id',477)->first();  //supplier i

        try {
            if (!empty($supplier)) {
                $todate= date('Y-m-d');
                // $this->benchmark->mark('code_start');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading start';
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');

                $curl = curl_init();

                curl_setopt_array($curl, array(
                CURLOPT_URL => 'http://122.169.119.224:805/?APIKEY=TDP',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                ));

                $response = curl_exec($curl);
                curl_close($curl);

                $err = curl_error($curl);

                if ($err) {
                    echo "cURL Error #:" . $err; die;
                }

                $response = json_decode($response, true);
                if($response)
                {
                    $sheet_data = $response;
                    $sheet_data_title = array_keys($sheet_data[0]); ## Create array of title
                    // if ($supplier->diamond_type == 'Natural') {
                    //     $sheet_data_title = AppHelper::ChangeExcelTitleNatural($sheet_data_title);
                    // } else {
                    //     $sheet_data_title = AppHelper::ChangeTitleLabGrown($sheet_data_title);
                    // }

                    foreach ($sheet_data_title as $key => $SheetTitleArrayElement) {
                        $SheetTitleArrayElementreplacelower = trim(str_replace(" ", "", strtolower($SheetTitleArrayElement)));

                        switch ($SheetTitleArrayElementreplacelower) {
                            case 'availability':
                                $sheet_data_title[$key] = 'availability';
                                break;
                            case 'stock_num':
                                $sheet_data_title[$key] = 'stock #';
                                break;
                            case 'size':
                                $sheet_data_title[$key] = 'weight';
                                break;
                            case 'color':
                                $sheet_data_title[$key] = 'color';
                                break;
                            case 'symmetry':
                                $sheet_data_title[$key] = 'symmetry';
                            break;
                            case 'cut_grade':
                                $sheet_data_title[$key] = 'cut grade';
                                break;
                            case 'fluor_intensity':
                                $sheet_data_title[$key] = 'fluorescence intensity';
                                break;
                            case 'lab':
                                $sheet_data_title[$key] = 'lab';
                                break;
                            case 'cert_num':
                                $sheet_data_title[$key] = 'certificate #';
                                break;
                            case 'price_per_cara':
                                $sheet_data_title[$key] = '$/ct';
                                break;
                            case 'measurement':
                                $sheet_data_title[$key] = 'measurements';
                                break;
                            case 'table_percent':
                                $sheet_data_title[$key] = 'table percent';
                                break;
                            case 'depth_percent':
                                $sheet_data_title[$key] = 'depth percent';
                                break;
                            case 'video_url':
                                $sheet_data_title[$key] = 'video link';
                                break;
                            case 'crownangle':
                                $sheet_data_title[$key] = 'crown angle';
                                break;
                            case 'crownheight':
                                $sheet_data_title[$key] = 'crown height';
                                break;
                            case 'pavilionangle':
                                $sheet_data_title[$key] = 'pavilion angle';
                                break;
                            case 'paviliondepth':
                                $sheet_data_title[$key] = 'pavilion depth';
                                break;
                            case 'location':
                                $sheet_data_title[$key] = 'country';
                                break;
                            case 'fancycolor':
                                $sheet_data_title[$key] = 'fancy color';
                                break;
                            case 'depthmm':
                                $sheet_data_title[$key] = 'height';
                                break;
                            case 'fancycolorintensity':
                                $sheet_data_title[$key] = 'fancy color intensity';
                                break;
                            case 'key_to_symbols':
                                $sheet_data_title[$key] = 'key to symbols';
                                break;
                            case 'culet_size':
                                $sheet_data_title[$key] = 'culet';
                                break;
                            case 'image_url':
                                $sheet_data_title[$key] = 'image link';
                                break;
                            case 'shade':
                                $sheet_data_title[$key] = 'shade';
                                break;
                            case 'heartimage':
                                $sheet_data_title[$key] = 'heart image';
                                break;
                            case 'arrowimage':
                                $sheet_data_title[$key] = 'arrow image';
                                break;
                            case 'assetimage':
                                $sheet_data_title[$key] = 'aset image';
                                break;
                            case 'girdleper':
                                $sheet_data_title[$key] = 'girdle %';
                                break;
                            case 'milky/luster':
                                $sheet_data_title[$key] = 'luster';
                                break;
                            case 'girdle_condition':
                                $sheet_data_title[$key] = 'girdle condition';
                                break;
                            default:
                                $sheet_data_title[$key] = trim(strtolower($SheetTitleArrayElement));
                        }
                    }

                    $shiping_price_array = AppHelper::shipingPriceArray();
                    $s_price_array = AppHelper::sPriceArray($supplier);

                    ###################################################
                    #################### Natural ######################
                    ###################################################

                    $updatedelete = 1;
                    DiamondInvalid::where('supplier_id', $supplier->id)->delete();
                    DiamondConflict::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondNatural::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);
                    DiamondUnapprove::where('supplier_id', $supplier->sup_id)->update(['is_delete' => 1]);

                    if ($supplier->stock_status == 'ACTIVE') {
                    } else {
                        DiamondUnapprove::where('supplier_id', $supplier->id)->delete();
                    }

                    $flag = true;
                    $i = 1;
                    $valid = 0;
                    $invalid = 0;
                    $j = 0;

                    if ($updatedelete) {
                        foreach ($sheet_data as $value) {
                            $keyvaluepair = array_combine($sheet_data_title, $value);
                            // print_r($value);
                            // echo '<pre>';
                            // print_r($keyvaluepair);
                            // die;
                            if ($flag == true && !empty(@$keyvaluepair['weight']) && @$keyvaluepair['stock #'] != "stock #") {
                                if (empty(trim(@$keyvaluepair['certificate #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Certificate Blank";
                                } elseif (empty(trim(@$keyvaluepair['stock #']))) {
                                    $respo['success'] = false;
                                    $respo['reason'] = "Stock ID Blank";
                                } else {
                                    $shape = AppHelper::ShapeValidation(@$keyvaluepair['shape']);
                                    if ($shape == "") {
                                        $respo['success'] = false;
                                        $respo['reason'] = "Shape";
                                    } else {
                                        $respo = AppHelper::NaturalCondition($keyvaluepair, $shape);
                                    }
                                }

                                if ($respo['success']) {
                                    $cut = '';
                                    $Crn_Ht = $Crn_Ag = $Pav_Ag = $Pav_Dp = 0;
                                    if ($shape == "ROUND") {
                                        $C_shape = "round";
                                        $cut = AppHelper::CutValidation(@$keyvaluepair['cut grade']);
                                        $Crn_Ht = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown height']);
                                        $Crn_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['crown angle']);
                                        $Pav_Ag = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion angle']);
                                        $Pav_Dp = AppHelper::Diamond_CH_CA_PD_PA(@$keyvaluepair['pavilion depth']);
                                    } else {
                                        $C_shape = "pear";
                                    }

                                    if (strtolower(@$keyvaluepair['color']) == "fancy" || @$keyvaluepair['color'] == "*" || @$keyvaluepair['color'] == "") {
                                        $color = 'fancy';
                                        $f_color = AppHelper::fancycolorValidation(@$keyvaluepair['fancy color']);
                                        $f_intensity = AppHelper::intensityValidation(@$keyvaluepair['fancy color intensity']);
                                        $f_overtone = AppHelper::overtoneValidation(@$keyvaluepair['fancy color overtone']);
                                        $cut = '';
                                    } else {
                                        $f_color = $f_intensity = $f_overtone = '';
                                        $color = AppHelper::ColorValidation(@$keyvaluepair['color']);
                                    }

                                    $image = AppHelper::ImageValidation(@$keyvaluepair['image link']);
                                    $heart = !empty(@$keyvaluepair['heart image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['heart image'])) : '';
                                    $asset = !empty(@$keyvaluepair['arrow image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['arrow image'])) : '';
                                    $arrow = !empty(@$keyvaluepair['aset image']) ? AppHelper::ImageValidation(trim(@$keyvaluepair['aset image'])) : '';
                                    $video = !empty(trim(@$keyvaluepair['video link'])) ? AppHelper::VideoValidation(trim(@$keyvaluepair['video link'])) : '';

                                    $milky = !empty(@$keyvaluepair['milky']) ? AppHelper::MilkyValidation(@$keyvaluepair['milky']) : '';

                                    if(empty($milky))
                                    {
                                        if(isset($keyvaluepair['luster']))
                                        {
                                            $lusterToMilky = trim(str_replace(" ", "", strtolower(@$keyvaluepair['luster'])));
                                            switch($lusterToMilky)
                                            {
                                                case 'excellent':
                                                case 'ex':
                                                case 'verygood':
                                                case 'vg+':
                                                    $milky = 'NO MILKY';
                                                    break;
                                                case 'lightmilky':
                                                    $milky = 'LIGHT MILKY ';
                                                    break;
                                                case 'milky':
                                                    $milky = 'MILKY';
                                                    break;
                                            }
                                        }
                                    }

                                    $certi = trim(@$keyvaluepair['certificate #']);
                                    $lab = AppHelper::LabValidation(@$keyvaluepair['lab']);
                                    $country = AppHelper::CountryValidation(trim(@$keyvaluepair['country']));
                                    $eyeclean = AppHelper::EyecleanValidation(@$keyvaluepair['eye clean']);

                                    if(empty($eyeclean))
                                    {
                                        $clarityToeyeclean = trim(str_replace(" ", "", strtolower(@$keyvaluepair['clarity'])));
                                        switch($clarityToeyeclean)
                                        {
                                            case 'fl':
                                            case 'if':
                                            case 'vvs1':
                                            case 'vvs2':
                                            case 'vs1':
                                                $eyeclean = "Yes";
                                                break;
                                        }
                                    }

                                    $carat = sprintf("%.2f", @$keyvaluepair['weight']);
                                    $add_dic = 0;
                                    if (!empty($s_price_array)) {
                                        $add_dic = $this->findAdditionalValue($s_price_array[$C_shape], $carat);
                                    }
                                    $dollerpercarat = str_replace(array('$', ','), "", @$keyvaluepair['$/ct']);
                                    $newdollerpercarat = round($dollerpercarat + ($dollerpercarat * ($supplier->markup + $add_dic)) / 100, 2);
                                    $shippingprice = $this->shippingPrice($shiping_price_array[$country], $newdollerpercarat);
                                    $shippingprice = ($shippingprice > 0) ? ($shippingprice / $carat) : 0;
                                    $newdollerpercarat = $newdollerpercarat + $shippingprice;

                                    $net_price = round($carat * $newdollerpercarat, 2);
                                    $C_Length = $C_Width = $C_Depth = 0;
                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x','×'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '0';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '0';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '0';
                                    }
                                    else
                                    {
                                        $C_Length = !empty($keyvaluepair['length'])?$keyvaluepair['length']:0;
                                        $C_Width = !empty($keyvaluepair['width'])?$keyvaluepair['width']:0;
                                        $C_Depth = !empty($keyvaluepair['height'])?$keyvaluepair['height']:0;
                                    }

                                    $clarity = AppHelper::ClarityValidation(@str_replace(" ", "", @$keyvaluepair['clarity']));

                                    $C_Polish = AppHelper::CutValidation(@$keyvaluepair['polish']);
                                    $C_Symmetry = AppHelper::CutValidation(@$keyvaluepair['symmetry']);
                                    $C_Fluorescence = AppHelper::FluorescenceValidation(@$keyvaluepair['fluorescence intensity']);

                                    @$keyvaluepair['table percent'] = (@$keyvaluepair['table percent'] > 0.01 && @$keyvaluepair['table percent'] < 0.99) ? @$keyvaluepair['table percent'] * 100 : @$keyvaluepair['table percent'];
                                    @$keyvaluepair['depth percent'] = (@$keyvaluepair['depth percent'] > 0.01 && @$keyvaluepair['depth percent'] < 0.99) ? @$keyvaluepair['depth percent'] * 100 : @$keyvaluepair['depth percent'];

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => $shape,
                                        'carat' => $carat,
                                        'color' => $color,
                                        'clarity' => strtoupper($clarity),
                                        'cut' => $cut,
                                        'polish' => $C_Polish,
                                        'symmetry' => $C_Symmetry,
                                        'fluorescence' => $C_Fluorescence,
                                        'orignal_rate' => $dollerpercarat,
                                        'rate' => $newdollerpercarat,
                                        'net_dollar' => $net_price,
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'lab' => $lab,
                                        'fancy_color' => $f_color,
                                        'fancy_intensity' => $f_intensity,
                                        'fancy_overtone' => $f_overtone,
                                        'girdle_thin' => AppHelper::CheckgridleThin(@$keyvaluepair['girdle thin']),
                                        'girdle_thick' => AppHelper::CheckgridleThink(@$keyvaluepair['girdle thick']),
                                        'gridle' => AppHelper::GridleConValidation(@$keyvaluepair['girdle condition']),
                                        'cutlet' => AppHelper::CuletSizeValidation(@$keyvaluepair['culet']),
                                        'gridle_per' => AppHelper::GridlePerValidation(@$keyvaluepair['girdle percent']),
                                        'crown_angle' => $Crn_Ag,
                                        'crown_height' => $Crn_Ht,
                                        'pavilion_angle' => $Pav_Ag,
                                        'pavilion_depth' => $Pav_Dp,
                                        'certificate_no' => $certi,
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'country' => $country,
                                        'city' => @$keyvaluepair['city'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'milky' => $milky,
                                        'eyeclean' => $eyeclean,
                                        'image' => $image,
                                        'video' => $video,
                                        'heart' => $heart,
                                        'arrow' => $arrow,
                                        'asset' => $asset,
                                        'diamond_type' => 'L',
                                        'c_type' => AppHelper::TreatmentValidation(@$keyvaluepair['treatment']),
                                        'availability' => AppHelper::AvailabilityValidation(@$keyvaluepair['availability']),
                                        'shade' => AppHelper::ShadeValidation(@$keyvaluepair['shade']),
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => AppHelper::LusterValidation(@$keyvaluepair['luster']),
                                        'culet_condition' => AppHelper::CuletConValidation(@$keyvaluepair['culet condition']),
                                        'is_delete' => '0',
                                    );

                                    $this->insert_update_diamond($result, $supplier, $certi, $dollerpercarat);
                                    $valid++;
                                } else {
                                    if (@$keyvaluepair['girdle %'] != '') {
                                        $gridle_per = @$keyvaluepair['girdle %'];
                                    } else {
                                        $gridle_per = '0';
                                    }

                                    if (@$keyvaluepair['measurements'] != "") {
                                        $mesurment = str_replace(array('*', '-', 'X', 'x'), "x", strtolower(@$keyvaluepair['measurements']));
                                        $main = explode("x", $mesurment);
                                        $C_Length = (!empty($main[0])) ? $main[0] : '';
                                        $C_Width = (!empty($main[1])) ? $main[1] : '';
                                        $C_Depth = (!empty($main[2])) ? $main[2] : '';
                                    }
                                    else
                                    {
                                        $C_Length = $keyvaluepair['length'];
                                        $C_Width = $keyvaluepair['width'];
                                        $C_Depth = $keyvaluepair['height'];
                                    }

                                    $result = array(
                                        'supplier_name' => $supplier->companyname,
                                        'supplier_id' => $supplier->sup_id,
                                        'ref_no' => @$keyvaluepair['stock #'],
                                        'shape' => @$keyvaluepair['shape'],
                                        'carat' => @$keyvaluepair['weight'],
                                        'color' => @$keyvaluepair['color'],
                                        'clarity' => @$keyvaluepair['clarity'],
                                        'cut' => @$keyvaluepair['cut grade'],
                                        'polish' => @$keyvaluepair['polish'],
                                        'symmetry' => @$keyvaluepair['symmetry'],
                                        'fluorescence' => @$keyvaluepair['fluorescence intensity'],
                                        'length' => $C_Length,
                                        'width' => $C_Width,
                                        'depth' => $C_Depth,
                                        'lab' => @$keyvaluepair['lab'],
                                        'certificate_no' => @$keyvaluepair['certificate #'],
                                        'cert_comment' => @$keyvaluepair['report comments'],
                                        'orignal_rate' => !empty(@$keyvaluepair['$/ct']) ? @$keyvaluepair['$/ct'] : 0,
                                        'fancy_color' => @$keyvaluepair['fancy color'],
                                        'fancy_intensity' => @$keyvaluepair['fancy color intensity'],
                                        'fancy_overtone' => @$keyvaluepair['fancy color overtone'],
                                        'depth_per' => @$keyvaluepair['depth percent'],
                                        'table_per' => @$keyvaluepair['table percent'],
                                        'girdle_thin' => @$keyvaluepair['girdle thin'],
                                        'girdle_thick' => @$keyvaluepair['girdle thick'],
                                        'gridle' => @$keyvaluepair['girdle condition'],
                                        'cutlet' => @$keyvaluepair['culet'],
                                        'gridle_per' => @$keyvaluepair['girdle percent'],
                                        'crown_height' => @$keyvaluepair['crown height'],
                                        'crown_angle' => @$keyvaluepair['crown angle'],
                                        'pavilion_angle' => @$keyvaluepair['pavilion angle'],
                                        'pavilion_depth' => @$keyvaluepair['pavilion depth'],
                                        'country' => @$keyvaluepair['country'],
                                        'city' => @$keyvaluepair['city'],
                                        'image' => @$keyvaluepair['image link'],
                                        'video' => trim(@$keyvaluepair['video link']),
                                        'heart' => @$keyvaluepair['heart image'],
                                        'arrow' => @$keyvaluepair['arrow image'],
                                        'asset' => @$keyvaluepair['aset image'],
                                        'key_symbols' => @$keyvaluepair['key to symbol'],
                                        'milky' => @$keyvaluepair['milky'],
                                        'eyeclean' => @$keyvaluepair['eye clean'],
                                        'availability' => @$keyvaluepair['availability'],
                                        'shade' => @$keyvaluepair['shade'],
                                        'supplier_comments' => @$keyvaluepair['supplier comments'],
                                        'luster' => @$keyvaluepair['luster'],
                                        'culet_condition' => @$keyvaluepair['culet condition'],
                                    );
                                    $result['reason'] = $respo['reason'];
                                    DiamondInvalid::insert($result);
                                    $invalid++;
                                }
                                $j++;
                            }
                            $i++;
                        }
                    }

                    if ($flag) {
                        $stock_upload_report = array(
                            'supplier_id' => $supplier->sup_id,
                            'no_of_stone' => $j,
                            'valid_diamond' => $valid,
                            'invalid_diamond' => $invalid,
                            'upload_mode' => 'API',
                            'info' => '',
                            'created_at' => date('Y-m-d H:i:s'),
                            'file_updated_at' => date('Y-m-d H:i:s'),
                        );
                        $load_id = StockUploadReport::insertGetId($stock_upload_report);
                        $data_response['name'] = $supplier->companyname;
                        $data_response['message'] = $valid . " Valid Diamond,  " . $invalid . " Invalid Diamond";
                    }
                }

                print_r($data_response);
                // $this->benchmark->mark('code_end');
                // $file_log = "\n".'INFO - '.date('Y-m-d H:i:s').' --> '.$supplier->companyname.' '.$supplier->id.' - '.$supplier->upload_mode.' loading End --  Total time -  '.$this->benchmark->elapsed_time('code_start', 'code_end');
                // write_file(APPPATH.'/logs/loadlog-'.$todate.'.php', $file_log, 'a+');
            }
        } catch (Exception $e) {
            die($e->getMessage());
        }
    }
}
